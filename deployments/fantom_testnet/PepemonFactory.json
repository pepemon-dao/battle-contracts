{
  "address": "0x8e4A75CCc2436d01fBc122cBaEc2CC44fdcd5898",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxId",
          "type": "uint256"
        }
      ],
      "name": "batchGetBattleCardStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "element",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hp",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "intelligence",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialAttack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialDefense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "level",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.BattleCardStats[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxId",
          "type": "uint256"
        }
      ],
      "name": "batchGetSupportCardStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "currentRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "specialCode",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "modifierNumberOfNextTurns",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isOffense",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isNormal",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStackable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.SupportCardStats[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battleCardStats",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "element",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "hp",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "speed",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "intelligence",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "defense",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "attack",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "specialAttack",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "specialDefense",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "level",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsAddr",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int16[14]",
          "name": "arr",
          "type": "int16[14]"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "element",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hp",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "intelligence",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialAttack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialDefense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "level",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.BattleCardStats",
          "name": "_stats",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createBattleCard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "currentRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "specialCode",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "modifierNumberOfNextTurns",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isOffense",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isNormal",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStackable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.SupportCardStats",
          "name": "_stats",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createSupportCard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "num",
          "type": "bytes32"
        }
      ],
      "name": "deconvert",
      "outputs": [
        {
          "internalType": "int16[14]",
          "name": "",
          "type": "int16[14]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "elementDecode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "endMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelistAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "element",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hp",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "intelligence",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialAttack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialDefense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "level",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.BattleCardStats",
          "name": "x",
          "type": "tuple"
        }
      ],
      "name": "setBattleCardStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "element",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "x",
          "type": "string"
        }
      ],
      "name": "setElementDecode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "currentRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "specialCode",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "modifierNumberOfNextTurns",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isOffense",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isNormal",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStackable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.SupportCardStats",
          "name": "x",
          "type": "tuple"
        }
      ],
      "name": "setSupportCardStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "element",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "weakness",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "resistance",
              "type": "uint16"
            }
          ],
          "internalType": "struct PepemonStats.elementWR",
          "name": "x",
          "type": "tuple"
        }
      ],
      "name": "setWeakResist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportCardStats",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currentRoundChanges",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "nextRoundChanges",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "specialCode",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "modifierNumberOfNextTurns",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isOffense",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isNormal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isStackable",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsAddr",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "weakResist",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "weakness",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "resistance",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x883465580d7fbfc6a953c0615ee554b2f46846bec498b364cfac8116098aabda",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0x8e4A75CCc2436d01fBc122cBaEc2CC44fdcd5898",
    "transactionIndex": 0,
    "gasUsed": "6097989",
    "logsBloom": "0x
    "blockHash": "0x0000609900002e03d74650d9ea3006d8a1e87bfa0172c4bb9a389b9c3a914ff7",
    "transactionHash": "0x883465580d7fbfc6a953c0615ee554b2f46846bec498b364cfac8116098aabda",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24567751,
        "transactionHash": "0x883465580d7fbfc6a953c0615ee554b2f46846bec498b364cfac8116098aabda",
        "address": "0x8e4A75CCc2436d01fBc122cBaEc2CC44fdcd5898",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0000609900002e03d74650d9ea3006d8a1e87bfa0172c4bb9a389b9c3a914ff7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 24567751,
        "transactionHash": "0x883465580d7fbfc6a953c0615ee554b2f46846bec498b364cfac8116098aabda",
        "address": "0x8e4A75CCc2436d01fBc122cBaEc2CC44fdcd5898",
        "topics": [
          "0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0000609900002e03d74650d9ea3006d8a1e87bfa0172c4bb9a389b9c3a914ff7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 24567751,
        "transactionHash": "0x883465580d7fbfc6a953c0615ee554b2f46846bec498b364cfac8116098aabda",
        "address": "0x8e4A75CCc2436d01fBc122cBaEc2CC44fdcd5898",
        "topics": [
          "0x22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd20961299",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0000609900002e03d74650d9ea3006d8a1e87bfa0172c4bb9a389b9c3a914ff7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 24567751,
        "transactionHash": "0x883465580d7fbfc6a953c0615ee554b2f46846bec498b364cfac8116098aabda",
        "address": "0x8e4A75CCc2436d01fBc122cBaEc2CC44fdcd5898",
        "topics": [
          "0x22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd20961299",
          "0x000000000000000000000000104e989923417d765215b48e03baa4af222f3f6d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0000609900002e03d74650d9ea3006d8a1e87bfa0172c4bb9a389b9c3a914ff7"
      }
    ],
    "blockNumber": 24567751,
    "cumulativeGasUsed": "6097989",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "375e86b3637eef5ead3cbfea4a63b574",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxId\",\"type\":\"uint256\"}],\"name\":\"batchGetBattleCardStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.BattleCardStats[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxId\",\"type\":\"uint256\"}],\"name\":\"batchGetSupportCardStats\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.SupportCardStats[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleCardStats\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16[14]\",\"name\":\"arr\",\"type\":\"int16[14]\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.BattleCardStats\",\"name\":\"_stats\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createBattleCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.SupportCardStats\",\"name\":\"_stats\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createSupportCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"deconvert\",\"outputs\":[{\"internalType\":\"int16[14]\",\"name\":\"\",\"type\":\"int16[14]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"elementDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"endMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.BattleCardStats\",\"name\":\"x\",\"type\":\"tuple\"}],\"name\":\"setBattleCardStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"}],\"name\":\"setElementDecode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.SupportCardStats\",\"name\":\"x\",\"type\":\"tuple\"}],\"name\":\"setSupportCardStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"weakness\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"resistance\",\"type\":\"uint16\"}],\"internalType\":\"struct PepemonStats.elementWR\",\"name\":\"x\",\"type\":\"tuple\"}],\"name\":\"setWeakResist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportCardStats\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"weakResist\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"weakness\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"resistance\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_id\":\"ID of the Token\",\"_owner\":\"The address of the token holder\"},\"returns\":{\"_0\":\"The _owner's balance of the Token type requested\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"_ids\":\"ID of the Tokens\",\"_owners\":\"The addresses of the token holders\"},\"returns\":{\"_0\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"}},\"endMinting(uint256)\":{\"details\":\"Ends minting of token\",\"params\":{\"_id\":\"Token ID for which minting will end\"}},\"getLastTokenID()\":{\"details\":\"returns the last minted token ID based on value of _currentTokenID\"},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"Address of authorized operator\",\"_owner\":\"The owner of the Tokens\"},\"returns\":{\"isOperator\":\"True if the operator is approved, false if not\"}},\"maxSupply(uint256)\":{\"details\":\"Returns the max quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"_amounts\":\"Transfer amounts per token type\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source addresses\",\"_ids\":\"IDs of each token type\",\"_to\":\"Target addresses\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"_amount\":\"Transfered amount\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source address\",\"_id\":\"ID of the token type\",\"_to\":\"Target address\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Pepemon Factory PEPEMON - gotta farm em all\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdrop(uint256,address[])\":{\"notice\":\"Mint NFT and send those to the list of given addresses\"},\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Send multiple types of Tokens from the _from address to the _to address (with safety call)\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers amount amount of an _id from the _from address to the _to address specified\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonFactory.sol\":\"PepemonFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PepemonFactory.sol\":{\"content\":\"import \\\"./cardlib/ERC1155Tradable.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Pepemon Factory\\r\\n * PEPEMON - gotta farm em all\\r\\n */\\r\\ncontract PepemonFactory is ERC1155Tradable {\\r\\n    string private _contractURI;\\r\\n\\r\\n    constructor() ERC1155Tradable(\\\"PepemonBattleFactory\\\", \\\"PEPEBATTLE\\\") {\\r\\n        _setBaseMetadataURI(\\\"https://pepemon.finance/api/cards/\\\");\\r\\n        _contractURI = \\\"https://pepemon.finance/api/pepemon-erc1155\\\";\\r\\n    }\\r\\n\\r\\n    function setBaseMetadataURI(string memory newURI) public onlyWhitelistAdmin {\\r\\n        _setBaseMetadataURI(newURI);\\r\\n    }\\r\\n\\r\\n    function setContractURI(string memory newURI) public onlyWhitelistAdmin {\\r\\n        _contractURI = newURI;\\r\\n    }\\r\\n\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return _contractURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ends minting of token\\r\\n     * @param _id          Token ID for which minting will end\\r\\n     */\\r\\n    function endMinting(uint256 _id) external onlyWhitelistAdmin {\\r\\n        tokenMaxSupply[_id] = tokenSupply[_id];\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address _account,\\r\\n        uint256 _id,\\r\\n        uint256 _amount\\r\\n    ) public onlyMinter {\\r\\n        require(balanceOf(_account, _id) >= _amount, \\\"Cannot burn more than addres has\\\");\\r\\n        _burn(_account, _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mint NFT and send those to the list of given addresses\\r\\n     */\\r\\n    function airdrop(uint256 _id, address[] memory _addresses) public onlyMinter {\\r\\n        require(tokenMaxSupply[_id] - tokenSupply[_id] >= _addresses.length, \\\"Cant mint above max supply\\\");\\r\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\r\\n            mint(_addresses[i], _id, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchMint(\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        address to\\r\\n    ) external onlyMinter {\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            mintPepe(to, i, 1, hex\\\"\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10c63d8764764f2ba1d05a520c72d67a8d70ade051be583d61256d3ae3e871c8\"},\"contracts/cardlib/Address.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb86b4b763bec09cc18c79bc39807117ed320b9db224de0fec51bd2d76362867e\"},\"contracts/cardlib/Base64.sol\":{\"content\":\"\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return '';\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {let i := 0} lt(i, len) {} {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x44ce96b49ee36e2ae0c68a95d09dca777b3d3506f1f85a144f3e7ffff06bcd27\"},\"contracts/cardlib/Context.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfe178646388a812e18613781a73fbb9610b5402622624ba695920209c40be45e\"},\"contracts/cardlib/ERC1155.sol\":{\"content\":\"import \\\"./IERC1155Receiver.sol\\\";\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of Multi-Token Standard contract\\r\\n */\\r\\ncontract ERC1155 is IERC1155 {\\r\\n    using Address for address;\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |        Variables and Events       |\\r\\n    |__________________________________*/\\r\\n\\r\\n    // onReceive function signatures\\r\\n    bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\r\\n    bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n    // Objects balances\\r\\n    mapping (address => mapping(uint256 => uint256)) internal balances;\\r\\n\\r\\n    // Operator Functions\\r\\n    mapping (address => mapping(address => bool)) internal operators;\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |     Public Transfer Functions     |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n     * @param _from    Source address\\r\\n     * @param _to      Target address\\r\\n     * @param _id      ID of the token type\\r\\n     * @param _amount  Transfered amount\\r\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    public override\\r\\n    {\\r\\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n        require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\\r\\n\\r\\n        _safeTransferFrom(_from, _to, _id, _amount);\\r\\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n     * @param _from     Source addresses\\r\\n     * @param _to       Target addresses\\r\\n     * @param _ids      IDs of each token type\\r\\n     * @param _amounts  Transfer amounts per token type\\r\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\r\\n     */\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    public override\\r\\n    {\\r\\n        // Requirements\\r\\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\r\\n        require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\r\\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |    Internal Transfer Functions    |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n     * @param _from    Source address\\r\\n     * @param _to      Target address\\r\\n     * @param _id      ID of the token type\\r\\n     * @param _amount  Transfered amount\\r\\n     */\\r\\n    function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\r\\n    internal \\r\\n    {\\r\\n        // Update balances\\r\\n        balances[_from][_id] = balances[_from][_id]-_amount; // Subtract amount\\r\\n        balances[_to][_id] = balances[_to][_id]+_amount;     // Add amount\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\r\\n     */\\r\\n    function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal \\r\\n    {\\r\\n        // Check if recipient is contract\\r\\n        if (_to.isContract()) {\\r\\n            bytes4 retval = IERC1155Receiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\\r\\n            require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n     * @param _from     Source addresses\\r\\n     * @param _to       Target addresses\\r\\n     * @param _ids      IDs of each token type\\r\\n     * @param _amounts  Transfer amounts per token type\\r\\n     */\\r\\n    function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n    {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of transfer to execute\\r\\n        uint256 nTransfer = _ids.length;\\r\\n\\r\\n        // Executing all transfers\\r\\n        for (uint256 i = 0; i < nTransfer; i++) {\\r\\n            // Update storage balance of previous bin\\r\\n            balances[_from][_ids[i]] = balances[_from][_ids[i]]-_amounts[i];\\r\\n            balances[_to][_ids[i]] = balances[_to][_ids[i]]+_amounts[i];\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\r\\n     */\\r\\n    function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n    {\\r\\n        // Pass data if recipient is contract\\r\\n        if (_to.isContract()) {\\r\\n            bytes4 retval = IERC1155Receiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\\r\\n            require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |         Operator Functions        |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\r\\n     * @param _operator  Address to add to the set of authorized operators\\r\\n     * @param _approved  True if the operator is approved, false to revoke approval\\r\\n     */\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n    external override\\r\\n    {\\r\\n        // Update operator status\\r\\n        operators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Queries the approval status of an operator for a given owner\\r\\n     * @param _owner     The owner of the Tokens\\r\\n     * @param _operator  Address of authorized operator\\r\\n     * @return isOperator True if the operator is approved, false if not\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n    public view virtual override returns (bool isOperator)\\r\\n    {\\r\\n        return operators[_owner][_operator];\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |         Balance Functions         |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balance of an account's Tokens\\r\\n     * @param _owner  The address of the token holder\\r\\n     * @param _id     ID of the Token\\r\\n     * @return The _owner's balance of the Token type requested\\r\\n     */\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n    public view override returns (uint256)\\r\\n    {\\r\\n        return balances[_owner][_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balance of multiple account/token pairs\\r\\n     * @param _owners The addresses of the token holders\\r\\n     * @param _ids    ID of the Tokens\\r\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n     */\\r\\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\r\\n    public view override returns (uint256[] memory)\\r\\n    {\\r\\n        require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\r\\n\\r\\n        // Variables\\r\\n        uint256[] memory batchBalances = new uint256[](_owners.length);\\r\\n\\r\\n        // Iterate over each owner and token ID\\r\\n        for (uint256 i = 0; i < _owners.length; i++) {\\r\\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |          ERC165 Functions         |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n     */\\r\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * INTERFACE_SIGNATURE_ERC1155 =\\r\\n     * bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\r\\n     * bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\r\\n     */\\r\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\r\\n\\r\\n    /**\\r\\n     * @notice Query if a contract implements an interface\\r\\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\\r\\n     * @return `true` if the contract implements `_interfaceID` and\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceID) external pure override returns (bool) {\\r\\n        if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\r\\n            _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x937bcc19e1f51cfbdfd1ee532f71bd2fae603a262f16ca33756a08c261dfbf61\"},\"contracts/cardlib/ERC1155Metadata.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Contract that handles metadata related methods.\\r\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\r\\n *      Methods also assume that URI uses hex representation of token IDs.\\r\\n */\\r\\ncontract ERC1155Metadata {\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |    Utility Internal Functions     |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Convert uint256 to string\\r\\n     * @param _i Unsigned integer to convert to string\\r\\n     */\\r\\n    function _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x5249059ccd7bb0dc7bfb98142957ff8634ae58a1c4fadff8a5f734ffc45f5fd4\"},\"contracts/cardlib/ERC1155MintBurn.sol\":{\"content\":\"import \\\"./ERC1155.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\r\\n *      a parent contract to be executed as they are `internal` functions\\r\\n */\\r\\ncontract ERC1155MintBurn is ERC1155 {\\r\\n\\r\\n\\r\\n    /****************************************|\\r\\n    |            Minting Functions           |\\r\\n    |_______________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Mint _amount of tokens of a given id\\r\\n     * @param _to      The address to mint tokens to\\r\\n     * @param _id      Token id to mint\\r\\n     * @param _amount  The amount to be minted\\r\\n     * @param _data    Data to pass if receiver is contract\\r\\n     */\\r\\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n    {\\r\\n        // Add _amount\\r\\n        balances[_to][_id] = balances[_to][_id]+_amount;\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\r\\n\\r\\n        // Calling onReceive method if recipient is contract\\r\\n        _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint tokens for each ids in _ids\\r\\n     * @param _to       The address to mint tokens to\\r\\n     * @param _ids      Array of ids to mint\\r\\n     * @param _amounts  Array of amount of tokens to mint per id\\r\\n     * @param _data    Data to pass if receiver is contract\\r\\n     */\\r\\n    function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n    {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of mints to execute\\r\\n        uint256 nMint = _ids.length;\\r\\n\\r\\n        // Executing all minting\\r\\n        for (uint256 i = 0; i < nMint; i++) {\\r\\n            // Update storage balance\\r\\n            balances[_to][_ids[i]] = balances[_to][_ids[i]]+(_amounts[i]);\\r\\n        }\\r\\n\\r\\n        // Emit batch mint event\\r\\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\r\\n\\r\\n        // Calling onReceive method if recipient is contract\\r\\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /****************************************|\\r\\n    |            Burning Functions           |\\r\\n    |_______________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Burn _amount of tokens of a given token id\\r\\n     * @param _from    The address to burn tokens from\\r\\n     * @param _id      Token id to burn\\r\\n     * @param _amount  The amount to be burned\\r\\n     */\\r\\n    function _burn(address _from, uint256 _id, uint256 _amount)\\r\\n    internal\\r\\n    {\\r\\n        //Substract _amount\\r\\n        balances[_from][_id] = balances[_from][_id]-(_amount);\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\r\\n     * @param _from     The address to burn tokens from\\r\\n     * @param _ids      Array of token ids to burn\\r\\n     * @param _amounts  Array of the amount to be burned\\r\\n     */\\r\\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n    {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of mints to execute\\r\\n        uint256 nBurn = _ids.length;\\r\\n\\r\\n        // Executing all minting\\r\\n        for (uint256 i = 0; i < nBurn; i++) {\\r\\n            // Update storage balance\\r\\n            balances[_from][_ids[i]] = balances[_from][_ids[i]]-(_amounts[i]);\\r\\n        }\\r\\n\\r\\n        // Emit batch mint event\\r\\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc64ed6c355053eec5af1c8f2230ddb10342bc6d0d61d4207f84d5e711bcb8cce\"},\"contracts/cardlib/ERC1155Tradable.sol\":{\"content\":\"import \\\"./ERC1155.sol\\\";\\r\\nimport \\\"./ERC1155MintBurn.sol\\\";\\r\\nimport \\\"./ERC1155Metadata.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./MinterRole.sol\\\";\\r\\nimport \\\"./WhitelistAdminRole.sol\\\";\\r\\nimport \\\"./PepemonStats.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title ERC1155Tradable\\r\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address,\\r\\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\\r\\n  like _exists(), name(), symbol(), and totalSupply()\\r\\n */\\r\\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable, MinterRole, WhitelistAdminRole, PepemonStats {\\r\\n\\r\\n    uint256 private _currentTokenID = 0;\\r\\n    mapping(uint256 => address) public creators;\\r\\n    mapping(uint256 => uint256) public tokenSupply;\\r\\n    mapping(uint256 => uint256) public tokenMaxSupply;\\r\\n    // Contract name\\r\\n    string public name;\\r\\n    // Contract symbol\\r\\n    string public symbol;\\r\\n    string public baseMetadataURI;\\r\\n    \\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    )  {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n    function _setBaseMetadataURI(string memory x) internal{\\r\\n        baseMetadataURI = x;\\r\\n    }\\r\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\r\\n        _removeWhitelistAdmin(account);\\r\\n    }\\r\\n    \\r\\n    function removeMinter(address account) public onlyOwner {\\r\\n        _removeMinter(account);\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view returns (string memory) {\\r\\n        require(_exists(_id), \\\"ERC1155Tradable#uri: NONEXISTENT_TOKEN\\\");\\r\\n        return _getUri(_id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total quantity for a token ID\\r\\n     * @param _id uint256 ID of the token to query\\r\\n     * @return amount of token in existence\\r\\n     */\\r\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\r\\n        return tokenSupply[_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the max quantity for a token ID\\r\\n     * @param _id uint256 ID of the token to query\\r\\n     * @return amount of token in existence\\r\\n     */\\r\\n    function maxSupply(uint256 _id) public view returns (uint256) {\\r\\n        return tokenMaxSupply[_id];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new token type and assigns _initialSupply to an address\\r\\n     * @param _maxSupply max supply allowed\\r\\n     * @param _initialSupply Optional amount to supply the first owner\\r\\n     * @param _uri Optional URI for this token type\\r\\n     * @param _data Optional data to pass if receiver is contract\\r\\n     * @return tokenId The newly created token ID\\r\\n     */\\r\\n    function create(\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _initialSupply,\\r\\n        string memory _uri,\\r\\n        bytes memory _data\\r\\n        \\r\\n    ) internal  returns (uint256 tokenId) {\\r\\n        require(_initialSupply <= _maxSupply, \\\"Initial supply cannot be more than max supply\\\");\\r\\n        uint256 _id = _getNextTokenID();\\r\\n        _currentTokenID++;\\r\\n        creators[_id] = msg.sender;\\r\\n\\r\\n        if (bytes(_uri).length > 0) {\\r\\n            emit URI(_uri, _id);\\r\\n        }\\r\\n\\r\\n        if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\\r\\n        tokenSupply[_id] = _initialSupply;\\r\\n        tokenMaxSupply[_id] = _maxSupply;\\r\\n        return _id;\\r\\n    }\\r\\n    function createBattleCard(BattleCardStats calldata _stats,\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _initialSupply,\\r\\n        string calldata _uri,\\r\\n        bytes calldata _data\\r\\n    ) external onlyWhitelistAdmin returns(uint256 tokenId){\\r\\n        uint _id = create(_maxSupply, _initialSupply, _uri, _data);\\r\\n        setBattleCardStats(_id, _stats);\\r\\n        return _id;\\r\\n    }\\r\\n    \\r\\n    function createSupportCard(SupportCardStats calldata _stats,\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _initialSupply,\\r\\n        string calldata _uri,\\r\\n        bytes calldata _data\\r\\n    ) external onlyWhitelistAdmin returns(uint256 tokenId){\\r\\n        uint _id = create(_maxSupply, _initialSupply, _uri, _data);\\r\\n        setSupportCardStats(_id, _stats);\\r\\n        return _id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints some amount of tokens to an address\\r\\n     * @param _to          Address of the future owner of the token\\r\\n     * @param _id          Token ID to mint\\r\\n     * @param _quantity    Amount of tokens to mint\\r\\n     * @param _data        Data to pass if receiver is contract\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _quantity,\\r\\n        bytes memory _data\\r\\n    ) public onlyMinter {\\r\\n        mintPepe(_to, _id, _quantity, _data);\\r\\n    }\\r\\n    function mintPepe(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _quantity,\\r\\n        bytes memory _data\\r\\n    ) internal{\\r\\n        uint256 tokenId = _id;\\r\\n        uint256 newSupply = tokenSupply[tokenId]+_quantity;\\r\\n        require(newSupply <= tokenMaxSupply[tokenId], \\\"Max supply reached\\\");\\r\\n        _mint(_to, _id, _quantity, _data);\\r\\n        tokenSupply[_id] = tokenSupply[_id]+_quantity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\r\\n     * @param _id uint256 ID of the token to query the existence of\\r\\n     * @return bool whether the token exists\\r\\n     */\\r\\n    function _exists(uint256 _id) internal view returns (bool) {\\r\\n        return creators[_id] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculates the next token ID based on value of _currentTokenID\\r\\n     * @return uint256 for the next token ID\\r\\n     */\\r\\n    function _getNextTokenID() private view returns (uint256) {\\r\\n        return _currentTokenID+1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns the last minted token ID based on value of _currentTokenID\\r\\n     */\\r\\n    function getLastTokenID() public view returns (uint256) {\\r\\n        return _currentTokenID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe31decb64834b146917bd7eb4d5e8c9d668aae28935eba64788f60c4a423dde6\"},\"contracts/cardlib/IERC1155.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155.sol\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] values\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x51f14d303a1fd7f47c5843ae2c300d253296220747c1f283db5a1bfa86bce0dc\"},\"contracts/cardlib/IERC1155Receiver.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155Receiver.sol\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155Receiver is IERC165 {\\r\\n    /**\\r\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        To accept the transfer, this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n        (i.e. 0xf23a6e61, or its own function selector).\\r\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param id The ID of the token being transferred\\r\\n        @param value The amount of tokens being transferred\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n        been updated. To accept the transfer(s), this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n        (i.e. 0xbc197c81, or its own function selector).\\r\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\",\"keccak256\":\"0x0d64df7132c022ebcba0e5dc89eb2dbec36f36119626ac5ce381980bb13e4334\"},\"contracts/cardlib/IERC165.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x98694ef0a124681e55a883529ac49ad682d20eb8eb0bf7b68dbb626b348c0ce9\"},\"contracts/cardlib/MinterRole.sol\":{\"content\":\"import \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract MinterRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _minters;\\r\\n\\r\\n    constructor () {\\r\\n        _addMinter(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter(_msgSender()), \\\"MinterRole: caller does not have the Minter role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return _minters.has(account);\\r\\n    }\\r\\n\\r\\n    function addMinter(address account) public onlyMinter {\\r\\n        require (account != address(this));\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    function renounceMinter() public {\\r\\n        _removeMinter(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addMinter(address account) internal {\\r\\n        _minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeMinter(address account) internal {\\r\\n        _minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe3fd624d28b4a4db619bf135f6fba71562b0114b457f04397bbde0f5959225f4\"},\"contracts/cardlib/Ownable.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ca2884674eee0f81a209fb3b5de937fe8efc1ddf5ba11e8db7cfa89dbb316e3\"},\"contracts/cardlib/PepemonStats.sol\":{\"content\":\"import \\\"./WhitelistAdminRole.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ncontract PepemonStats is WhitelistAdminRole{\\r\\n    \\r\\n    struct BattleCardStats {\\r\\n        uint16 element;\\r\\n        uint16 hp;\\r\\n        uint16 speed;\\r\\n        uint16 intelligence;\\r\\n        uint16 defense;\\r\\n        uint16 attack;\\r\\n        uint16 specialAttack;\\r\\n        uint16 specialDefense;\\r\\n        uint16 level;\\r\\n        string name;\\r\\n        string description;\\r\\n        string ipfsAddr;\\r\\n        string rarity;\\r\\n    }\\r\\n\\r\\n    struct SupportCardStats {\\r\\n        bytes32 currentRoundChanges;\\r\\n        bytes32 nextRoundChanges;\\r\\n        uint256 specialCode;\\r\\n        uint16 modifierNumberOfNextTurns;\\r\\n        bool isOffense;\\r\\n        bool isNormal;\\r\\n        bool isStackable;\\r\\n        string name;\\r\\n        string description;\\r\\n        string ipfsAddr;\\r\\n        string rarity;\\r\\n    }\\r\\n    \\r\\n    struct elementWR{\\r\\n        uint16 weakness;\\r\\n        uint16 resistance;\\r\\n    }\\r\\n\\r\\n    mapping(uint => BattleCardStats) public battleCardStats;\\r\\n    mapping(uint => SupportCardStats) public supportCardStats;\\r\\n    mapping (uint16 => string) public elementDecode;\\r\\n    mapping (uint16 => elementWR) public weakResist;\\r\\n    \\r\\n    constructor(){\\r\\n        elementDecode[1]=\\\"Fire\\\";\\r\\n        elementDecode[2]=\\\"Grass\\\";\\r\\n        elementDecode[3]=\\\"Water\\\";\\r\\n        elementDecode[4]=\\\"Lighting\\\";\\r\\n        elementDecode[5]=\\\"Wind\\\";\\r\\n        elementDecode[6]=\\\"Poison\\\";\\r\\n        elementDecode[7]=\\\"Ghost\\\";\\r\\n        elementDecode[8]=\\\"Fairy\\\";\\r\\n        elementDecode[9]=\\\"Earth\\\";\\r\\n        elementDecode[10]=\\\"Unknown\\\";\\r\\n        weakResist[1] = elementWR(3,2);\\r\\n        weakResist[2] = elementWR(1,3);\\r\\n        weakResist[3] = elementWR(4,1);\\r\\n        weakResist[4] = elementWR(9,5);\\r\\n        weakResist[5] = elementWR(6,9);\\r\\n        weakResist[6] = elementWR(8,2);\\r\\n        weakResist[7] = elementWR(8,6);\\r\\n        weakResist[8] = elementWR(7,8);\\r\\n        weakResist[9] = elementWR(2,7);\\r\\n        weakResist[10] = elementWR(0,0);\\r\\n    }\\r\\n    \\r\\n    function setBattleCardStats(uint id, BattleCardStats calldata x) public onlyWhitelistAdmin{\\r\\n        battleCardStats[id] = x;\\r\\n    }\\r\\n    function setSupportCardStats(uint id, SupportCardStats calldata x) public onlyWhitelistAdmin{\\r\\n        supportCardStats[id] = x;\\r\\n    }\\r\\n    function setWeakResist(uint16 element, elementWR calldata x) public onlyWhitelistAdmin{\\r\\n        weakResist[element] = x;\\r\\n    }\\r\\n    function setElementDecode(uint16 element, string calldata x) public onlyWhitelistAdmin{\\r\\n        elementDecode[element] = x;\\r\\n    }\\r\\n\\r\\n    function batchGetBattleCardStats(uint minId, uint maxId) public view returns (BattleCardStats[] memory) {\\r\\n        require(minId <= maxId);\\r\\n        BattleCardStats[] memory results = new BattleCardStats[](maxId - minId + 1);\\r\\n\\r\\n        for (uint256 i = minId; i <= maxId; i++) {\\r\\n            results[i - minId] = battleCardStats[i];\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    function batchGetSupportCardStats(uint minId, uint maxId) public view returns (SupportCardStats[] memory) {\\r\\n        require(minId <= maxId);\\r\\n        SupportCardStats[] memory results = new SupportCardStats[](maxId - minId + 1);\\r\\n\\r\\n        for (uint256 i = minId; i <= maxId; i++) {\\r\\n            results[i - minId] = supportCardStats[i];\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    //Pos 0-7 = hp, spd, int, def, atk, sp atk, sp def\\r\\n    //Pos 8-13 = same but for opponent\\r\\n    function deconvert(bytes32 num) public pure returns(int16[14] memory){\\r\\n        int16[14] memory arr;\\r\\n        for (uint i =0 ; i < 14; i++){\\r\\n            arr[i] = int16(uint16(bytes2(num << 240))); \\r\\n            num = num >> 16;\\r\\n        } \\r\\n        return arr;\\r\\n    }\\r\\n    function uint2str(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    function convert(int16[14] calldata arr) public pure returns (bytes32){\\r\\n        bytes32 num;\\r\\n        for (uint i = 0 ; i < 14; i++ ){\\r\\n            num |= (bytes32(uint256(uint16(arr[i])))<<(16*i));\\r\\n        }\\r\\n        return num;\\r\\n    }\\r\\n    \\r\\n    //spaghetti code ahead :(\\r\\n        \\r\\n    function getSupportType(SupportCardStats memory s) internal pure returns(string memory){\\r\\n        string memory  x =\\\"Defense \\\";\\r\\n        string memory  y=\\\"(Special)\\\";\\r\\n        if (s.isOffense){\\r\\n            x = \\\"Offense \\\";\\r\\n        }\\r\\n        if (s.isNormal){\\r\\n            y = \\\"(Normal)\\\";\\r\\n        }\\r\\n        return string(abi.encodePacked(x, y));\\r\\n    }\\r\\n    function _URIForSupport(uint id) internal view returns (bytes memory){\\r\\n        SupportCardStats memory s = supportCardStats[id];\\r\\n        return abi.encodePacked(\\r\\n        \\\"{\\\\\\\"pool\\\\\\\": {\\\\\\\"name\\\\\\\": \\\\\\\"root\\\\\\\",\\\\\\\"points\\\\\\\": 1},\\\\\\\"external_url\\\\\\\": \\\\\\\"https://pepemon.world/\\\\\\\",\\\\\\\"image\\\\\\\": \\\\\\\"\\\", \\r\\n        s.ipfsAddr, \\r\\n        \\\"\\\\\\\",\\\\\\\"name\\\\\\\": \\\\\\\"\\\",\\r\\n        s.name, \\r\\n        \\\"\\\\\\\",\\\\\\\"description\\\\\\\": \\\\\\\"\\\",\\r\\n        s.description,\\r\\n        \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\": [{\\\\\\\"trait_type\\\\\\\": \\\\\\\"Set\\\\\\\",\\\\\\\"value\\\\\\\": \\\\\\\"Pepemon Support\\\\\\\"},{\\\\\\\"trait_type\\\\\\\": \\\\\\\"Rarity\\\\\\\",\\\\\\\"value\\\\\\\": \\\\\\\"\\\",\\r\\n        s.rarity, \\r\\n        \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\": \\\\\\\"Type\\\\\\\",\\\\\\\"value\\\\\\\": \\\\\\\"\\\", \\r\\n        getSupportType(s), \\r\\n        \\\"\\\\\\\"}]}\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function _URIForBattle(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        uint16 e = b.element;\\r\\n        return abi.encodePacked(\\\"{\\\\\\\"pool\\\\\\\": {\\\\\\\"name\\\\\\\": \\\\\\\"root\\\\\\\",\\\\\\\"points\\\\\\\": 1},\\\\\\\"external_url\\\\\\\": \\\\\\\"https://pepemon.world/\\\\\\\",\\\\\\\"image\\\\\\\": \\\\\\\"\\\",\\r\\n        b.ipfsAddr, \\r\\n        \\\"\\\\\\\",\\\\\\\"name\\\\\\\": \\\\\\\"\\\", \\r\\n        b.name, \\r\\n        \\\"\\\\\\\",\\\\\\\"description\\\\\\\": \\\\\\\"\\\", \\r\\n        b.description, \\r\\n        \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\":[{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Set\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"Pepemon Battle\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Level\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n        uint2str(b.level),\\r\\n        \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Element\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", \\r\\n        elementDecode[e], \\r\\n         \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Weakness\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\");\\r\\n    }\\r\\n    function _URIForBattle3(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        uint16 e = b.element;\\r\\n        return abi.encodePacked(\\r\\n            elementDecode[weakResist[e].weakness], \\r\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Resistance\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\r\\n            elementDecode[weakResist[e].resistance], \\r\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"HP\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n            uint2str(b.hp));\\r\\n    }\\r\\n    function _URIForBattle2(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        return abi.encodePacked(\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Speed\\\\\\\",\\\\\\\"value\\\\\\\":\\\"\\r\\n        , uint2str(b.speed)\\r\\n        , \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Intelligence\\\\\\\",\\\\\\\"value\\\\\\\":\\\"\\r\\n        , uint2str(b.intelligence)\\r\\n        , \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Defense\\\\\\\",\\\\\\\"value\\\\\\\":\\\"\\r\\n        , uint2str(b.defense));\\r\\n    }\\r\\n    function _URIForBattle4(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        return abi.encodePacked(\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Attack\\\\\\\",\\\\\\\"value\\\\\\\":\\\",\\r\\n        uint2str(b.attack),\\r\\n        \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Special Attack\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n        uint2str(b.specialAttack), \\r\\n        \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Special Defense\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n        uint2str(b.specialDefense), \\r\\n        \\\"}]}\\\");\\r\\n    }\\r\\n    \\r\\n    function _getUri2(uint id) internal view returns(bytes memory){\\r\\n        if (battleCardStats[id].hp==0){\\r\\n            return _URIForSupport(id);\\r\\n        }else{\\r\\n            return abi.encodePacked(_URIForBattle(id), _URIForBattle3(id), _URIForBattle2(id), _URIForBattle4(id));\\r\\n        }\\r\\n    }\\r\\n    function _getUri(uint id) internal view returns (string memory){\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64\\\\r\\\\n\\\\r\\\\n\\\", Base64.encode(_getUri2(id))));\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0xfb8376b7d87f9ba2ce2827d42effa6a77d0773d56c717ac5703b6b7d1fc12c97\"},\"contracts/cardlib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        \\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0644d69c93496f0fbd10568e0cb2df513498c13054ad58a6edfc3cb895347003\",\"license\":\"MIT\"},\"contracts/cardlib/WhitelistAdminRole.sol\":{\"content\":\"import \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title WhitelistAdminRole\\r\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\r\\n */\\r\\ncontract WhitelistAdminRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event WhitelistAdminAdded(address indexed account);\\r\\n    event WhitelistAdminRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _whitelistAdmins;\\r\\n\\r\\n    constructor ()  {\\r\\n        _addWhitelistAdmin(_msgSender());\\r\\n        _addWhitelistAdmin(address(0x104E989923417D765215B48e03baa4aF222f3F6D));\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelistAdmin() {\\r\\n        require(isWhitelistAdmin(_msgSender()), \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\r\\n        return _whitelistAdmins.has(account);\\r\\n    }\\r\\n\\r\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\r\\n        require (account != address(this));\\r\\n        _addWhitelistAdmin(account);\\r\\n    }\\r\\n\\r\\n    function renounceWhitelistAdmin() public {\\r\\n        _removeWhitelistAdmin(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addWhitelistAdmin(address account) internal {\\r\\n        _whitelistAdmins.add(account);\\r\\n        emit WhitelistAdminAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeWhitelistAdmin(address account) internal {\\r\\n        _whitelistAdmins.remove(account);\\r\\n        emit WhitelistAdminRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8a1e35b8175eb5d5c923b192fad2fe5b05bed1fb3c1a286b38eecadfc8fb59e5\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d45760003560e01c80637ad67d6011610182578063a22cb465116100e9578063cd53d08e116100a2578063eaaaada31161007c578063eaaaada314610734578063f242432a14610747578063f2fde38b1461075a578063f5298aca1461076d57600080fd5b8063cd53d08e146106f0578063e8a3d48514610719578063e985e9c51461072157600080fd5b8063a22cb46514610671578063aa271e1a14610684578063bb5f747b14610697578063bbe79cb5146106aa578063bd85b039146106bd578063bdf7a8e6146106dd57600080fd5b8063938e3d7b1161013b578063938e3d7b1461061557806394dd28691461062857806395d89b411461063b578063983b2d56146106435780639865027514610656578063a11bf9211461065e57600080fd5b80637ad67d601461056b5780637e518ec81461057e5780637ed7f93b146105915780637faef6fd146105bd578063869f7594146105d05780638da5cb5b146105f057600080fd5b80633debfaca116102415780635b2bd79e116101fa5780636d6055cd116101d45780636d6055cd146104f4578063715018a61461053d578063731133e9146105455780637362d9c81461055857600080fd5b80635b2bd79e146104c65780636897e974146104ce5780636cc43e05146104e157600080fd5b80633debfaca1461043b5780633df392421461044e5780633ef009ef146104615780634c5a628c146104745780634e1273f41461047c5780634e84f9bb1461049c57600080fd5b80631390053c116102935780631390053c1461039357806315da5784146103b357806326586849146103d35780632693ebf2146103f35780632eb2c2d6146104135780633092afd51461042857600080fd5b80624221f0146102d9578062fdd58e1461030c57806301ffc9a71461034057806306fdde03146103635780630e094137146103785780630e89341c14610380575b600080fd5b6102f96102e7366004614806565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b6102f961031a3660046146bb565b6001600160a01b0391909116600090815260208181526040808320938352929052205490565b61035361034e36600461481f565b610780565b6040519015158152602001610303565b61036b6107c6565b60405161030391906156e8565b6009546102f9565b61036b61038e366004614806565b610854565b6103a66103a1366004614806565b6108de565b604051610303919061538b565b6103c66103c1366004614b0f565b610940565b60405161030391906153c0565b6103e66103e1366004614b0f565b610d4e565b60405161030391906154f9565b6102f9610401366004614806565b600b6020526000908152604090205481565b610426610421366004614577565b611122565b005b610426610436366004614529565b611231565b6102f961044936600461496b565b611267565b6102f961045c3660046147db565b61131d565b61042661046f366004614b31565b611379565b6104266113db565b61048f61048a366004614778565b6113e6565b6040516103039190615608565b6104af6104aa366004614806565b611538565b6040516103039b9a99989796959493929190615649565b61036b6117c1565b6104266104dc366004614529565b6117ce565b6104266104ef366004614a1a565b611801565b6105226105023660046149a9565b60086020526000908152604090205461ffff808216916201000090041682565b6040805161ffff938416815292909116602083015201610303565b610426611845565b610426610553366004614718565b611879565b610426610566366004614529565b6118aa565b6104266105793660046149c6565b6118ee565b61042661058c36600461487c565b611931565b6105a461059f366004614806565b61195f565b6040516103039d9c9b9a999897969594939291906157de565b6104266105cb366004614ad3565b611c06565b6102f96105de366004614806565b6000908152600c602052604090205490565b6002546001600160a01b03165b6040516001600160a01b039091168152602001610303565b61042661062336600461487c565b611c45565b610426610636366004614806565b611c81565b61036b611cc3565b610426610651366004614529565b611cd0565b610426611d14565b61042661066c366004614a97565b611d1d565b61042661067f366004614684565b611d5c565b610353610692366004614529565b611dc8565b6103536106a5366004614529565b611dd5565b6102f96106b83660046148c4565b611de2565b6102f96106cb366004614806565b6000908152600b602052604090205490565b6104266106eb366004614a5b565b611e8c565b6105fd6106fe366004614806565b600a602052600090815260409020546001600160a01b031681565b61036b611f7e565b61035361072f366004614544565b612010565b61036b6107423660046149a9565b61203e565b610426610755366004614620565b612057565b610426610768366004614529565b612155565b61042661077b3660046146e5565b6121ed565b60006001600160e01b031982166301ffc9a760e01b14806107b157506001600160e01b03198216636cdb3d1360e11b145b156107be57506001919050565b506000919050565b600d80546107d390615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546107ff90615acd565b801561084c5780601f106108215761010080835404028352916020019161084c565b820191906000526020600020905b81548152906001019060200180831161082f57829003601f168201915b505050505081565b6000818152600a60205260409020546060906001600160a01b03166108cf5760405162461bcd60e51b815260206004820152602660248201527f455243313135355472616461626c65237572693a204e4f4e4558495354454e546044820152652faa27a5a2a760d11b60648201526084015b60405180910390fd5b6108d88261230a565b92915050565b6108e661421b565b6108ee61421b565b60005b600e8110156109395761ffff84168282600e811061091157610911615b5d565b600192830b90920b6020909202015260109390931c928061093181615b02565b9150506108f1565b5092915050565b60608183111561094f57600080fd5b600061095b8484615985565b61096690600161593a565b6001600160401b0381111561097d5761097d615b73565b604051908082528060200260200182016040528015610a1657816020015b604080516101a0810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830191909152610120820181905261014082018190526101608201819052610180820152825260001990920191018161099b5790505b509050835b838111610d465760008181526005602090815260409182902082516101a081018452815461ffff8082168352620100008204811694830194909452600160201b8104841694820194909452600160301b840483166060820152600160401b840483166080820152600160501b8404831660a0820152600160601b8404831660c0820152600160701b8404831660e0820152600160801b90930490911661010083015260018101805461012084019190610ad390615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610aff90615acd565b8015610b4c5780601f10610b2157610100808354040283529160200191610b4c565b820191906000526020600020905b815481529060010190602001808311610b2f57829003601f168201915b50505050508152602001600282018054610b6590615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9190615acd565b8015610bde5780601f10610bb357610100808354040283529160200191610bde565b820191906000526020600020905b815481529060010190602001808311610bc157829003601f168201915b50505050508152602001600382018054610bf790615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2390615acd565b8015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b50505050508152602001600482018054610c8990615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb590615acd565b8015610d025780601f10610cd757610100808354040283529160200191610d02565b820191906000526020600020905b815481529060010190602001808311610ce557829003601f168201915b505050505081525050828683610d189190615985565b81518110610d2857610d28615b5d565b60200260200101819052508080610d3e90615b02565b915050610a1b565b509392505050565b606081831115610d5d57600080fd5b6000610d698484615985565b610d7490600161593a565b6001600160401b03811115610d8b57610d8b615b73565b604051908082528060200260200182016040528015610e1457816020015b60408051610160810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c083019190915260e08201819052610100820181905261012082018190526101408201528252600019909201910181610da95790505b509050835b838111610d465760008181526006602090815260409182902082516101608101845281548152600182015492810192909252600281015492820192909252600382015461ffff8116606083015260ff620100008204811615156080840152630100000082048116151560a0840152600160201b90910416151560c082015260048201805491929160e084019190610eaf90615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610edb90615acd565b8015610f285780601f10610efd57610100808354040283529160200191610f28565b820191906000526020600020905b815481529060010190602001808311610f0b57829003601f168201915b50505050508152602001600582018054610f4190615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6d90615acd565b8015610fba5780601f10610f8f57610100808354040283529160200191610fba565b820191906000526020600020905b815481529060010190602001808311610f9d57829003601f168201915b50505050508152602001600682018054610fd390615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610fff90615acd565b801561104c5780601f106110215761010080835404028352916020019161104c565b820191906000526020600020905b81548152906001019060200180831161102f57829003601f168201915b5050505050815260200160078201805461106590615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461109190615acd565b80156110de5780601f106110b3576101008083540402835291602001916110de565b820191906000526020600020905b8154815290600101906020018083116110c157829003601f168201915b5050505050815250508286836110f49190615985565b8151811061110457611104615b5d565b6020026020010181905250808061111a90615b02565b915050610e19565b336001600160a01b038616148061113e575061113e8533612010565b6111a25760405162461bcd60e51b815260206004820152602f60248201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960448201526e272b20a624a22fa7a822a920aa27a960891b60648201526084016108c6565b6001600160a01b0384166112115760405162461bcd60e51b815260206004820152603060248201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960448201526f13959053125117d49150d2541251539560821b60648201526084016108c6565b61121d85858585612343565b61122a85858585856125bb565b5050505050565b6002546001600160a01b0316331461125b5760405162461bcd60e51b81526004016108c69061574b565b611264816126e4565b50565b600061127233611dd5565b61128e5760405162461bcd60e51b81526004016108c690615780565b6000611305888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061272692505050565b9050611311818a611c06565b98975050505050505050565b60008060005b600e81101561093957611337816010615966565b8482600e811061134957611349615b5d565b60200201602081019061135c9190614859565b61ffff16901b91909117908061137181615b02565b915050611323565b61138233611dc8565b61139e5760405162461bcd60e51b81526004016108c6906156fb565b825b8281116113d5576113c38282600160405180602001604052806000815250612847565b806113cd81615b02565b9150506113a0565b50505050565b6113e4336128fa565b565b6060815183511461144e5760405162461bcd60e51b815260206004820152602c60248201527f455243313135352362616c616e63654f6642617463683a20494e56414c49445f60448201526b082a4a482b2be988a9c8ea8960a31b60648201526084016108c6565b600083516001600160401b0381111561146957611469615b73565b604051908082528060200260200182016040528015611492578160200160208202803683370190505b50905060005b8451811015610d46576000808683815181106114b6576114b6615b5d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008583815181106114f2576114f2615b5d565b602002602001015181526020019081526020016000205482828151811061151b5761151b615b5d565b60209081029190910101528061153081615b02565b915050611498565b6006602052600090815260409020805460018201546002830154600384015460048501805494959394929361ffff83169360ff62010000850481169463010000008104821694600160201b909104909116929161159490615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546115c090615acd565b801561160d5780601f106115e25761010080835404028352916020019161160d565b820191906000526020600020905b8154815290600101906020018083116115f057829003601f168201915b50505050509080600501805461162290615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461164e90615acd565b801561169b5780601f106116705761010080835404028352916020019161169b565b820191906000526020600020905b81548152906001019060200180831161167e57829003601f168201915b5050505050908060060180546116b090615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546116dc90615acd565b80156117295780601f106116fe57610100808354040283529160200191611729565b820191906000526020600020905b81548152906001019060200180831161170c57829003601f168201915b50505050509080600701805461173e90615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461176a90615acd565b80156117b75780601f1061178c576101008083540402835291602001916117b7565b820191906000526020600020905b81548152906001019060200180831161179a57829003601f168201915b505050505090508b565b600f80546107d390615acd565b6002546001600160a01b031633146117f85760405162461bcd60e51b81526004016108c69061574b565b611264816128fa565b61180a33611dd5565b6118265760405162461bcd60e51b81526004016108c690615780565b61ffff8216600090815260086020526040902081906113d58282615ed9565b6002546001600160a01b0316331461186f5760405162461bcd60e51b81526004016108c69061574b565b6113e4600061293c565b61188233611dc8565b61189e5760405162461bcd60e51b81526004016108c6906156fb565b6113d584848484612847565b6118b333611dd5565b6118cf5760405162461bcd60e51b81526004016108c690615780565b6001600160a01b0381163014156118e557600080fd5b6112648161298e565b6118f733611dd5565b6119135760405162461bcd60e51b81526004016108c690615780565b61ffff831660009081526007602052604090206113d590838361423a565b61193a33611dd5565b6119565760405162461bcd60e51b81526004016108c690615780565b611264816129d0565b6005602052600090815260409020805460018201805461ffff80841694620100008504821694600160201b8104831694600160301b8204841694600160401b8304851694600160501b8404811694600160601b8504821694600160701b8104831694600160801b909104909216929091906119d990615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0590615acd565b8015611a525780601f10611a2757610100808354040283529160200191611a52565b820191906000526020600020905b815481529060010190602001808311611a3557829003601f168201915b505050505090806002018054611a6790615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9390615acd565b8015611ae05780601f10611ab557610100808354040283529160200191611ae0565b820191906000526020600020905b815481529060010190602001808311611ac357829003601f168201915b505050505090806003018054611af590615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054611b2190615acd565b8015611b6e5780601f10611b4357610100808354040283529160200191611b6e565b820191906000526020600020905b815481529060010190602001808311611b5157829003601f168201915b505050505090806004018054611b8390615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054611baf90615acd565b8015611bfc5780601f10611bd157610100808354040283529160200191611bfc565b820191906000526020600020905b815481529060010190602001808311611bdf57829003601f168201915b505050505090508d565b611c0f33611dd5565b611c2b5760405162461bcd60e51b81526004016108c690615780565b600082815260066020526040902081906113d58282615db1565b611c4e33611dd5565b611c6a5760405162461bcd60e51b81526004016108c690615780565b8051611c7d9060109060208401906142be565b5050565b611c8a33611dd5565b611ca65760405162461bcd60e51b81526004016108c690615780565b6000908152600b6020908152604080832054600c90925290912055565b600e80546107d390615acd565b611cd933611dc8565b611cf55760405162461bcd60e51b81526004016108c6906156fb565b6001600160a01b038116301415611d0b57600080fd5b611264816129e3565b6113e4336126e4565b611d2633611dd5565b611d425760405162461bcd60e51b81526004016108c690615780565b600082815260056020526040902081906113d58282615ba3565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60006108d8600383612a25565b60006108d8600483612a25565b6000611ded33611dd5565b611e095760405162461bcd60e51b81526004016108c690615780565b6000611e80888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061272692505050565b9050611311818a611d1d565b611e9533611dc8565b611eb15760405162461bcd60e51b81526004016108c6906156fb565b80516000838152600b6020908152604080832054600c90925290912054611ed89190615985565b1015611f265760405162461bcd60e51b815260206004820152601a60248201527f43616e74206d696e742061626f7665206d617820737570706c7900000000000060448201526064016108c6565b60005b8151811015611f7957611f67828281518110611f4757611f47615b5d565b602002602001015184600160405180602001604052806000815250611879565b80611f7181615b02565b915050611f29565b505050565b606060108054611f8d90615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb990615acd565b80156120065780601f10611fdb57610100808354040283529160200191612006565b820191906000526020600020905b815481529060010190602001808311611fe957829003601f168201915b5050505050905090565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b600760205260009081526040902080546107d390615acd565b336001600160a01b038616148061207357506120738533612010565b6120d25760405162461bcd60e51b815260206004820152602a60248201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c49604482015269222fa7a822a920aa27a960b11b60648201526084016108c6565b6001600160a01b03841661213c5760405162461bcd60e51b815260206004820152602b60248201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960448201526a1117d49150d2541251539560aa1b60648201526084016108c6565b61214885858585612aa8565b61122a8585858585612b84565b6002546001600160a01b0316331461217f5760405162461bcd60e51b81526004016108c69061574b565b6001600160a01b0381166121e45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108c6565b6112648161293c565b6121f633611dc8565b6122125760405162461bcd60e51b81526004016108c6906156fb565b6001600160a01b0383166000908152602081815260408083208584529091529020548111156122835760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206275726e206d6f7265207468616e206164647265732068617360448201526064016108c6565b611f79838383612ca5565b6122988282612a25565b156122e55760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064016108c6565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b606061231d61231883612d36565b612d9b565b60405160200161232d91906152af565b6040516020818303038152906040529050919050565b80518251146123b25760405162461bcd60e51b815260206004820152603560248201527f45524331313535235f7361666542617463685472616e7366657246726f6d3a206044820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b60648201526084016108c6565b815160005b8181101561255c578281815181106123d1576123d1615b5d565b6020026020010151600080886001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061241157612411615b5d565b60200260200101518152602001908152602001600020546124329190615985565b600080886001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061246a5761246a615b5d565b602002602001015181526020019081526020016000208190555082818151811061249657612496615b5d565b6020026020010151600080876001600160a01b03166001600160a01b0316815260200190815260200160002060008684815181106124d6576124d6615b5d565b60200260200101518152602001908152602001600020546124f7919061593a565b600080876001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061252f5761252f615b5d565b6020026020010151815260200190815260200160002081905550808061255490615b02565b9150506123b7565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516125ac92919061561b565b60405180910390a45050505050565b6001600160a01b0384163b1561122a5760405163bc197c8160e01b81526000906001600160a01b0386169063bc197c81906126029033908a908990899089906004016152f4565b602060405180830381600087803b15801561261c57600080fd5b505af1158015612630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612654919061483c565b90506001600160e01b0319811663bc197c8160e01b146126dc5760405162461bcd60e51b815260206004820152603f60248201527f45524331313535235f63616c6c6f6e455243313135354261746368526563656960448201527f7665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147450060648201526084016108c6565b505050505050565b6126ef600382612f00565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60008484111561278e5760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c20737570706c792063616e6e6f74206265206d6f726520746860448201526c616e206d617820737570706c7960981b60648201526084016108c6565b6000612798612f82565b6009805491925060006127aa83615b02565b90915550506000818152600a6020526040902080546001600160a01b0319163317905583511561280d57807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8560405161280491906156e8565b60405180910390a25b841561281f5761281f33828786612f98565b6000818152600b60209081526040808320889055600c90915290208690559050949350505050565b6000838152600b602052604081205484919061286490859061593a565b6000838152600c60205260409020549091508111156128ba5760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b60448201526064016108c6565b6128c686868686612f98565b6000858152600b60205260409020546128e090859061593a565b6000958652600b6020526040909520949094555050505050565b612905600482612f00565b6040516001600160a01b038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61299960048261228e565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b8051611c7d90600f9060208401906142be565b6129ee60038261228e565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b60006001600160a01b038216612a885760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084016108c6565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b038416600090815260208181526040808320858452909152902054612ad5908290615985565b6001600160a01b0380861660009081526020818152604080832087845282528083209490945591861681528082528281208582529091522054612b1990829061593a565b6001600160a01b0384811660008181526020818152604080832088845282529182902094909455805186815293840185905290929187169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b6001600160a01b0384163b1561122a5760405163f23a6e6160e01b81526000906001600160a01b0386169063f23a6e6190612bcb9033908a90899089908990600401615346565b602060405180830381600087803b158015612be557600080fd5b505af1158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d919061483c565b90506001600160e01b0319811663f23a6e6160e01b146126dc5760405162461bcd60e51b815260206004820152603a60248201527f45524331313535235f63616c6c6f6e4552433131353552656365697665643a2060448201527f494e56414c49445f4f4e5f524543454956455f4d45535341474500000000000060648201526084016108c6565b6001600160a01b038316600090815260208181526040808320858452909152902054612cd2908290615985565b6001600160a01b0384166000818152602081815260408083208784528252808320949094558351868152908101859052909233917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60008181526005602052604090205460609062010000900461ffff16612d5f576108d882613034565b612d688261334f565b612d71836136ae565b612d7a846139f9565b612d8385613d30565b60405160200161232d9493929190614ccd565b919050565b805160609080612dbb575050604080516020810190915260008152919050565b60006003612dca83600261593a565b612dd49190615952565b612ddf906004615966565b90506000612dee82602061593a565b6001600160401b03811115612e0557612e05615b73565b6040519080825280601f01601f191660200182016040528015612e2f576020820181803683370190505b5090506000604051806060016040528060408152602001615f53604091399050600181016020830160005b86811015612ebb576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612e5a565b506003860660018114612ed55760028114612ee657612ef2565b613d3d60f01b600119830152612ef2565b603d60f81b6000198301525b505050918152949350505050565b612f0a8282612a25565b612f605760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b60648201526084016108c6565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b60006009546001612f93919061593a565b905090565b6001600160a01b038416600090815260208181526040808320868452909152902054612fc590839061593a565b6001600160a01b03851660008181526020818152604080832088845282528083209490945583518781529081018690529192909133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46113d5600085858585612b84565b600081815260066020908152604080832081516101608101835281548152600182015493810193909352600281015491830191909152600381015461ffff811660608481019190915260ff620100008304811615156080860152630100000083048116151560a0860152600160201b909204909116151560c0840152600482018054919493929160e0840191906130ca90615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546130f690615acd565b80156131435780601f1061311857610100808354040283529160200191613143565b820191906000526020600020905b81548152906001019060200180831161312657829003601f168201915b5050505050815260200160058201805461315c90615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461318890615acd565b80156131d55780601f106131aa576101008083540402835291602001916131d5565b820191906000526020600020905b8154815290600101906020018083116131b857829003601f168201915b505050505081526020016006820180546131ee90615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461321a90615acd565b80156132675780601f1061323c57610100808354040283529160200191613267565b820191906000526020600020905b81548152906001019060200180831161324a57829003601f168201915b5050505050815260200160078201805461328090615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546132ac90615acd565b80156132f95780601f106132ce576101008083540402835291602001916132f9565b820191906000526020600020905b8154815290600101906020018083116132dc57829003601f168201915b50505050508152505090508061012001518160e0015182610100015183610140015161332485614067565b604051602001613338959493929190614f61565b604051602081830303815290604052915050919050565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b909304909316610100840152600181018054929493926101208401919061340790615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461343390615acd565b80156134805780601f1061345557610100808354040283529160200191613480565b820191906000526020600020905b81548152906001019060200180831161346357829003601f168201915b5050505050815260200160028201805461349990615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546134c590615acd565b80156135125780601f106134e757610100808354040283529160200191613512565b820191906000526020600020905b8154815290600101906020018083116134f557829003601f168201915b5050505050815260200160038201805461352b90615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461355790615acd565b80156135a45780601f10613579576101008083540402835291602001916135a4565b820191906000526020600020905b81548152906001019060200180831161358757829003601f168201915b505050505081526020016004820180546135bd90615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546135e990615acd565b80156136365780601f1061360b57610100808354040283529160200191613636565b820191906000526020600020905b81548152906001019060200180831161361957829003601f168201915b505050505081525050905060008160000151905081610160015182610120015183610140015161366e85610100015161ffff16614116565b61ffff8516600090815260076020908152604091829020915161369696959493929101614de4565b60405160208183030381529060405292505050919050565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b909304909316610100840152600181018054929493926101208401919061376690615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461379290615acd565b80156137df5780601f106137b4576101008083540402835291602001916137df565b820191906000526020600020905b8154815290600101906020018083116137c257829003601f168201915b505050505081526020016002820180546137f890615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461382490615acd565b80156138715780601f1061384657610100808354040283529160200191613871565b820191906000526020600020905b81548152906001019060200180831161385457829003601f168201915b5050505050815260200160038201805461388a90615acd565b80601f01602080910402602001604051908101604052809291908181526020018280546138b690615acd565b80156139035780601f106138d857610100808354040283529160200191613903565b820191906000526020600020905b8154815290600101906020018083116138e657829003601f168201915b5050505050815260200160048201805461391c90615acd565b80601f016020809104026020016040519081016040528092919081815260200182805461394890615acd565b80156139955780601f1061396a57610100808354040283529160200191613995565b820191906000526020600020905b81548152906001019060200180831161397857829003601f168201915b505050919092525050815161ffff808216600090815260086020908152604080832054808516845260078352818420620100009091048516845292209086015195965092949093506139e79116614116565b60405160200161369693929190614d53565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b9093049093166101008401526001810180549294939261012084019190613ab190615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613add90615acd565b8015613b2a5780601f10613aff57610100808354040283529160200191613b2a565b820191906000526020600020905b815481529060010190602001808311613b0d57829003601f168201915b50505050508152602001600282018054613b4390615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613b6f90615acd565b8015613bbc5780601f10613b9157610100808354040283529160200191613bbc565b820191906000526020600020905b815481529060010190602001808311613b9f57829003601f168201915b50505050508152602001600382018054613bd590615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613c0190615acd565b8015613c4e5780601f10613c2357610100808354040283529160200191613c4e565b820191906000526020600020905b815481529060010190602001808311613c3157829003601f168201915b50505050508152602001600482018054613c6790615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613c9390615acd565b8015613ce05780601f10613cb557610100808354040283529160200191613ce0565b820191906000526020600020905b815481529060010190602001808311613cc357829003601f168201915b5050505050815250509050613cfc816040015161ffff16614116565b613d0d826060015161ffff16614116565b613d1e836080015161ffff16614116565b604051602001613338939291906151d3565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b9093049093166101008401526001810180549294939261012084019190613de890615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613e1490615acd565b8015613e615780601f10613e3657610100808354040283529160200191613e61565b820191906000526020600020905b815481529060010190602001808311613e4457829003601f168201915b50505050508152602001600282018054613e7a90615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613ea690615acd565b8015613ef35780601f10613ec857610100808354040283529160200191613ef3565b820191906000526020600020905b815481529060010190602001808311613ed657829003601f168201915b50505050508152602001600382018054613f0c90615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613f3890615acd565b8015613f855780601f10613f5a57610100808354040283529160200191613f85565b820191906000526020600020905b815481529060010190602001808311613f6857829003601f168201915b50505050508152602001600482018054613f9e90615acd565b80601f0160208091040260200160405190810160405280929190818152602001828054613fca90615acd565b80156140175780601f10613fec57610100808354040283529160200191614017565b820191906000526020600020905b815481529060010190602001808311613ffa57829003601f168201915b50505050508152505090506140338160a0015161ffff16614116565b6140448260c0015161ffff16614116565b6140558360e0015161ffff16614116565b604051602001613338939291906150d4565b604080518082018252600881526702232b332b739b2960c51b60208083019190915282518084019093526009835268285370656369616c2960b81b90830152608083015160609290156140d85760405180604001604052806008815260200167027b33332b739b2960c51b81525091505b8360a00151156141035750604080518082019091526008815267284e6f726d616c2960c01b60208201525b8181604051602001613696929190614d24565b60608161413a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614164578061414e81615b02565b915061415d9050600a83615952565b915061413e565b6000816001600160401b0381111561417e5761417e615b73565b6040519080825280601f01601f1916602001820160405280156141a8576020820181803683370190505b5090505b8415614213576141bd600183615985565b91506141ca600a86615b1d565b6141d590603061593a565b60f81b8183815181106141ea576141ea615b5d565b60200101906001600160f81b031916908160001a90535061420c600a86615952565b94506141ac565b949350505050565b604051806101c00160405280600e906020820280368337509192915050565b82805461424690615acd565b90600052602060002090601f01602090048101928261426857600085556142ae565b82601f106142815782800160ff198235161785556142ae565b828001600101855582156142ae579182015b828111156142ae578235825591602001919060010190614293565b506142ba929150614332565b5090565b8280546142ca90615acd565b90600052602060002090601f0160209004810192826142ec57600085556142ae565b82601f1061430557805160ff19168380011785556142ae565b828001600101855582156142ae579182015b828111156142ae578251825591602001919060010190614317565b5b808211156142ba5760008155600101614333565b60006001600160401b0383111561436057614360615b73565b614373601f8401601f19166020016158e7565b905082815283838301111561438757600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114612d9657600080fd5b600082601f8301126143c657600080fd5b813560206143db6143d683615917565b6158e7565b80838252828201915082860187848660051b89010111156143fb57600080fd5b60005b858110156144215761440f8261439e565b845292840192908401906001016143fe565b5090979650505050505050565b600082601f83011261443f57600080fd5b8135602061444f6143d683615917565b80838252828201915082860187848660051b890101111561446f57600080fd5b60005b8581101561442157813584529284019290840190600101614472565b60008083601f8401126144a057600080fd5b5081356001600160401b038111156144b757600080fd5b6020830191508360208285010111156144cf57600080fd5b9250929050565b600082601f8301126144e757600080fd5b6144f683833560208501614347565b9392505050565b60006101a0828403121561451057600080fd5b50919050565b6000610160828403121561451057600080fd5b60006020828403121561453b57600080fd5b6144f68261439e565b6000806040838503121561455757600080fd5b6145608361439e565b915061456e6020840161439e565b90509250929050565b600080600080600060a0868803121561458f57600080fd5b6145988661439e565b94506145a66020870161439e565b935060408601356001600160401b03808211156145c257600080fd5b6145ce89838a0161442e565b945060608801359150808211156145e457600080fd5b6145f089838a0161442e565b9350608088013591508082111561460657600080fd5b50614613888289016144d6565b9150509295509295909350565b600080600080600060a0868803121561463857600080fd5b6146418661439e565b945061464f6020870161439e565b9350604086013592506060860135915060808601356001600160401b0381111561467857600080fd5b614613888289016144d6565b6000806040838503121561469757600080fd5b6146a08361439e565b915060208301356146b081615f1e565b809150509250929050565b600080604083850312156146ce57600080fd5b6146d78361439e565b946020939093013593505050565b6000806000606084860312156146fa57600080fd5b6147038461439e565b95602085013595506040909401359392505050565b6000806000806080858703121561472e57600080fd5b6147378561439e565b9350602085013592506040850135915060608501356001600160401b0381111561476057600080fd5b61476c878288016144d6565b91505092959194509250565b6000806040838503121561478b57600080fd5b82356001600160401b03808211156147a257600080fd5b6147ae868387016143b5565b935060208501359150808211156147c457600080fd5b506147d18582860161442e565b9150509250929050565b60006101c08083850312156147ef57600080fd5b8381840111156147fe57600080fd5b509092915050565b60006020828403121561481857600080fd5b5035919050565b60006020828403121561483157600080fd5b81356144f681615f2c565b60006020828403121561484e57600080fd5b81516144f681615f2c565b60006020828403121561486b57600080fd5b81358060010b81146144f657600080fd5b60006020828403121561488e57600080fd5b81356001600160401b038111156148a457600080fd5b8201601f810184136148b557600080fd5b61421384823560208401614347565b600080600080600080600060a0888a0312156148df57600080fd5b87356001600160401b03808211156148f657600080fd5b6149028b838c016144fd565b985060208a0135975060408a0135965060608a013591508082111561492657600080fd5b6149328b838c0161448e565b909650945060808a013591508082111561494b57600080fd5b506149588a828b0161448e565b989b979a50959850939692959293505050565b600080600080600080600060a0888a03121561498657600080fd5b87356001600160401b038082111561499d57600080fd5b6149028b838c01614516565b6000602082840312156149bb57600080fd5b81356144f681615f42565b6000806000604084860312156149db57600080fd5b83356149e681615f42565b925060208401356001600160401b03811115614a0157600080fd5b614a0d8682870161448e565b9497909650939450505050565b6000808284036060811215614a2e57600080fd5b8335614a3981615f42565b92506040601f1982011215614a4d57600080fd5b506020830190509250929050565b60008060408385031215614a6e57600080fd5b8235915060208301356001600160401b03811115614a8b57600080fd5b6147d1858286016143b5565b60008060408385031215614aaa57600080fd5b8235915060208301356001600160401b03811115614ac757600080fd5b6147d1858286016144fd565b60008060408385031215614ae657600080fd5b8235915060208301356001600160401b03811115614b0357600080fd5b6147d185828601614516565b60008060408385031215614b2257600080fd5b50508035926020909101359150565b600080600060608486031215614b4657600080fd5b8335925060208401359150614b5d6040850161439e565b90509250925092565b600081518084526020808501945080840160005b83811015614b9657815187529582019590820190600101614b7a565b509495945050505050565b60008151808452614bb9816020860160208601615aa1565b601f01601f19169290920160200192915050565b60008151614bdf818560208601615aa1565b9290920192915050565b60008154614bf681615acd565b60018281168015614c0e5760018114614c1f57614c4e565b60ff19841687528287019450614c4e565b8560005260208060002060005b85811015614c455781548a820152908401908201614c2c565b50505082870194505b5050505092915050565b7f7b22706f6f6c223a207b226e616d65223a2022726f6f74222c22706f696e747381527f223a20317d2c2265787465726e616c5f75726c223a202268747470733a2f2f7060208201527f6570656d6f6e2e776f726c642f222c22696d616765223a202200000000000000604082015260590190565b60008551614cdf818460208a01615aa1565b855190830190614cf3818360208a01615aa1565b8551910190614d06818360208901615aa1565b8451910190614d19818360208801615aa1565b019695505050505050565b60008351614d36818460208801615aa1565b835190830190614d4a818360208801615aa1565b01949350505050565b6000614d5f8286614be9565b7f227d2c7b2274726169745f74797065223a22526573697374616e6365222c227681526630b63ab2911d1160c91b6020820152614d9f6027820186614be9565b90507f227d2c7b2274726169745f74797065223a224850222c2276616c7565223a000081528351614dd781601e840160208801615aa1565b01601e0195945050505050565b6000614def82614c58565b8751614dff818360208c01615aa1565b6a1116113730b6b2911d101160a91b91019081528651614e2681600b840160208b01615aa1565b711116113232b9b1b934b83a34b7b7111d101160711b600b92909101918201528551614e5981601d840160208a01615aa1565b7f222c2261747472696275746573223a5b7b2274726169745f74797065223a2253601d92909101918201527f6574222c2276616c7565223a22506570656d6f6e20426174746c65227d2c7b22603d8201527f74726169745f74797065223a224c6576656c222c2276616c7565223a00000000605d8201528451614ee3816079840160208901615aa1565b7f7d2c7b2274726169745f74797065223a22456c656d656e74222c2276616c75656079929091019182015262111d1160e91b6099820152611311614f2a609c830186614be9565b7f227d2c7b2274726169745f74797065223a225765616b6e657373222c2276616c8152643ab2911d1160d91b602082015260250190565b6000614f6c82614c58565b8751614f7c818360208c01615aa1565b6a1116113730b6b2911d101160a91b91019081528651614fa381600b840160208b01615aa1565b711116113232b9b1b934b83a34b7b7111d101160711b600b92909101918201528551614fd681601d840160208a01615aa1565b7f222c2261747472696275746573223a205b7b2274726169745f74797065223a20601d92909101918201527f22536574222c2276616c7565223a2022506570656d6f6e20537570706f727422603d8201527f7d2c7b2274726169745f74797065223a2022526172697479222c2276616c7565605d82015263111d101160e11b607d820152845161506d816081840160208901615aa1565b6150c76150b76150b16081848601017f227d2c7b2274726169745f74797065223a202254797065222c2276616c7565228152621d101160e91b602082015260230190565b87614bcd565b63227d5d7d60e01b815260040190565b9998505050505050505050565b7f7d2c7b2274726169745f74797065223a2241747461636b222c2276616c7565228152601d60f91b602082015260008451615116816021850160208901615aa1565b7f7d2c7b2274726169745f74797065223a225370656369616c2041747461636b226021918401918201526816113b30b63ab2911d60b91b6041820152845161516581604a840160208901615aa1565b7f7d2c7b2274726169745f74797065223a225370656369616c20446566656e7365604a9290910191820152691116113b30b63ab2911d60b11b606a82015283516151b6816074840160208801615aa1565b627d5d7d60e81b6074929091019182015260770195945050505050565b7f7d2c7b2274726169745f74797065223a225370656564222c2276616c7565223a81526000845161520b816020850160208901615aa1565b80830190507f7d2c7b2274726169745f74797065223a22496e74656c6c6967656e6365222c226020820152663b30b63ab2911d60c91b60408201528451615259816047840160208901615aa1565b7f7d2c7b2274726169745f74797065223a22446566656e7365222c2276616c75656047929091019182015261111d60f11b606782015283516152a2816069840160208801615aa1565b0160690195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536340d0a0d0a8152600082516152e7816020850160208701615aa1565b9190910160200192915050565b6001600160a01b0386811682528516602082015260a06040820181905260009061532090830186614b66565b82810360608401526153328186614b66565b905082810360808401526113118185614ba1565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061538090830184614ba1565b979650505050505050565b6101c08101818360005b600e8110156153b7578151600190810b84526020938401939092019101615395565b50505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156154eb57603f198984030185528151805161ffff9081168552888201518116898601528782015181168886015260608083015182169086015260808083015182169086015260a08083015182169086015260c08083015182169086015260e0808301518216908601526101008083015190911690850152610120808201516101a0828701819052919061548083880182614ba1565b92505050610140808301518683038288015261549c8382614ba1565b9250505061016080830151868303828801526154b88382614ba1565b9250505061018080830151925085820381870152506154d78183614ba1565b9689019694505050908601906001016153e7565b509098975050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156154eb57603f198984030185528151610160815185528882015189860152878201518886015260608083015161555f8288018261ffff169052565b505060808281015115159086015260a08083015115159086015260c08083015115159086015260e08083015181870183905261559d83880182614ba1565b9250505061010080830151868303828801526155b98382614ba1565b9250505061012080830151868303828801526155d58382614ba1565b9250505061014080830151925085820381870152506155f48183614ba1565b968901969450505090860190600101615520565b6020815260006144f66020830184614b66565b60408152600061562e6040830185614b66565b82810360208401526156408185614b66565b95945050505050565b60006101608d83528c60208401528b604084015261ffff8b166060840152891515608084015288151560a084015261568560c084018915159052565b8060e084015261569781840188614ba1565b90508281036101008401526156ac8187614ba1565b90508281036101208401526156c18186614ba1565b90508281036101408401526156d68185614ba1565b9e9d5050505050505050505050505050565b6020815260006144f66020830184614ba1565b60208082526030908201527f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766560408201526f20746865204d696e74657220726f6c6560801b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260409082018190527f57686974656c69737441646d696e526f6c653a2063616c6c657220646f657320908201527f6e6f742068617665207468652057686974656c69737441646d696e20726f6c65606082015260800190565b61ffff8e16815261ffff8d16602082015261ffff8c16604082015261ffff8b16606082015261ffff8a16608082015261ffff891660a082015261ffff881660c082015261ffff871660e082015261ffff86166101008201526101a0610120820152600061584f6101a0830187614ba1565b8281036101408401526158628187614ba1565b90508281036101608401526158778186614ba1565b905082810361018084015261588c8185614ba1565b9150509e9d5050505050505050505050505050565b6000808335601e198436030181126158b857600080fd5b8301803591506001600160401b038211156158d257600080fd5b6020019150368190038213156144cf57600080fd5b604051601f8201601f191681016001600160401b038111828210171561590f5761590f615b73565b604052919050565b60006001600160401b0382111561593057615930615b73565b5060051b60200190565b6000821982111561594d5761594d615b31565b500190565b60008261596157615961615b47565b500490565b600081600019048311821515161561598057615980615b31565b500290565b60008282101561599757615997615b31565b500390565b601f821115611f7957600081815260208120601f850160051c810160208610156159c35750805b601f850160051c820191505b818110156126dc578281556001016159cf565b6001600160401b038311156159f9576159f9615b73565b615a0d83615a078354615acd565b8361599c565b6000601f841160018114615a415760008515615a295750838201355b600019600387901b1c1916600186901b17835561122a565b600083815260209020601f19861690835b82811015615a725786850135825560209485019460019092019101615a52565b5086821015615a8f5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60005b83811015615abc578181015183820152602001615aa4565b838111156113d55750506000910152565b600181811c90821680615ae157607f821691505b6020821081141561451057634e487b7160e01b600052602260045260246000fd5b6000600019821415615b1657615b16615b31565b5060010190565b600082615b2c57615b2c615b47565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081356108d881615f1e565b600081356108d881615f42565b615bc2615baf83615b96565b825461ffff191661ffff91909116178255565b615beb615bd160208401615b96565b825463ffff0000191660109190911b63ffff000016178255565b615c18615bfa60408401615b96565b825465ffff00000000191660209190911b65ffff0000000016178255565b615c49615c2760608401615b96565b825467ffff000000000000191660309190911b67ffff00000000000016178255565b615c7e615c5860808401615b96565b825469ffff0000000000000000191660409190911b69ffff000000000000000016178255565b615cad615c8d60a08401615b96565b82805461ffff60501b191660509290921b61ffff60501b16919091179055565b615cdc615cbc60c08401615b96565b82805461ffff60601b191660609290921b61ffff60601b16919091179055565b615d0b615ceb60e08401615b96565b82805461ffff60701b191660709290921b61ffff60701b16919091179055565b615d3b615d1b6101008401615b96565b82805461ffff60801b191660809290921b61ffff60801b16919091179055565b615d496101208301836158a1565b615d578183600186016159e2565b5050615d676101408301836158a1565b615d758183600286016159e2565b5050615d856101608301836158a1565b615d938183600386016159e2565b5050615da36101808301836158a1565b6113d58183600486016159e2565b81358155602082013560018201556040820135600282015560038101615ddc615baf60608501615b96565b615e07615deb60808501615b89565b82805462ff0000191691151560101b62ff000016919091179055565b615e34615e1660a08501615b89565b82805463ff000000191691151560181b63ff00000016919091179055565b615e63615e4360c08501615b89565b82805464ff00000000191691151560201b64ff0000000016919091179055565b50615e7160e08301836158a1565b615e7f8183600486016159e2565b5050615e8f6101008301836158a1565b615e9d8183600586016159e2565b5050615ead6101208301836158a1565b615ebb8183600686016159e2565b5050615ecb6101408301836158a1565b6113d58183600786016159e2565b8135615ee481615f42565b815461ffff191661ffff8216178255506020820135615f0281615f42565b815463ffff00001916601082901b63ffff000016178255505050565b801515811461126457600080fd5b6001600160e01b03198116811461126457600080fd5b61ffff8116811461126457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201041321bf60ea857142049220bd1816bb47cdd5a9600e2c5c5e09869e0f3f58b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_id": "ID of the Token",
          "_owner": "The address of the token holder"
        },
        "returns": {
          "_0": "The _owner's balance of the Token type requested"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "_ids": "ID of the Tokens",
          "_owners": "The addresses of the token holders"
        },
        "returns": {
          "_0": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
        }
      },
      "endMinting(uint256)": {
        "details": "Ends minting of token",
        "params": {
          "_id": "Token ID for which minting will end"
        }
      },
      "getLastTokenID()": {
        "details": "returns the last minted token ID based on value of _currentTokenID"
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "Address of authorized operator",
          "_owner": "The owner of the Tokens"
        },
        "returns": {
          "isOperator": "True if the operator is approved, false if not"
        }
      },
      "maxSupply(uint256)": {
        "details": "Returns the max quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Mints some amount of tokens to an address",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "_amounts": "Transfer amounts per token type",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source addresses",
          "_ids": "IDs of each token type",
          "_to": "Target addresses"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "_amount": "Transfered amount",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source address",
          "_id": "ID of the token type",
          "_to": "Target address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Pepemon Factory PEPEMON - gotta farm em all",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdrop(uint256,address[])": {
        "notice": "Mint NFT and send those to the list of given addresses"
      },
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of an account's Tokens"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of multiple account/token pairs"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given owner"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Send multiple types of Tokens from the _from address to the _to address (with safety call)"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 579,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 585,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2133,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2028,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_minters",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Role)3126_storage"
      },
      {
        "astId": 3229,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_whitelistAdmins",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Role)3126_storage"
      },
      {
        "astId": 2295,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "battleCardStats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BattleCardStats)2262_storage)"
      },
      {
        "astId": 2300,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "supportCardStats",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(SupportCardStats)2285_storage)"
      },
      {
        "astId": 2304,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "elementDecode",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_string_storage)"
      },
      {
        "astId": 2309,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "weakResist",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_struct(elementWR)2290_storage)"
      },
      {
        "astId": 1461,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_currentTokenID",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1465,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "creators",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1469,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1473,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "tokenMaxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1475,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "name",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 1477,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "symbol",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 1479,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "baseMetadataURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint16,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint16,t_struct(elementWR)2290_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct PepemonStats.elementWR)",
        "numberOfBytes": "32",
        "value": "t_struct(elementWR)2290_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(BattleCardStats)2262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonStats.BattleCardStats)",
        "numberOfBytes": "32",
        "value": "t_struct(BattleCardStats)2262_storage"
      },
      "t_mapping(t_uint256,t_struct(SupportCardStats)2285_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonStats.SupportCardStats)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportCardStats)2285_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BattleCardStats)2262_storage": {
        "encoding": "inplace",
        "label": "struct PepemonStats.BattleCardStats",
        "members": [
          {
            "astId": 2237,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "element",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2239,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "hp",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2241,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "speed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2243,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "intelligence",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2245,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "defense",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2247,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "attack",
            "offset": 10,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2249,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "specialAttack",
            "offset": 12,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2251,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "specialDefense",
            "offset": 14,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2253,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "level",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2255,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2257,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2259,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "ipfsAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2261,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "rarity",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Role)3126_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 3125,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SupportCardStats)2285_storage": {
        "encoding": "inplace",
        "label": "struct PepemonStats.SupportCardStats",
        "members": [
          {
            "astId": 2264,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "currentRoundChanges",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2266,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "nextRoundChanges",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2268,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "specialCode",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2270,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "modifierNumberOfNextTurns",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 2272,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "isOffense",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2274,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "isNormal",
            "offset": 3,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2276,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "isStackable",
            "offset": 4,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 2278,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2280,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2282,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "ipfsAddr",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2284,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "rarity",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(elementWR)2290_storage": {
        "encoding": "inplace",
        "label": "struct PepemonStats.elementWR",
        "members": [
          {
            "astId": 2287,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "weakness",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2289,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "resistance",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}