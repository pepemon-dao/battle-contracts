{
  "address": "0x25e8db00C55b9da7C999Fdc0A9d098Cb0b3aAFfc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battleCardStats",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "element",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "hp",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "speed",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "intelligence",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "defense",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "attack",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "specialAttack",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "specialDefense",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "level",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsAddr",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int16[14]",
          "name": "arr",
          "type": "int16[14]"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "element",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hp",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "intelligence",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialAttack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialDefense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "level",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.BattleCardStats",
          "name": "_stats",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createBattleCard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "currentRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "specialCode",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "modifierNumberOfNextTurns",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isOffense",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isNormal",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStackable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.SupportCardStats",
          "name": "_stats",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createSupportCard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "num",
          "type": "bytes32"
        }
      ],
      "name": "deconvert",
      "outputs": [
        {
          "internalType": "int16[14]",
          "name": "",
          "type": "int16[14]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "elementDecode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "endMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelistAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceWhitelistAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "element",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hp",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "intelligence",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialAttack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "specialDefense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "level",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.BattleCardStats",
          "name": "x",
          "type": "tuple"
        }
      ],
      "name": "setBattleCardStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "element",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "x",
          "type": "string"
        }
      ],
      "name": "setElementDecode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "currentRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "nextRoundChanges",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "specialCode",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "modifierNumberOfNextTurns",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isOffense",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isNormal",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStackable",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsAddr",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            }
          ],
          "internalType": "struct PepemonStats.SupportCardStats",
          "name": "x",
          "type": "tuple"
        }
      ],
      "name": "setSupportCardStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "element",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "weakness",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "resistance",
              "type": "uint16"
            }
          ],
          "internalType": "struct PepemonStats.elementWR",
          "name": "x",
          "type": "tuple"
        }
      ],
      "name": "setWeakResist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportCardStats",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currentRoundChanges",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "nextRoundChanges",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "specialCode",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "modifierNumberOfNextTurns",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isOffense",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isNormal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isStackable",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsAddr",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "weakResist",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "weakness",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "resistance",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe03d9a3cdf3f3468abbbfedc44b5771d16a3b756f3341b2349cbe27ccf80ffd",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0x25e8db00C55b9da7C999Fdc0A9d098Cb0b3aAFfc",
    "transactionIndex": 0,
    "gasUsed": "5502821",
    "logsBloom": "0x
    "blockHash": "0x00005eb6000048f469b5f548b7c362596cd84a4310445f07540697320867b8ff",
    "transactionHash": "0xfe03d9a3cdf3f3468abbbfedc44b5771d16a3b756f3341b2349cbe27ccf80ffd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23934404,
        "transactionHash": "0xfe03d9a3cdf3f3468abbbfedc44b5771d16a3b756f3341b2349cbe27ccf80ffd",
        "address": "0x25e8db00C55b9da7C999Fdc0A9d098Cb0b3aAFfc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x00005eb6000048f469b5f548b7c362596cd84a4310445f07540697320867b8ff"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23934404,
        "transactionHash": "0xfe03d9a3cdf3f3468abbbfedc44b5771d16a3b756f3341b2349cbe27ccf80ffd",
        "address": "0x25e8db00C55b9da7C999Fdc0A9d098Cb0b3aAFfc",
        "topics": [
          "0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x00005eb6000048f469b5f548b7c362596cd84a4310445f07540697320867b8ff"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23934404,
        "transactionHash": "0xfe03d9a3cdf3f3468abbbfedc44b5771d16a3b756f3341b2349cbe27ccf80ffd",
        "address": "0x25e8db00C55b9da7C999Fdc0A9d098Cb0b3aAFfc",
        "topics": [
          "0x22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd20961299",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x00005eb6000048f469b5f548b7c362596cd84a4310445f07540697320867b8ff"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23934404,
        "transactionHash": "0xfe03d9a3cdf3f3468abbbfedc44b5771d16a3b756f3341b2349cbe27ccf80ffd",
        "address": "0x25e8db00C55b9da7C999Fdc0A9d098Cb0b3aAFfc",
        "topics": [
          "0x22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd20961299",
          "0x000000000000000000000000104e989923417d765215b48e03baa4af222f3f6d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x00005eb6000048f469b5f548b7c362596cd84a4310445f07540697320867b8ff"
      }
    ],
    "blockNumber": 23934404,
    "cumulativeGasUsed": "5502821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb2319ddc22cf797eb7bf64758dba0fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleCardStats\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16[14]\",\"name\":\"arr\",\"type\":\"int16[14]\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.BattleCardStats\",\"name\":\"_stats\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createBattleCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.SupportCardStats\",\"name\":\"_stats\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createSupportCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"deconvert\",\"outputs\":[{\"internalType\":\"int16[14]\",\"name\":\"\",\"type\":\"int16[14]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"elementDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"endMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hp\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"intelligence\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialAttack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"specialDefense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.BattleCardStats\",\"name\":\"x\",\"type\":\"tuple\"}],\"name\":\"setBattleCardStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"}],\"name\":\"setElementDecode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"internalType\":\"struct PepemonStats.SupportCardStats\",\"name\":\"x\",\"type\":\"tuple\"}],\"name\":\"setSupportCardStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"element\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"weakness\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"resistance\",\"type\":\"uint16\"}],\"internalType\":\"struct PepemonStats.elementWR\",\"name\":\"x\",\"type\":\"tuple\"}],\"name\":\"setWeakResist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportCardStats\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currentRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoundChanges\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"specialCode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"modifierNumberOfNextTurns\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isOffense\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStackable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsAddr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"weakResist\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"weakness\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"resistance\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_id\":\"ID of the Token\",\"_owner\":\"The address of the token holder\"},\"returns\":{\"_0\":\"The _owner's balance of the Token type requested\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"_ids\":\"ID of the Tokens\",\"_owners\":\"The addresses of the token holders\"},\"returns\":{\"_0\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"}},\"endMinting(uint256)\":{\"details\":\"Ends minting of token\",\"params\":{\"_id\":\"Token ID for which minting will end\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"Address of authorized operator\",\"_owner\":\"The owner of the Tokens\"},\"returns\":{\"isOperator\":\"True if the operator is approved, false if not\"}},\"maxSupply(uint256)\":{\"details\":\"Returns the max quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"_amounts\":\"Transfer amounts per token type\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source addresses\",\"_ids\":\"IDs of each token type\",\"_to\":\"Target addresses\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"_amount\":\"Transfered amount\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source address\",\"_id\":\"ID of the token type\",\"_to\":\"Target address\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"uint256 ID of the token to query\"},\"returns\":{\"_0\":\"amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Pepemon Factory PEPEMON - gotta farm em all\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdrop(uint256,address[])\":{\"notice\":\"Mint NFT and send those to the list of given addresses\"},\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Send multiple types of Tokens from the _from address to the _to address (with safety call)\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers amount amount of an _id from the _from address to the _to address specified\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonFactory.sol\":\"PepemonFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PepemonFactory.sol\":{\"content\":\"import \\\"./cardlib/ERC1155Tradable.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Pepemon Factory\\r\\n * PEPEMON - gotta farm em all\\r\\n */\\r\\ncontract PepemonFactory is ERC1155Tradable {\\r\\n    string private _contractURI;\\r\\n\\r\\n    constructor() ERC1155Tradable(\\\"PepemonBattleFactory\\\", \\\"PEPEBATTLE\\\") {\\r\\n        _setBaseMetadataURI(\\\"https://pepemon.finance/api/cards/\\\");\\r\\n        _contractURI = \\\"https://pepemon.finance/api/pepemon-erc1155\\\";\\r\\n    }\\r\\n\\r\\n    function setBaseMetadataURI(string memory newURI) public onlyWhitelistAdmin {\\r\\n        _setBaseMetadataURI(newURI);\\r\\n    }\\r\\n\\r\\n    function setContractURI(string memory newURI) public onlyWhitelistAdmin {\\r\\n        _contractURI = newURI;\\r\\n    }\\r\\n\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return _contractURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ends minting of token\\r\\n     * @param _id          Token ID for which minting will end\\r\\n     */\\r\\n    function endMinting(uint256 _id) external onlyWhitelistAdmin {\\r\\n        tokenMaxSupply[_id] = tokenSupply[_id];\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address _account,\\r\\n        uint256 _id,\\r\\n        uint256 _amount\\r\\n    ) public onlyMinter {\\r\\n        require(balanceOf(_account, _id) >= _amount, \\\"Cannot burn more than addres has\\\");\\r\\n        _burn(_account, _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mint NFT and send those to the list of given addresses\\r\\n     */\\r\\n    function airdrop(uint256 _id, address[] memory _addresses) public onlyMinter {\\r\\n        require(tokenMaxSupply[_id] - tokenSupply[_id] >= _addresses.length, \\\"Cant mint above max supply\\\");\\r\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\r\\n            mint(_addresses[i], _id, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchMint(\\r\\n        uint256 start,\\r\\n        uint256 end,\\r\\n        address to\\r\\n    ) external onlyMinter {\\r\\n        for (uint256 i = start; i <= end; i++) {\\r\\n            mintPepe(to, i, 1, hex\\\"\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10c63d8764764f2ba1d05a520c72d67a8d70ade051be583d61256d3ae3e871c8\"},\"contracts/cardlib/Address.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb86b4b763bec09cc18c79bc39807117ed320b9db224de0fec51bd2d76362867e\"},\"contracts/cardlib/Base64.sol\":{\"content\":\"\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return '';\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {let i := 0} lt(i, len) {} {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x44ce96b49ee36e2ae0c68a95d09dca777b3d3506f1f85a144f3e7ffff06bcd27\"},\"contracts/cardlib/Context.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfe178646388a812e18613781a73fbb9610b5402622624ba695920209c40be45e\"},\"contracts/cardlib/ERC1155.sol\":{\"content\":\"import \\\"./IERC1155Receiver.sol\\\";\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of Multi-Token Standard contract\\r\\n */\\r\\ncontract ERC1155 is IERC1155 {\\r\\n    using Address for address;\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |        Variables and Events       |\\r\\n    |__________________________________*/\\r\\n\\r\\n    // onReceive function signatures\\r\\n    bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\r\\n    bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n    // Objects balances\\r\\n    mapping (address => mapping(uint256 => uint256)) internal balances;\\r\\n\\r\\n    // Operator Functions\\r\\n    mapping (address => mapping(address => bool)) internal operators;\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |     Public Transfer Functions     |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n     * @param _from    Source address\\r\\n     * @param _to      Target address\\r\\n     * @param _id      ID of the token type\\r\\n     * @param _amount  Transfered amount\\r\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    public override\\r\\n    {\\r\\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n        require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\\r\\n\\r\\n        _safeTransferFrom(_from, _to, _id, _amount);\\r\\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n     * @param _from     Source addresses\\r\\n     * @param _to       Target addresses\\r\\n     * @param _ids      IDs of each token type\\r\\n     * @param _amounts  Transfer amounts per token type\\r\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\r\\n     */\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    public override\\r\\n    {\\r\\n        // Requirements\\r\\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\r\\n        require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\r\\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |    Internal Transfer Functions    |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n     * @param _from    Source address\\r\\n     * @param _to      Target address\\r\\n     * @param _id      ID of the token type\\r\\n     * @param _amount  Transfered amount\\r\\n     */\\r\\n    function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\r\\n    internal \\r\\n    {\\r\\n        // Update balances\\r\\n        balances[_from][_id] = balances[_from][_id]-_amount; // Subtract amount\\r\\n        balances[_to][_id] = balances[_to][_id]+_amount;     // Add amount\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\r\\n     */\\r\\n    function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal \\r\\n    {\\r\\n        // Check if recipient is contract\\r\\n        if (_to.isContract()) {\\r\\n            bytes4 retval = IERC1155Receiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\\r\\n            require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n     * @param _from     Source addresses\\r\\n     * @param _to       Target addresses\\r\\n     * @param _ids      IDs of each token type\\r\\n     * @param _amounts  Transfer amounts per token type\\r\\n     */\\r\\n    function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n    {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of transfer to execute\\r\\n        uint256 nTransfer = _ids.length;\\r\\n\\r\\n        // Executing all transfers\\r\\n        for (uint256 i = 0; i < nTransfer; i++) {\\r\\n            // Update storage balance of previous bin\\r\\n            balances[_from][_ids[i]] = balances[_from][_ids[i]]-_amounts[i];\\r\\n            balances[_to][_ids[i]] = balances[_to][_ids[i]]+_amounts[i];\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\r\\n     */\\r\\n    function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n    {\\r\\n        // Pass data if recipient is contract\\r\\n        if (_to.isContract()) {\\r\\n            bytes4 retval = IERC1155Receiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\\r\\n            require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |         Operator Functions        |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\r\\n     * @param _operator  Address to add to the set of authorized operators\\r\\n     * @param _approved  True if the operator is approved, false to revoke approval\\r\\n     */\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n    external override\\r\\n    {\\r\\n        // Update operator status\\r\\n        operators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Queries the approval status of an operator for a given owner\\r\\n     * @param _owner     The owner of the Tokens\\r\\n     * @param _operator  Address of authorized operator\\r\\n     * @return isOperator True if the operator is approved, false if not\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n    public view virtual override returns (bool isOperator)\\r\\n    {\\r\\n        return operators[_owner][_operator];\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |         Balance Functions         |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balance of an account's Tokens\\r\\n     * @param _owner  The address of the token holder\\r\\n     * @param _id     ID of the Token\\r\\n     * @return The _owner's balance of the Token type requested\\r\\n     */\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n    public view override returns (uint256)\\r\\n    {\\r\\n        return balances[_owner][_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balance of multiple account/token pairs\\r\\n     * @param _owners The addresses of the token holders\\r\\n     * @param _ids    ID of the Tokens\\r\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n     */\\r\\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\r\\n    public view override returns (uint256[] memory)\\r\\n    {\\r\\n        require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\r\\n\\r\\n        // Variables\\r\\n        uint256[] memory batchBalances = new uint256[](_owners.length);\\r\\n\\r\\n        // Iterate over each owner and token ID\\r\\n        for (uint256 i = 0; i < _owners.length; i++) {\\r\\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |          ERC165 Functions         |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n     */\\r\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * INTERFACE_SIGNATURE_ERC1155 =\\r\\n     * bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\r\\n     * bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\r\\n     * bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\r\\n     */\\r\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\r\\n\\r\\n    /**\\r\\n     * @notice Query if a contract implements an interface\\r\\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\\r\\n     * @return `true` if the contract implements `_interfaceID` and\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceID) external pure override returns (bool) {\\r\\n        if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\r\\n            _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x937bcc19e1f51cfbdfd1ee532f71bd2fae603a262f16ca33756a08c261dfbf61\"},\"contracts/cardlib/ERC1155Metadata.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Contract that handles metadata related methods.\\r\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\r\\n *      Methods also assume that URI uses hex representation of token IDs.\\r\\n */\\r\\ncontract ERC1155Metadata {\\r\\n\\r\\n\\r\\n    /***********************************|\\r\\n    |    Utility Internal Functions     |\\r\\n    |__________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Convert uint256 to string\\r\\n     * @param _i Unsigned integer to convert to string\\r\\n     */\\r\\n    function _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x5249059ccd7bb0dc7bfb98142957ff8634ae58a1c4fadff8a5f734ffc45f5fd4\"},\"contracts/cardlib/ERC1155MintBurn.sol\":{\"content\":\"import \\\"./ERC1155.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\r\\n *      a parent contract to be executed as they are `internal` functions\\r\\n */\\r\\ncontract ERC1155MintBurn is ERC1155 {\\r\\n\\r\\n\\r\\n    /****************************************|\\r\\n    |            Minting Functions           |\\r\\n    |_______________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Mint _amount of tokens of a given id\\r\\n     * @param _to      The address to mint tokens to\\r\\n     * @param _id      Token id to mint\\r\\n     * @param _amount  The amount to be minted\\r\\n     * @param _data    Data to pass if receiver is contract\\r\\n     */\\r\\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n    {\\r\\n        // Add _amount\\r\\n        balances[_to][_id] = balances[_to][_id]+_amount;\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\r\\n\\r\\n        // Calling onReceive method if recipient is contract\\r\\n        _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint tokens for each ids in _ids\\r\\n     * @param _to       The address to mint tokens to\\r\\n     * @param _ids      Array of ids to mint\\r\\n     * @param _amounts  Array of amount of tokens to mint per id\\r\\n     * @param _data    Data to pass if receiver is contract\\r\\n     */\\r\\n    function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n    {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of mints to execute\\r\\n        uint256 nMint = _ids.length;\\r\\n\\r\\n        // Executing all minting\\r\\n        for (uint256 i = 0; i < nMint; i++) {\\r\\n            // Update storage balance\\r\\n            balances[_to][_ids[i]] = balances[_to][_ids[i]]+(_amounts[i]);\\r\\n        }\\r\\n\\r\\n        // Emit batch mint event\\r\\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\r\\n\\r\\n        // Calling onReceive method if recipient is contract\\r\\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /****************************************|\\r\\n    |            Burning Functions           |\\r\\n    |_______________________________________*/\\r\\n\\r\\n    /**\\r\\n     * @notice Burn _amount of tokens of a given token id\\r\\n     * @param _from    The address to burn tokens from\\r\\n     * @param _id      Token id to burn\\r\\n     * @param _amount  The amount to be burned\\r\\n     */\\r\\n    function _burn(address _from, uint256 _id, uint256 _amount)\\r\\n    internal\\r\\n    {\\r\\n        //Substract _amount\\r\\n        balances[_from][_id] = balances[_from][_id]-(_amount);\\r\\n\\r\\n        // Emit event\\r\\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\r\\n     * @param _from     The address to burn tokens from\\r\\n     * @param _ids      Array of token ids to burn\\r\\n     * @param _amounts  Array of the amount to be burned\\r\\n     */\\r\\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n    {\\r\\n        require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n        // Number of mints to execute\\r\\n        uint256 nBurn = _ids.length;\\r\\n\\r\\n        // Executing all minting\\r\\n        for (uint256 i = 0; i < nBurn; i++) {\\r\\n            // Update storage balance\\r\\n            balances[_from][_ids[i]] = balances[_from][_ids[i]]-(_amounts[i]);\\r\\n        }\\r\\n\\r\\n        // Emit batch mint event\\r\\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc64ed6c355053eec5af1c8f2230ddb10342bc6d0d61d4207f84d5e711bcb8cce\"},\"contracts/cardlib/ERC1155Tradable.sol\":{\"content\":\"import \\\"./ERC1155.sol\\\";\\r\\nimport \\\"./ERC1155MintBurn.sol\\\";\\r\\nimport \\\"./ERC1155Metadata.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./MinterRole.sol\\\";\\r\\nimport \\\"./WhitelistAdminRole.sol\\\";\\r\\nimport \\\"./PepemonStats.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title ERC1155Tradable\\r\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address,\\r\\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\\r\\n  like _exists(), name(), symbol(), and totalSupply()\\r\\n */\\r\\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable, MinterRole, WhitelistAdminRole, PepemonStats {\\r\\n\\r\\n    uint256 private _currentTokenID = 0;\\r\\n    mapping(uint256 => address) public creators;\\r\\n    mapping(uint256 => uint256) public tokenSupply;\\r\\n    mapping(uint256 => uint256) public tokenMaxSupply;\\r\\n    // Contract name\\r\\n    string public name;\\r\\n    // Contract symbol\\r\\n    string public symbol;\\r\\n    string public baseMetadataURI;\\r\\n    \\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    )  {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n    function _setBaseMetadataURI(string memory x) internal{\\r\\n        baseMetadataURI = x;\\r\\n    }\\r\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\r\\n        _removeWhitelistAdmin(account);\\r\\n    }\\r\\n    \\r\\n    function removeMinter(address account) public onlyOwner {\\r\\n        _removeMinter(account);\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view returns (string memory) {\\r\\n        require(_exists(_id), \\\"ERC1155Tradable#uri: NONEXISTENT_TOKEN\\\");\\r\\n        return _getUri(_id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total quantity for a token ID\\r\\n     * @param _id uint256 ID of the token to query\\r\\n     * @return amount of token in existence\\r\\n     */\\r\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\r\\n        return tokenSupply[_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the max quantity for a token ID\\r\\n     * @param _id uint256 ID of the token to query\\r\\n     * @return amount of token in existence\\r\\n     */\\r\\n    function maxSupply(uint256 _id) public view returns (uint256) {\\r\\n        return tokenMaxSupply[_id];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new token type and assigns _initialSupply to an address\\r\\n     * @param _maxSupply max supply allowed\\r\\n     * @param _initialSupply Optional amount to supply the first owner\\r\\n     * @param _uri Optional URI for this token type\\r\\n     * @param _data Optional data to pass if receiver is contract\\r\\n     * @return tokenId The newly created token ID\\r\\n     */\\r\\n    function create(\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _initialSupply,\\r\\n        string memory _uri,\\r\\n        bytes memory _data\\r\\n        \\r\\n    ) internal  returns (uint256 tokenId) {\\r\\n        require(_initialSupply <= _maxSupply, \\\"Initial supply cannot be more than max supply\\\");\\r\\n        uint256 _id = _getNextTokenID();\\r\\n        _incrementTokenTypeId();\\r\\n        creators[_id] = msg.sender;\\r\\n\\r\\n        if (bytes(_uri).length > 0) {\\r\\n            emit URI(_uri, _id);\\r\\n        }\\r\\n\\r\\n        if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\\r\\n        tokenSupply[_id] = _initialSupply;\\r\\n        tokenMaxSupply[_id] = _maxSupply;\\r\\n        return _id;\\r\\n    }\\r\\n    function createBattleCard(BattleCardStats calldata _stats,\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _initialSupply,\\r\\n        string calldata _uri,\\r\\n        bytes calldata _data\\r\\n    ) external onlyWhitelistAdmin returns(uint256 tokenId){\\r\\n        uint _id = create(_maxSupply, _initialSupply, _uri, _data);\\r\\n        setBattleCardStats(_id, _stats);\\r\\n        return _id;\\r\\n    }\\r\\n    \\r\\n    function createSupportCard(SupportCardStats calldata _stats,\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _initialSupply,\\r\\n        string calldata _uri,\\r\\n        bytes calldata _data\\r\\n    ) external onlyWhitelistAdmin returns(uint256 tokenId){\\r\\n        uint _id = create(_maxSupply, _initialSupply, _uri, _data);\\r\\n        setSupportCardStats(_id, _stats);\\r\\n        return _id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints some amount of tokens to an address\\r\\n     * @param _to          Address of the future owner of the token\\r\\n     * @param _id          Token ID to mint\\r\\n     * @param _quantity    Amount of tokens to mint\\r\\n     * @param _data        Data to pass if receiver is contract\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _quantity,\\r\\n        bytes memory _data\\r\\n    ) public onlyMinter {\\r\\n        mintPepe(_to, _id, _quantity, _data);\\r\\n    }\\r\\n    function mintPepe(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _quantity,\\r\\n        bytes memory _data\\r\\n    ) internal{\\r\\n        uint256 tokenId = _id;\\r\\n        uint256 newSupply = tokenSupply[tokenId]+_quantity;\\r\\n        require(newSupply <= tokenMaxSupply[tokenId], \\\"Max supply reached\\\");\\r\\n        _mint(_to, _id, _quantity, _data);\\r\\n        tokenSupply[_id] = tokenSupply[_id]+_quantity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\r\\n     * @param _id uint256 ID of the token to query the existence of\\r\\n     * @return bool whether the token exists\\r\\n     */\\r\\n    function _exists(uint256 _id) internal view returns (bool) {\\r\\n        return creators[_id] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculates the next token ID based on value of _currentTokenID\\r\\n     * @return uint256 for the next token ID\\r\\n     */\\r\\n    function _getNextTokenID() private view returns (uint256) {\\r\\n        return _currentTokenID+1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev increments the value of _currentTokenID\\r\\n     */\\r\\n    function _incrementTokenTypeId() private {\\r\\n        _currentTokenID++;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3de70721aa2ded9a3d3dcb9c20097d5b223f666bdec0b10a53cb8869647f0a66\"},\"contracts/cardlib/IERC1155.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155.sol\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\r\\n *\\r\\n * _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\r\\n     */\\r\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\r\\n     * transfers.\\r\\n     */\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] values\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\r\\n     * `approved`.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\r\\n     *\\r\\n     * If an {URI} event was emitted for `id`, the standard\\r\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\r\\n     * returned by {IERC1155MetadataURI-uri}.\\r\\n     */\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `accounts` and `ids` must have the same length.\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `operator` cannot be the caller.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\r\\n     *\\r\\n     * Emits a {TransferSingle} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\r\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\r\\n     *\\r\\n     * Emits a {TransferBatch} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x51f14d303a1fd7f47c5843ae2c300d253296220747c1f283db5a1bfa86bce0dc\"},\"contracts/cardlib/IERC1155Receiver.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155Receiver.sol\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\ninterface IERC1155Receiver is IERC165 {\\r\\n    /**\\r\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\r\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        To accept the transfer, this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n        (i.e. 0xf23a6e61, or its own function selector).\\r\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param id The ID of the token being transferred\\r\\n        @param value The amount of tokens being transferred\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\r\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\r\\n        been updated. To accept the transfer(s), this must return\\r\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n        (i.e. 0xbc197c81, or its own function selector).\\r\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\r\\n        @param from The address which previously owned the token\\r\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\r\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\r\\n        @param data Additional data with no specified format\\r\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\r\\n    */\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\",\"keccak256\":\"0x0d64df7132c022ebcba0e5dc89eb2dbec36f36119626ac5ce381980bb13e4334\"},\"contracts/cardlib/IERC165.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x98694ef0a124681e55a883529ac49ad682d20eb8eb0bf7b68dbb626b348c0ce9\"},\"contracts/cardlib/MinterRole.sol\":{\"content\":\"import \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract MinterRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _minters;\\r\\n\\r\\n    constructor () {\\r\\n        _addMinter(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter(_msgSender()), \\\"MinterRole: caller does not have the Minter role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return _minters.has(account);\\r\\n    }\\r\\n\\r\\n    function addMinter(address account) public onlyMinter {\\r\\n        require (account != address(this));\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    function renounceMinter() public {\\r\\n        _removeMinter(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addMinter(address account) internal {\\r\\n        _minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeMinter(address account) internal {\\r\\n        _minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe3fd624d28b4a4db619bf135f6fba71562b0114b457f04397bbde0f5959225f4\"},\"contracts/cardlib/Ownable.sol\":{\"content\":\"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ca2884674eee0f81a209fb3b5de937fe8efc1ddf5ba11e8db7cfa89dbb316e3\"},\"contracts/cardlib/PepemonStats.sol\":{\"content\":\"import \\\"./WhitelistAdminRole.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\ncontract PepemonStats is WhitelistAdminRole{\\r\\n    \\r\\n    struct BattleCardStats {\\r\\n        uint16 element;\\r\\n        uint16 hp;\\r\\n        uint16 speed;\\r\\n        uint16 intelligence;\\r\\n        uint16 defense;\\r\\n        uint16 attack;\\r\\n        uint16 specialAttack;\\r\\n        uint16 specialDefense;\\r\\n        uint16 level;\\r\\n        string name;\\r\\n        string description;\\r\\n        string ipfsAddr;\\r\\n        string rarity;\\r\\n    }\\r\\n\\r\\n    struct SupportCardStats {\\r\\n        bytes32 currentRoundChanges;\\r\\n        bytes32 nextRoundChanges;\\r\\n        uint256 specialCode;\\r\\n        uint16 modifierNumberOfNextTurns;\\r\\n        bool isOffense;\\r\\n        bool isNormal;\\r\\n        bool isStackable;\\r\\n        string name;\\r\\n        string description;\\r\\n        string ipfsAddr;\\r\\n        string rarity;\\r\\n    }\\r\\n    \\r\\n    struct elementWR{\\r\\n        uint16 weakness;\\r\\n        uint16 resistance;\\r\\n    }\\r\\n\\r\\n    mapping(uint => BattleCardStats) public battleCardStats;\\r\\n    mapping(uint => SupportCardStats) public supportCardStats;\\r\\n    mapping (uint16 => string) public elementDecode;\\r\\n    mapping (uint16 => elementWR) public weakResist;\\r\\n    \\r\\n    constructor(){\\r\\n        elementDecode[1]=\\\"Fire\\\";\\r\\n        elementDecode[2]=\\\"Grass\\\";\\r\\n        elementDecode[3]=\\\"Water\\\";\\r\\n        elementDecode[4]=\\\"Lighting\\\";\\r\\n        elementDecode[5]=\\\"Wind\\\";\\r\\n        elementDecode[6]=\\\"Poison\\\";\\r\\n        elementDecode[7]=\\\"Ghost\\\";\\r\\n        elementDecode[8]=\\\"Fairy\\\";\\r\\n        elementDecode[9]=\\\"Earth\\\";\\r\\n        elementDecode[10]=\\\"Unknown\\\";\\r\\n        weakResist[1] = elementWR(3,2);\\r\\n        weakResist[2] = elementWR(1,3);\\r\\n        weakResist[3] = elementWR(4,1);\\r\\n        weakResist[4] = elementWR(9,5);\\r\\n        weakResist[5] = elementWR(6,9);\\r\\n        weakResist[6] = elementWR(8,2);\\r\\n        weakResist[7] = elementWR(8,6);\\r\\n        weakResist[8] = elementWR(7,8);\\r\\n        weakResist[9] = elementWR(2,7);\\r\\n        weakResist[10] = elementWR(0,0);\\r\\n    }\\r\\n    \\r\\n    function setBattleCardStats(uint id, BattleCardStats calldata x) public onlyWhitelistAdmin{\\r\\n        battleCardStats[id] = x;\\r\\n    }\\r\\n    function setSupportCardStats(uint id, SupportCardStats calldata x) public onlyWhitelistAdmin{\\r\\n        supportCardStats[id] = x;\\r\\n    }\\r\\n    function setWeakResist(uint16 element, elementWR calldata x) public onlyWhitelistAdmin{\\r\\n        weakResist[element] = x;\\r\\n    }\\r\\n    function setElementDecode(uint16 element, string calldata x) public onlyWhitelistAdmin{\\r\\n        elementDecode[element] = x;\\r\\n    }\\r\\n    \\r\\n    //Pos 0-7 = hp, spd, int, def, atk, sp atk, sp def\\r\\n    //Pos 8-13 = same but for opponent\\r\\n    function deconvert(bytes32 num) public pure returns(int16[14] memory){\\r\\n        int16[14] memory arr;\\r\\n        for (uint i =0 ; i < 14; i++){\\r\\n            arr[i] = int16(uint16(bytes2(num << 240))); \\r\\n            num = num >> 16;\\r\\n        } \\r\\n        return arr;\\r\\n    }\\r\\n    function uint2str(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n    \\r\\n    function convert(int16[14] calldata arr) public pure returns (bytes32){\\r\\n        bytes32 num;\\r\\n        for (uint i = 0 ; i < 14; i++ ){\\r\\n            num |= (bytes32(uint256(uint16(arr[i])))<<(16*i));\\r\\n        }\\r\\n        return num;\\r\\n    }\\r\\n    \\r\\n    //spaghetti code ahead :(\\r\\n        \\r\\n    function getSupportType(SupportCardStats memory s) internal pure returns(string memory){\\r\\n        string memory  x =\\\"Defense \\\";\\r\\n        string memory  y=\\\"(Special)\\\";\\r\\n        if (s.isOffense){\\r\\n            x = \\\"Offense \\\";\\r\\n        }\\r\\n        if (s.isNormal){\\r\\n            y = \\\"(Normal)\\\";\\r\\n        }\\r\\n        return string(abi.encodePacked(x, y));\\r\\n    }\\r\\n    function _URIForSupport(uint id) internal view returns (bytes memory){\\r\\n        SupportCardStats memory s = supportCardStats[id];\\r\\n        return abi.encodePacked(\\r\\n        \\\"{\\\\\\\"pool\\\\\\\": {\\\\\\\"name\\\\\\\": \\\\\\\"root\\\\\\\",\\\\\\\"points\\\\\\\": 1},\\\\\\\"external_url\\\\\\\": \\\\\\\"https://pepemon.world/\\\\\\\",\\\\\\\"image\\\\\\\": \\\\\\\"\\\", \\r\\n        s.ipfsAddr, \\r\\n        \\\"\\\\\\\",\\\\\\\"name\\\\\\\": \\\\\\\"\\\",\\r\\n        s.name, \\r\\n        \\\"\\\\\\\",\\\\\\\"description\\\\\\\": \\\\\\\"\\\",\\r\\n        s.description,\\r\\n        \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\": [{\\\\\\\"trait_type\\\\\\\": \\\\\\\"Set\\\\\\\",\\\\\\\"value\\\\\\\": \\\\\\\"Pepemon Support\\\\\\\"},{\\\\\\\"trait_type\\\\\\\": \\\\\\\"Rarity\\\\\\\",\\\\\\\"value\\\\\\\": \\\\\\\"\\\",\\r\\n        s.rarity, \\r\\n        \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\": \\\\\\\"Type\\\\\\\",\\\\\\\"value\\\\\\\": \\\\\\\"\\\", \\r\\n        getSupportType(s), \\r\\n        \\\"\\\\\\\"}]}\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function _URIForBattle(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        uint16 e = b.element;\\r\\n        return abi.encodePacked(\\\"{\\\\\\\"pool\\\\\\\": {\\\\\\\"name\\\\\\\": \\\\\\\"root\\\\\\\",\\\\\\\"points\\\\\\\": 1},\\\\\\\"external_url\\\\\\\": \\\\\\\"https://pepemon.world/\\\\\\\",\\\\\\\"image\\\\\\\": \\\\\\\"\\\",\\r\\n        b.ipfsAddr, \\r\\n        \\\"\\\\\\\",\\\\\\\"name\\\\\\\": \\\\\\\"\\\", \\r\\n        b.name, \\r\\n        \\\"\\\\\\\",\\\\\\\"description\\\\\\\": \\\\\\\"\\\", \\r\\n        b.description, \\r\\n        \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\":[{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Set\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"Pepemon Battle\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Level\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n        uint2str(b.level),\\r\\n        \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Element\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", \\r\\n        elementDecode[e], \\r\\n         \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Weakness\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\");\\r\\n    }\\r\\n    function _URIForBattle3(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        uint16 e = b.element;\\r\\n        return abi.encodePacked(\\r\\n            elementDecode[weakResist[e].weakness], \\r\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Resistance\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\r\\n            elementDecode[weakResist[e].resistance], \\r\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"HP\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n            uint2str(b.hp));\\r\\n    }\\r\\n    function _URIForBattle2(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        return abi.encodePacked(\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Speed\\\\\\\",\\\\\\\"value\\\\\\\":\\\"\\r\\n        , uint2str(b.speed)\\r\\n        , \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Intelligence\\\\\\\",\\\\\\\"value\\\\\\\":\\\"\\r\\n        , uint2str(b.intelligence)\\r\\n        , \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Defense\\\\\\\",\\\\\\\"value\\\\\\\":\\\"\\r\\n        , uint2str(b.defense));\\r\\n    }\\r\\n    function _URIForBattle4(uint id) internal view returns (bytes memory){\\r\\n        BattleCardStats memory b = battleCardStats[id];\\r\\n        return abi.encodePacked(\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Attack\\\\\\\",\\\\\\\"value\\\\\\\":\\\",\\r\\n        uint2str(b.attack),\\r\\n        \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Special Attack\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n        uint2str(b.specialAttack), \\r\\n        \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Special Defense\\\\\\\",\\\\\\\"value\\\\\\\":\\\", \\r\\n        uint2str(b.specialDefense), \\r\\n        \\\"}]}\\\");\\r\\n    }\\r\\n    \\r\\n    function _getUri2(uint id) internal view returns(bytes memory){\\r\\n        if (battleCardStats[id].hp==0){\\r\\n            return _URIForSupport(id);\\r\\n        }else{\\r\\n            return abi.encodePacked(_URIForBattle(id), _URIForBattle3(id), _URIForBattle2(id), _URIForBattle4(id));\\r\\n        }\\r\\n    }\\r\\n    function _getUri(uint id) internal view returns (string memory){\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64\\\\r\\\\n\\\\r\\\\n\\\", Base64.encode(_getUri2(id))));\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0x1182b669ea1a4e3d26f7da76a9003bb18c06c428f66a6878ab6ef8ba8a98280b\"},\"contracts/cardlib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        \\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0644d69c93496f0fbd10568e0cb2df513498c13054ad58a6edfc3cb895347003\",\"license\":\"MIT\"},\"contracts/cardlib/WhitelistAdminRole.sol\":{\"content\":\"import \\\"./Context.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title WhitelistAdminRole\\r\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\r\\n */\\r\\ncontract WhitelistAdminRole is Context {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event WhitelistAdminAdded(address indexed account);\\r\\n    event WhitelistAdminRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _whitelistAdmins;\\r\\n\\r\\n    constructor ()  {\\r\\n        _addWhitelistAdmin(_msgSender());\\r\\n        _addWhitelistAdmin(address(0x104E989923417D765215B48e03baa4aF222f3F6D));\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelistAdmin() {\\r\\n        require(isWhitelistAdmin(_msgSender()), \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\r\\n        return _whitelistAdmins.has(account);\\r\\n    }\\r\\n\\r\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\r\\n        require (account != address(this));\\r\\n        _addWhitelistAdmin(account);\\r\\n    }\\r\\n\\r\\n    function renounceWhitelistAdmin() public {\\r\\n        _removeWhitelistAdmin(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _addWhitelistAdmin(address account) internal {\\r\\n        _whitelistAdmins.add(account);\\r\\n        emit WhitelistAdminAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeWhitelistAdmin(address account) internal {\\r\\n        _whitelistAdmins.remove(account);\\r\\n        emit WhitelistAdminRemoved(account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8a1e35b8175eb5d5c923b192fad2fe5b05bed1fb3c1a286b38eecadfc8fb59e5\"}},\"version\":1}",
  "bytecode": "0x608060405260006009553480156200001657600080fd5b506040518060400160405280601481526020017f506570656d6f6e426174746c65466163746f72790000000000000000000000008152506040518060400160405280600a81526020016950455045424154544c4560b01b8152506200008a620000846200080360201b60201c565b62000807565b620000953362000859565b620000a033620008ab565b620000bf73104e989923417d765215b48e03baa4af222f3f6d620008ab565b6040805180820190915260048152634669726560e01b6020808301918252600160005260079052905162000115917fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8289162000a1f565b50604080518082019091526005815264477261737360d81b602080830191825260026000526007905290516200016d917fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d9162000a1f565b506040805180820190915260058152642bb0ba32b960d91b60208083019182526003600052600790529051620001c5917f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c69162000a1f565b506040805180820190915260088152674c69676874696e6760c01b6020808301918252600460005260079052905162000220917fb805995a7ec585a251200611a61d179cfd7fb105e1ab17dc415a7336783786f79162000a1f565b5060408051808201909152600481526315da5b9960e21b6020808301918252600560005260079052905162000277917fbcdda56b5d08466ec462cbbe0adfa57cb0a15fcc8940ef68f702f21b787bc9359162000a1f565b50604080518082019091526006808252652837b4b9b7b760d11b602080840191825260009290925260079091529051620002d3917f55c5b153ab560fcde54a63b18c7f53d75501706907cef8767fbded79ab9997c79162000a1f565b5060408051808201909152600581526411da1bdcdd60da1b602080830191825260076000819052905290516200032b917fb7c49cceb9f85950584035457a41ebbd8cf93b9b612733ad25aa9731ac43aad69162000a1f565b50604080518082019091526005815264466169727960d81b6020808301918252600860005260079052905162000383917f4b1bf46c9f1bd48ff8274d40bad76a6615cb6c59a637d451a3994194b2db86be9162000a1f565b5060408051808201909152600581526408ac2e4e8d60db1b60208083019182526009600052600790529051620003db917ff1f3e9c34634a546b3672c043f73844d83d55591bbe61b8e7e3a72bca1a812bf9162000a1f565b50604080518082019091526007808252662ab735b737bbb760c91b6020808401918252600a60005291909152905162000436917f3ed157e83ab1bb1f6b7b3760b3368106283d4e15d1f1b08e20d06576445a99949162000a1f565b5060408051808201825260038082526002602080840182815260016000818152600880855296517fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f8054945161ffff92831663ffffffff1996871617620100009184168202179091558951808b018b528481528087018981528885528a885290517f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041805492519185169288169290921790841683021790558951808b018b526004808252818801958652988452898752517f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d2645580549551918416958716959095179083168202179093558851808a018a52600980825260058288018181529985528a885291517f9321edea6e3be4df59a344b401fab4f888b556fda1f954244cff9204bad624b880549a519185169a88169a909a179084168602179098558951808b018b5260068082528188018a81529285528a885290517f91238f30f286c9a1c6e901c4eda3b214c381c846e3dbe48df95c21488e8e1fdb80549351918516938816939093179084168602179091558951808b018b528981528087018881528285528a885290517f13acf3fc7bed94759963f076d5d3443d88732026bffc8253bdf4a6e65f21ecc5805492519185169288169290921790841686021790558951808b018b5289815280870191825260078085528a885290517f24cd397636bedc6cf9b490d0edd57c769c19b367fb7d5c2344ae1ddc7d21c14480549351918516938816939093179084168602179091558951808b018b528181528087018a81528a85528a885290517fe4c2e8be66af8dd2d277000f4f830a10546f8b14e45cd850b875c98ba0f0d2cd805492519185169288169290921790841686021790558951808b018b5296875286860190815296825287855294517f82c9e868e45873bb5a4f47c09e14a12f6a6314e13aabd611e4374762bb4e8b3680549751918716978516979097179086168302179095558651808801909752848752868301858152600a90955294825294517f586689db7536874b78a6eac0f58556a56a106985743f7c16a699b27bb02f88bd805494519184169490961693909317929091169092021790915582516200078f91600d919085019062000a1f565b508051620007a590600e90602084019062000a1f565b505050620007cc6040518060600160405280602281526020016200604260229139620008fd565b6040518060600160405280602b815260200162006017602b91398051620007fc9160109160209091019062000a1f565b5062000b02565b3390565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620008748160036200091660201b62001a2b1790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b620008c68160046200091660201b62001a2b1790919060201c565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b80516200091290600f90602084019062000a1f565b5050565b6200092282826200099a565b15620009755760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620009ff5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084016200096c565b506001600160a01b03166000908152602091909152604090205460ff1690565b82805462000a2d9062000ac5565b90600052602060002090601f01602090048101928262000a51576000855562000a9c565b82601f1062000a6c57805160ff191683800117855562000a9c565b8280016001018555821562000a9c579182015b8281111562000a9c57825182559160200191906001019062000a7f565b5062000aaa92915062000aae565b5090565b5b8082111562000aaa576000815560010162000aaf565b600181811c9082168062000ada57607f821691505b6020821081141562000afc57634e487b7160e01b600052602260045260246000fd5b50919050565b6155058062000b126000396000f3fe608060405234801561001057600080fd5b50600436106102935760003560e01c80637e518ec811610167578063aa271e1a116100ce578063e8a3d48511610087578063e8a3d48514610690578063e985e9c514610698578063eaaaada3146106ab578063f242432a146106be578063f2fde38b146106d1578063f5298aca146106e457600080fd5b8063aa271e1a146105fb578063bb5f747b1461060e578063bbe79cb514610621578063bd85b03914610634578063bdf7a8e614610654578063cd53d08e1461066757600080fd5b806394dd28691161012057806394dd28691461059f57806395d89b41146105b2578063983b2d56146105ba57806398650275146105cd578063a11bf921146105d5578063a22cb465146105e857600080fd5b80637e518ec8146104f55780637ed7f93b146105085780637faef6fd14610534578063869f7594146105475780638da5cb5b14610567578063938e3d7b1461058c57600080fd5b80633ef009ef1161020b5780636cc43e05116101c45780636cc43e05146104585780636d6055cd1461046b578063715018a6146104b4578063731133e9146104bc5780637362d9c8146104cf5780637ad67d60146104e257600080fd5b80633ef009ef146103d85780634c5a628c146103eb5780634e1273f4146103f35780634e84f9bb146104135780635b2bd79e1461043d5780636897e9741461044557600080fd5b80631390053c1161025d5780631390053c1461034a5780632693ebf21461036a5780632eb2c2d61461038a5780633092afd51461039f5780633debfaca146103b25780633df39242146103c557600080fd5b80624221f014610298578062fdd58e146102cb57806301ffc9a7146102ff57806306fdde03146103225780630e89341c14610337575b600080fd5b6102b86102a6366004613fad565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b6102b86102d9366004613e62565b6001600160a01b0391909116600090815260208181526040808320938352929052205490565b61031261030d366004613fc6565b6106f7565b60405190151581526020016102c2565b61032a61073d565b6040516102c29190614c25565b61032a610345366004613fad565b6107cb565b61035d610358366004613fad565b610855565b6040516102c29190614b10565b6102b8610378366004613fad565b600b6020526000908152604090205481565b61039d610398366004613d1e565b6108b7565b005b61039d6103ad366004613cd0565b6109c6565b6102b86103c0366004614112565b6109fc565b6102b86103d3366004613f82565b610ab2565b61039d6103e63660046142b6565b610b0e565b61039d610b70565b610406610401366004613f1f565b610b7b565b6040516102c29190614b45565b610426610421366004613fad565b610cd5565b6040516102c29b9a99989796959493929190614b86565b61032a610f5e565b61039d610453366004613cd0565b610f6b565b61039d6104663660046141c1565b610f9e565b610499610479366004614150565b60086020526000908152604090205461ffff808216916201000090041682565b6040805161ffff9384168152929091166020830152016102c2565b61039d610fe2565b61039d6104ca366004613ebf565b611016565b61039d6104dd366004613cd0565b611047565b61039d6104f036600461416d565b61108b565b61039d610503366004614023565b6110ce565b61051b610516366004613fad565b6110fc565b6040516102c29d9c9b9a99989796959493929190614d1b565b61039d61054236600461427a565b6113a3565b6102b8610555366004613fad565b6000908152600c602052604090205490565b6002546001600160a01b03165b6040516001600160a01b0390911681526020016102c2565b61039d61059a366004614023565b6113e2565b61039d6105ad366004613fad565b61141e565b61032a611460565b61039d6105c8366004613cd0565b61146d565b61039d6114b1565b61039d6105e336600461423e565b6114ba565b61039d6105f6366004613e2b565b6114f9565b610312610609366004613cd0565b611565565b61031261061c366004613cd0565b611572565b6102b861062f36600461406b565b61157f565b6102b8610642366004613fad565b6000908152600b602052604090205490565b61039d610662366004614202565b611629565b610574610675366004613fad565b600a602052600090815260409020546001600160a01b031681565b61032a61171b565b6103126106a6366004613ceb565b6117ad565b61032a6106b9366004614150565b6117db565b61039d6106cc366004613dc7565b6117f4565b61039d6106df366004613cd0565b6118f2565b61039d6106f2366004613e8c565b61198a565b60006001600160e01b031982166301ffc9a760e01b148061072857506001600160e01b03198216636cdb3d1360e11b145b1561073557506001919050565b506000919050565b600d805461074a9061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546107769061500a565b80156107c35780601f10610798576101008083540402835291602001916107c3565b820191906000526020600020905b8154815290600101906020018083116107a657829003601f168201915b505050505081565b6000818152600a60205260409020546060906001600160a01b03166108465760405162461bcd60e51b815260206004820152602660248201527f455243313135355472616461626c65237572693a204e4f4e4558495354454e546044820152652faa27a5a2a760d11b60648201526084015b60405180910390fd5b61084f82611aa7565b92915050565b61085d6139c2565b6108656139c2565b60005b600e8110156108b05761ffff84168282600e81106108885761088861509a565b600192830b90920b6020909202015260109390931c92806108a88161503f565b915050610868565b5092915050565b336001600160a01b03861614806108d357506108d385336117ad565b6109375760405162461bcd60e51b815260206004820152602f60248201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960448201526e272b20a624a22fa7a822a920aa27a960891b606482015260840161083d565b6001600160a01b0384166109a65760405162461bcd60e51b815260206004820152603060248201527f45524331313535237361666542617463685472616e7366657246726f6d3a204960448201526f13959053125117d49150d2541251539560821b606482015260840161083d565b6109b285858585611ae0565b6109bf8585858585611d58565b5050505050565b6002546001600160a01b031633146109f05760405162461bcd60e51b815260040161083d90614c88565b6109f981611e81565b50565b6000610a0733611572565b610a235760405162461bcd60e51b815260040161083d90614cbd565b6000610a9a888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250611ec392505050565b9050610aa6818a6113a3565b98975050505050505050565b60008060005b600e8110156108b057610acc816010614ea3565b8482600e8110610ade57610ade61509a565b602002016020810190610af19190614000565b61ffff16901b919091179080610b068161503f565b915050610ab8565b610b1733611565565b610b335760405162461bcd60e51b815260040161083d90614c38565b825b828111610b6a57610b588282600160405180602001604052806000815250611fd7565b80610b628161503f565b915050610b35565b50505050565b610b793361208a565b565b60608151835114610be35760405162461bcd60e51b815260206004820152602c60248201527f455243313135352362616c616e63654f6642617463683a20494e56414c49445f60448201526b082a4a482b2be988a9c8ea8960a31b606482015260840161083d565b600083516001600160401b03811115610bfe57610bfe6150b0565b604051908082528060200260200182016040528015610c27578160200160208202803683370190505b50905060005b8451811015610ccd57600080868381518110610c4b57610c4b61509a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110610c8757610c8761509a565b6020026020010151815260200190815260200160002054828281518110610cb057610cb061509a565b602090810291909101015280610cc58161503f565b915050610c2d565b509392505050565b6006602052600090815260409020805460018201546002830154600384015460048501805494959394929361ffff83169360ff62010000850481169463010000008104821694600160201b9091049091169291610d319061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5d9061500a565b8015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b505050505090806005018054610dbf9061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054610deb9061500a565b8015610e385780601f10610e0d57610100808354040283529160200191610e38565b820191906000526020600020905b815481529060010190602001808311610e1b57829003601f168201915b505050505090806006018054610e4d9061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e799061500a565b8015610ec65780601f10610e9b57610100808354040283529160200191610ec6565b820191906000526020600020905b815481529060010190602001808311610ea957829003601f168201915b505050505090806007018054610edb9061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f079061500a565b8015610f545780601f10610f2957610100808354040283529160200191610f54565b820191906000526020600020905b815481529060010190602001808311610f3757829003601f168201915b505050505090508b565b600f805461074a9061500a565b6002546001600160a01b03163314610f955760405162461bcd60e51b815260040161083d90614c88565b6109f98161208a565b610fa733611572565b610fc35760405162461bcd60e51b815260040161083d90614cbd565b61ffff821660009081526008602052604090208190610b6a8282615416565b6002546001600160a01b0316331461100c5760405162461bcd60e51b815260040161083d90614c88565b610b7960006120cc565b61101f33611565565b61103b5760405162461bcd60e51b815260040161083d90614c38565b610b6a84848484611fd7565b61105033611572565b61106c5760405162461bcd60e51b815260040161083d90614cbd565b6001600160a01b03811630141561108257600080fd5b6109f98161211e565b61109433611572565b6110b05760405162461bcd60e51b815260040161083d90614cbd565b61ffff83166000908152600760205260409020610b6a9083836139e1565b6110d733611572565b6110f35760405162461bcd60e51b815260040161083d90614cbd565b6109f981612160565b6005602052600090815260409020805460018201805461ffff80841694620100008504821694600160201b8104831694600160301b8204841694600160401b8304851694600160501b8404811694600160601b8504821694600160701b8104831694600160801b909104909216929091906111769061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546111a29061500a565b80156111ef5780601f106111c4576101008083540402835291602001916111ef565b820191906000526020600020905b8154815290600101906020018083116111d257829003601f168201915b5050505050908060020180546112049061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546112309061500a565b801561127d5780601f106112525761010080835404028352916020019161127d565b820191906000526020600020905b81548152906001019060200180831161126057829003601f168201915b5050505050908060030180546112929061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546112be9061500a565b801561130b5780601f106112e05761010080835404028352916020019161130b565b820191906000526020600020905b8154815290600101906020018083116112ee57829003601f168201915b5050505050908060040180546113209061500a565b80601f016020809104026020016040519081016040528092919081815260200182805461134c9061500a565b80156113995780601f1061136e57610100808354040283529160200191611399565b820191906000526020600020905b81548152906001019060200180831161137c57829003601f168201915b505050505090508d565b6113ac33611572565b6113c85760405162461bcd60e51b815260040161083d90614cbd565b60008281526006602052604090208190610b6a82826152ee565b6113eb33611572565b6114075760405162461bcd60e51b815260040161083d90614cbd565b805161141a906010906020840190613a65565b5050565b61142733611572565b6114435760405162461bcd60e51b815260040161083d90614cbd565b6000908152600b6020908152604080832054600c90925290912055565b600e805461074a9061500a565b61147633611565565b6114925760405162461bcd60e51b815260040161083d90614c38565b6001600160a01b0381163014156114a857600080fd5b6109f981612173565b610b7933611e81565b6114c333611572565b6114df5760405162461bcd60e51b815260040161083d90614cbd565b60008281526005602052604090208190610b6a82826150e0565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600061084f6003836121b5565b600061084f6004836121b5565b600061158a33611572565b6115a65760405162461bcd60e51b815260040161083d90614cbd565b600061161d888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250611ec392505050565b9050610aa6818a6114ba565b61163233611565565b61164e5760405162461bcd60e51b815260040161083d90614c38565b80516000838152600b6020908152604080832054600c909252909120546116759190614ec2565b10156116c35760405162461bcd60e51b815260206004820152601a60248201527f43616e74206d696e742061626f7665206d617820737570706c79000000000000604482015260640161083d565b60005b8151811015611716576117048282815181106116e4576116e461509a565b602002602001015184600160405180602001604052806000815250611016565b8061170e8161503f565b9150506116c6565b505050565b60606010805461172a9061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546117569061500a565b80156117a35780601f10611778576101008083540402835291602001916117a3565b820191906000526020600020905b81548152906001019060200180831161178657829003601f168201915b5050505050905090565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6007602052600090815260409020805461074a9061500a565b336001600160a01b0386161480611810575061181085336117ad565b61186f5760405162461bcd60e51b815260206004820152602a60248201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c49604482015269222fa7a822a920aa27a960b11b606482015260840161083d565b6001600160a01b0384166118d95760405162461bcd60e51b815260206004820152602b60248201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960448201526a1117d49150d2541251539560aa1b606482015260840161083d565b6118e585858585612238565b6109bf8585858585612314565b6002546001600160a01b0316331461191c5760405162461bcd60e51b815260040161083d90614c88565b6001600160a01b0381166119815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161083d565b6109f9816120cc565b61199333611565565b6119af5760405162461bcd60e51b815260040161083d90614c38565b6001600160a01b038316600090815260208181526040808320858452909152902054811115611a205760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206275726e206d6f7265207468616e2061646472657320686173604482015260640161083d565b611716838383612435565b611a3582826121b5565b15611a825760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015260640161083d565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6060611aba611ab5836124c6565b61252b565b604051602001611aca9190614a34565b6040516020818303038152906040529050919050565b8051825114611b4f5760405162461bcd60e51b815260206004820152603560248201527f45524331313535235f7361666542617463685472616e7366657246726f6d3a206044820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b606482015260840161083d565b815160005b81811015611cf957828181518110611b6e57611b6e61509a565b6020026020010151600080886001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110611bae57611bae61509a565b6020026020010151815260200190815260200160002054611bcf9190614ec2565b600080886001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110611c0757611c0761509a565b6020026020010151815260200190815260200160002081905550828181518110611c3357611c3361509a565b6020026020010151600080876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110611c7357611c7361509a565b6020026020010151815260200190815260200160002054611c949190614e77565b600080876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110611ccc57611ccc61509a565b60200260200101518152602001908152602001600020819055508080611cf19061503f565b915050611b54565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d49929190614b58565b60405180910390a45050505050565b6001600160a01b0384163b156109bf5760405163bc197c8160e01b81526000906001600160a01b0386169063bc197c8190611d9f9033908a90899089908990600401614a79565b602060405180830381600087803b158015611db957600080fd5b505af1158015611dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df19190613fe3565b90506001600160e01b0319811663bc197c8160e01b14611e795760405162461bcd60e51b815260206004820152603f60248201527f45524331313535235f63616c6c6f6e455243313135354261746368526563656960448201527f7665643a20494e56414c49445f4f4e5f524543454956455f4d45535341474500606482015260840161083d565b505050505050565b611e8c600382612690565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b600084841115611f2b5760405162461bcd60e51b815260206004820152602d60248201527f496e697469616c20737570706c792063616e6e6f74206265206d6f726520746860448201526c616e206d617820737570706c7960981b606482015260840161083d565b6000611f35612712565b9050611f3f612728565b6000818152600a6020526040902080546001600160a01b03191633179055835115611f9d57807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b85604051611f949190614c25565b60405180910390a25b8415611faf57611faf3382878661273f565b6000818152600b60209081526040808320889055600c90915290208690559050949350505050565b6000838152600b6020526040812054849190611ff4908590614e77565b6000838152600c602052604090205490915081111561204a5760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b604482015260640161083d565b6120568686868661273f565b6000858152600b6020526040902054612070908590614e77565b6000958652600b6020526040909520949094555050505050565b612095600482612690565b6040516001600160a01b038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612129600482611a2b565b6040516001600160a01b038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b805161141a90600f906020840190613a65565b61217e600382611a2b565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b60006001600160a01b0382166122185760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b606482015260840161083d565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b038416600090815260208181526040808320858452909152902054612265908290614ec2565b6001600160a01b03808616600090815260208181526040808320878452825280832094909455918616815280825282812085825290915220546122a9908290614e77565b6001600160a01b0384811660008181526020818152604080832088845282529182902094909455805186815293840185905290929187169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b6001600160a01b0384163b156109bf5760405163f23a6e6160e01b81526000906001600160a01b0386169063f23a6e619061235b9033908a90899089908990600401614acb565b602060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ad9190613fe3565b90506001600160e01b0319811663f23a6e6160e01b14611e795760405162461bcd60e51b815260206004820152603a60248201527f45524331313535235f63616c6c6f6e4552433131353552656365697665643a2060448201527f494e56414c49445f4f4e5f524543454956455f4d455353414745000000000000606482015260840161083d565b6001600160a01b038316600090815260208181526040808320858452909152902054612462908290614ec2565b6001600160a01b0384166000818152602081815260408083208784528252808320949094558351868152908101859052909233917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b60008181526005602052604090205460609062010000900461ffff166124ef5761084f826127db565b6124f882612af6565b61250183612e55565b61250a846131a0565b612513856134d7565b604051602001611aca9493929190614452565b919050565b80516060908061254b575050604080516020810190915260008152919050565b6000600361255a836002614e77565b6125649190614e8f565b61256f906004614ea3565b9050600061257e826020614e77565b6001600160401b03811115612595576125956150b0565b6040519080825280601f01601f1916602001820160405280156125bf576020820181803683370190505b5090506000604051806060016040528060408152602001615490604091399050600181016020830160005b8681101561264b576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016125ea565b506003860660018114612665576002811461267657612682565b613d3d60f01b600119830152612682565b603d60f81b6000198301525b505050918152949350505050565b61269a82826121b5565b6126f05760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b606482015260840161083d565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b600060095460016127239190614e77565b905090565b600980549060006127388361503f565b9190505550565b6001600160a01b03841660009081526020818152604080832086845290915290205461276c908390614e77565b6001600160a01b03851660008181526020818152604080832088845282528083209490945583518781529081018690529192909133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b6a600085858585612314565b600081815260066020908152604080832081516101608101835281548152600182015493810193909352600281015491830191909152600381015461ffff811660608481019190915260ff620100008304811615156080860152630100000083048116151560a0860152600160201b909204909116151560c0840152600482018054919493929160e0840191906128719061500a565b80601f016020809104026020016040519081016040528092919081815260200182805461289d9061500a565b80156128ea5780601f106128bf576101008083540402835291602001916128ea565b820191906000526020600020905b8154815290600101906020018083116128cd57829003601f168201915b505050505081526020016005820180546129039061500a565b80601f016020809104026020016040519081016040528092919081815260200182805461292f9061500a565b801561297c5780601f106129515761010080835404028352916020019161297c565b820191906000526020600020905b81548152906001019060200180831161295f57829003601f168201915b505050505081526020016006820180546129959061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546129c19061500a565b8015612a0e5780601f106129e357610100808354040283529160200191612a0e565b820191906000526020600020905b8154815290600101906020018083116129f157829003601f168201915b50505050508152602001600782018054612a279061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612a539061500a565b8015612aa05780601f10612a7557610100808354040283529160200191612aa0565b820191906000526020600020905b815481529060010190602001808311612a8357829003601f168201915b50505050508152505090508061012001518160e00151826101000151836101400151612acb8561380e565b604051602001612adf9594939291906146e6565b604051602081830303815290604052915050919050565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b9093049093166101008401526001810180549294939261012084019190612bae9061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612bda9061500a565b8015612c275780601f10612bfc57610100808354040283529160200191612c27565b820191906000526020600020905b815481529060010190602001808311612c0a57829003601f168201915b50505050508152602001600282018054612c409061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612c6c9061500a565b8015612cb95780601f10612c8e57610100808354040283529160200191612cb9565b820191906000526020600020905b815481529060010190602001808311612c9c57829003601f168201915b50505050508152602001600382018054612cd29061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612cfe9061500a565b8015612d4b5780601f10612d2057610100808354040283529160200191612d4b565b820191906000526020600020905b815481529060010190602001808311612d2e57829003601f168201915b50505050508152602001600482018054612d649061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612d909061500a565b8015612ddd5780601f10612db257610100808354040283529160200191612ddd565b820191906000526020600020905b815481529060010190602001808311612dc057829003601f168201915b5050505050815250509050600081600001519050816101600151826101200151836101400151612e1585610100015161ffff166138bd565b61ffff85166000908152600760209081526040918290209151612e3d96959493929101614569565b60405160208183030381529060405292505050919050565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b9093049093166101008401526001810180549294939261012084019190612f0d9061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612f399061500a565b8015612f865780601f10612f5b57610100808354040283529160200191612f86565b820191906000526020600020905b815481529060010190602001808311612f6957829003601f168201915b50505050508152602001600282018054612f9f9061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054612fcb9061500a565b80156130185780601f10612fed57610100808354040283529160200191613018565b820191906000526020600020905b815481529060010190602001808311612ffb57829003601f168201915b505050505081526020016003820180546130319061500a565b80601f016020809104026020016040519081016040528092919081815260200182805461305d9061500a565b80156130aa5780601f1061307f576101008083540402835291602001916130aa565b820191906000526020600020905b81548152906001019060200180831161308d57829003601f168201915b505050505081526020016004820180546130c39061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546130ef9061500a565b801561313c5780601f106131115761010080835404028352916020019161313c565b820191906000526020600020905b81548152906001019060200180831161311f57829003601f168201915b505050919092525050815161ffff8082166000908152600860209081526040808320548085168452600783528184206201000090910485168452922090860151959650929490935061318e91166138bd565b604051602001612e3d939291906144d8565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b90930490931661010084015260018101805492949392610120840191906132589061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546132849061500a565b80156132d15780601f106132a6576101008083540402835291602001916132d1565b820191906000526020600020905b8154815290600101906020018083116132b457829003601f168201915b505050505081526020016002820180546132ea9061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546133169061500a565b80156133635780601f1061333857610100808354040283529160200191613363565b820191906000526020600020905b81548152906001019060200180831161334657829003601f168201915b5050505050815260200160038201805461337c9061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546133a89061500a565b80156133f55780601f106133ca576101008083540402835291602001916133f5565b820191906000526020600020905b8154815290600101906020018083116133d857829003601f168201915b5050505050815260200160048201805461340e9061500a565b80601f016020809104026020016040519081016040528092919081815260200182805461343a9061500a565b80156134875780601f1061345c57610100808354040283529160200191613487565b820191906000526020600020905b81548152906001019060200180831161346a57829003601f168201915b50505050508152505090506134a3816040015161ffff166138bd565b6134b4826060015161ffff166138bd565b6134c5836080015161ffff166138bd565b604051602001612adf93929190614958565b600081815260056020908152604080832081516101a081018352815461ffff8082168352620100008204811695830195909552600160201b8104851693820193909352600160301b83048416606082810191909152600160401b840485166080830152600160501b8404851660a0830152600160601b8404851660c0830152600160701b8404851660e0830152600160801b909304909316610100840152600181018054929493926101208401919061358f9061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546135bb9061500a565b80156136085780601f106135dd57610100808354040283529160200191613608565b820191906000526020600020905b8154815290600101906020018083116135eb57829003601f168201915b505050505081526020016002820180546136219061500a565b80601f016020809104026020016040519081016040528092919081815260200182805461364d9061500a565b801561369a5780601f1061366f5761010080835404028352916020019161369a565b820191906000526020600020905b81548152906001019060200180831161367d57829003601f168201915b505050505081526020016003820180546136b39061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546136df9061500a565b801561372c5780601f106137015761010080835404028352916020019161372c565b820191906000526020600020905b81548152906001019060200180831161370f57829003601f168201915b505050505081526020016004820180546137459061500a565b80601f01602080910402602001604051908101604052809291908181526020018280546137719061500a565b80156137be5780601f10613793576101008083540402835291602001916137be565b820191906000526020600020905b8154815290600101906020018083116137a157829003601f168201915b50505050508152505090506137da8160a0015161ffff166138bd565b6137eb8260c0015161ffff166138bd565b6137fc8360e0015161ffff166138bd565b604051602001612adf93929190614859565b604080518082018252600881526702232b332b739b2960c51b60208083019190915282518084019093526009835268285370656369616c2960b81b908301526080830151606092901561387f5760405180604001604052806008815260200167027b33332b739b2960c51b81525091505b8360a00151156138aa5750604080518082019091526008815267284e6f726d616c2960c01b60208201525b8181604051602001612e3d9291906144a9565b6060816138e15750506040805180820190915260018152600360fc1b602082015290565b8160005b811561390b57806138f58161503f565b91506139049050600a83614e8f565b91506138e5565b6000816001600160401b03811115613925576139256150b0565b6040519080825280601f01601f19166020018201604052801561394f576020820181803683370190505b5090505b84156139ba57613964600183614ec2565b9150613971600a8661505a565b61397c906030614e77565b60f81b8183815181106139915761399161509a565b60200101906001600160f81b031916908160001a9053506139b3600a86614e8f565b9450613953565b949350505050565b604051806101c00160405280600e906020820280368337509192915050565b8280546139ed9061500a565b90600052602060002090601f016020900481019282613a0f5760008555613a55565b82601f10613a285782800160ff19823516178555613a55565b82800160010185558215613a55579182015b82811115613a55578235825591602001919060010190613a3a565b50613a61929150613ad9565b5090565b828054613a719061500a565b90600052602060002090601f016020900481019282613a935760008555613a55565b82601f10613aac57805160ff1916838001178555613a55565b82800160010185558215613a55579182015b82811115613a55578251825591602001919060010190613abe565b5b80821115613a615760008155600101613ada565b60006001600160401b03831115613b0757613b076150b0565b613b1a601f8401601f1916602001614e24565b9050828152838383011115613b2e57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461252657600080fd5b600082601f830112613b6d57600080fd5b81356020613b82613b7d83614e54565b614e24565b80838252828201915082860187848660051b8901011115613ba257600080fd5b60005b85811015613bc857613bb682613b45565b84529284019290840190600101613ba5565b5090979650505050505050565b600082601f830112613be657600080fd5b81356020613bf6613b7d83614e54565b80838252828201915082860187848660051b8901011115613c1657600080fd5b60005b85811015613bc857813584529284019290840190600101613c19565b60008083601f840112613c4757600080fd5b5081356001600160401b03811115613c5e57600080fd5b602083019150836020828501011115613c7657600080fd5b9250929050565b600082601f830112613c8e57600080fd5b613c9d83833560208501613aee565b9392505050565b60006101a08284031215613cb757600080fd5b50919050565b60006101608284031215613cb757600080fd5b600060208284031215613ce257600080fd5b613c9d82613b45565b60008060408385031215613cfe57600080fd5b613d0783613b45565b9150613d1560208401613b45565b90509250929050565b600080600080600060a08688031215613d3657600080fd5b613d3f86613b45565b9450613d4d60208701613b45565b935060408601356001600160401b0380821115613d6957600080fd5b613d7589838a01613bd5565b94506060880135915080821115613d8b57600080fd5b613d9789838a01613bd5565b93506080880135915080821115613dad57600080fd5b50613dba88828901613c7d565b9150509295509295909350565b600080600080600060a08688031215613ddf57600080fd5b613de886613b45565b9450613df660208701613b45565b9350604086013592506060860135915060808601356001600160401b03811115613e1f57600080fd5b613dba88828901613c7d565b60008060408385031215613e3e57600080fd5b613e4783613b45565b91506020830135613e578161545b565b809150509250929050565b60008060408385031215613e7557600080fd5b613e7e83613b45565b946020939093013593505050565b600080600060608486031215613ea157600080fd5b613eaa84613b45565b95602085013595506040909401359392505050565b60008060008060808587031215613ed557600080fd5b613ede85613b45565b9350602085013592506040850135915060608501356001600160401b03811115613f0757600080fd5b613f1387828801613c7d565b91505092959194509250565b60008060408385031215613f3257600080fd5b82356001600160401b0380821115613f4957600080fd5b613f5586838701613b5c565b93506020850135915080821115613f6b57600080fd5b50613f7885828601613bd5565b9150509250929050565b60006101c0808385031215613f9657600080fd5b838184011115613fa557600080fd5b509092915050565b600060208284031215613fbf57600080fd5b5035919050565b600060208284031215613fd857600080fd5b8135613c9d81615469565b600060208284031215613ff557600080fd5b8151613c9d81615469565b60006020828403121561401257600080fd5b81358060010b8114613c9d57600080fd5b60006020828403121561403557600080fd5b81356001600160401b0381111561404b57600080fd5b8201601f8101841361405c57600080fd5b6139ba84823560208401613aee565b600080600080600080600060a0888a03121561408657600080fd5b87356001600160401b038082111561409d57600080fd5b6140a98b838c01613ca4565b985060208a0135975060408a0135965060608a01359150808211156140cd57600080fd5b6140d98b838c01613c35565b909650945060808a01359150808211156140f257600080fd5b506140ff8a828b01613c35565b989b979a50959850939692959293505050565b600080600080600080600060a0888a03121561412d57600080fd5b87356001600160401b038082111561414457600080fd5b6140a98b838c01613cbd565b60006020828403121561416257600080fd5b8135613c9d8161547f565b60008060006040848603121561418257600080fd5b833561418d8161547f565b925060208401356001600160401b038111156141a857600080fd5b6141b486828701613c35565b9497909650939450505050565b60008082840360608112156141d557600080fd5b83356141e08161547f565b92506040601f19820112156141f457600080fd5b506020830190509250929050565b6000806040838503121561421557600080fd5b8235915060208301356001600160401b0381111561423257600080fd5b613f7885828601613b5c565b6000806040838503121561425157600080fd5b8235915060208301356001600160401b0381111561426e57600080fd5b613f7885828601613ca4565b6000806040838503121561428d57600080fd5b8235915060208301356001600160401b038111156142aa57600080fd5b613f7885828601613cbd565b6000806000606084860312156142cb57600080fd5b83359250602084013591506142e260408501613b45565b90509250925092565b600081518084526020808501945080840160005b8381101561431b578151875295820195908201906001016142ff565b509495945050505050565b6000815180845261433e816020860160208601614fde565b601f01601f19169290920160200192915050565b60008151614364818560208601614fde565b9290920192915050565b6000815461437b8161500a565b6001828116801561439357600181146143a4576143d3565b60ff198416875282870194506143d3565b8560005260208060002060005b858110156143ca5781548a8201529084019082016143b1565b50505082870194505b5050505092915050565b7f7b22706f6f6c223a207b226e616d65223a2022726f6f74222c22706f696e747381527f223a20317d2c2265787465726e616c5f75726c223a202268747470733a2f2f7060208201527f6570656d6f6e2e776f726c642f222c22696d616765223a202200000000000000604082015260590190565b60008551614464818460208a01614fde565b855190830190614478818360208a01614fde565b855191019061448b818360208901614fde565b845191019061449e818360208801614fde565b019695505050505050565b600083516144bb818460208801614fde565b8351908301906144cf818360208801614fde565b01949350505050565b60006144e4828661436e565b7f227d2c7b2274726169745f74797065223a22526573697374616e6365222c227681526630b63ab2911d1160c91b6020820152614524602782018661436e565b90507f227d2c7b2274726169745f74797065223a224850222c2276616c7565223a00008152835161455c81601e840160208801614fde565b01601e0195945050505050565b6000614574826143dd565b8751614584818360208c01614fde565b6a1116113730b6b2911d101160a91b910190815286516145ab81600b840160208b01614fde565b711116113232b9b1b934b83a34b7b7111d101160711b600b929091019182015285516145de81601d840160208a01614fde565b7f222c2261747472696275746573223a5b7b2274726169745f74797065223a2253601d92909101918201527f6574222c2276616c7565223a22506570656d6f6e20426174746c65227d2c7b22603d8201527f74726169745f74797065223a224c6576656c222c2276616c7565223a00000000605d8201528451614668816079840160208901614fde565b7f7d2c7b2274726169745f74797065223a22456c656d656e74222c2276616c75656079929091019182015262111d1160e91b6099820152610aa66146af609c83018661436e565b7f227d2c7b2274726169745f74797065223a225765616b6e657373222c2276616c8152643ab2911d1160d91b602082015260250190565b60006146f1826143dd565b8751614701818360208c01614fde565b6a1116113730b6b2911d101160a91b9101908152865161472881600b840160208b01614fde565b711116113232b9b1b934b83a34b7b7111d101160711b600b9290910191820152855161475b81601d840160208a01614fde565b7f222c2261747472696275746573223a205b7b2274726169745f74797065223a20601d92909101918201527f22536574222c2276616c7565223a2022506570656d6f6e20537570706f727422603d8201527f7d2c7b2274726169745f74797065223a2022526172697479222c2276616c7565605d82015263111d101160e11b607d82015284516147f2816081840160208901614fde565b61484c61483c6148366081848601017f227d2c7b2274726169745f74797065223a202254797065222c2276616c7565228152621d101160e91b602082015260230190565b87614352565b63227d5d7d60e01b815260040190565b9998505050505050505050565b7f7d2c7b2274726169745f74797065223a2241747461636b222c2276616c7565228152601d60f91b60208201526000845161489b816021850160208901614fde565b7f7d2c7b2274726169745f74797065223a225370656369616c2041747461636b226021918401918201526816113b30b63ab2911d60b91b604182015284516148ea81604a840160208901614fde565b7f7d2c7b2274726169745f74797065223a225370656369616c20446566656e7365604a9290910191820152691116113b30b63ab2911d60b11b606a820152835161493b816074840160208801614fde565b627d5d7d60e81b6074929091019182015260770195945050505050565b7f7d2c7b2274726169745f74797065223a225370656564222c2276616c7565223a815260008451614990816020850160208901614fde565b80830190507f7d2c7b2274726169745f74797065223a22496e74656c6c6967656e6365222c226020820152663b30b63ab2911d60c91b604082015284516149de816047840160208901614fde565b7f7d2c7b2274726169745f74797065223a22446566656e7365222c2276616c75656047929091019182015261111d60f11b60678201528351614a27816069840160208801614fde565b0160690195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536340d0a0d0a815260008251614a6c816020850160208701614fde565b9190910160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090614aa5908301866142eb565b8281036060840152614ab781866142eb565b90508281036080840152610aa68185614326565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614b0590830184614326565b979650505050505050565b6101c08101818360005b600e811015614b3c578151600190810b84526020938401939092019101614b1a565b50505092915050565b602081526000613c9d60208301846142eb565b604081526000614b6b60408301856142eb565b8281036020840152614b7d81856142eb565b95945050505050565b60006101608d83528c60208401528b604084015261ffff8b166060840152891515608084015288151560a0840152614bc260c084018915159052565b8060e0840152614bd481840188614326565b9050828103610100840152614be98187614326565b9050828103610120840152614bfe8186614326565b9050828103610140840152614c138185614326565b9e9d5050505050505050505050505050565b602081526000613c9d6020830184614326565b60208082526030908201527f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766560408201526f20746865204d696e74657220726f6c6560801b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260409082018190527f57686974656c69737441646d696e526f6c653a2063616c6c657220646f657320908201527f6e6f742068617665207468652057686974656c69737441646d696e20726f6c65606082015260800190565b61ffff8e16815261ffff8d16602082015261ffff8c16604082015261ffff8b16606082015261ffff8a16608082015261ffff891660a082015261ffff881660c082015261ffff871660e082015261ffff86166101008201526101a06101208201526000614d8c6101a0830187614326565b828103610140840152614d9f8187614326565b9050828103610160840152614db48186614326565b9050828103610180840152614dc98185614326565b9150509e9d5050505050505050505050505050565b6000808335601e19843603018112614df557600080fd5b8301803591506001600160401b03821115614e0f57600080fd5b602001915036819003821315613c7657600080fd5b604051601f8201601f191681016001600160401b0381118282101715614e4c57614e4c6150b0565b604052919050565b60006001600160401b03821115614e6d57614e6d6150b0565b5060051b60200190565b60008219821115614e8a57614e8a61506e565b500190565b600082614e9e57614e9e615084565b500490565b6000816000190483118215151615614ebd57614ebd61506e565b500290565b600082821015614ed457614ed461506e565b500390565b601f82111561171657600081815260208120601f850160051c81016020861015614f005750805b601f850160051c820191505b81811015611e7957828155600101614f0c565b6001600160401b03831115614f3657614f366150b0565b614f4a83614f44835461500a565b83614ed9565b6000601f841160018114614f7e5760008515614f665750838201355b600019600387901b1c1916600186901b1783556109bf565b600083815260209020601f19861690835b82811015614faf5786850135825560209485019460019092019101614f8f565b5086821015614fcc5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60005b83811015614ff9578181015183820152602001614fe1565b83811115610b6a5750506000910152565b600181811c9082168061501e57607f821691505b60208210811415613cb757634e487b7160e01b600052602260045260246000fd5b60006000198214156150535761505361506e565b5060010190565b60008261506957615069615084565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561084f8161545b565b6000813561084f8161547f565b6150ff6150ec836150d3565b825461ffff191661ffff91909116178255565b61512861510e602084016150d3565b825463ffff0000191660109190911b63ffff000016178255565b615155615137604084016150d3565b825465ffff00000000191660209190911b65ffff0000000016178255565b615186615164606084016150d3565b825467ffff000000000000191660309190911b67ffff00000000000016178255565b6151bb615195608084016150d3565b825469ffff0000000000000000191660409190911b69ffff000000000000000016178255565b6151ea6151ca60a084016150d3565b82805461ffff60501b191660509290921b61ffff60501b16919091179055565b6152196151f960c084016150d3565b82805461ffff60601b191660609290921b61ffff60601b16919091179055565b61524861522860e084016150d3565b82805461ffff60701b191660709290921b61ffff60701b16919091179055565b61527861525861010084016150d3565b82805461ffff60801b191660809290921b61ffff60801b16919091179055565b615286610120830183614dde565b615294818360018601614f1f565b50506152a4610140830183614dde565b6152b2818360028601614f1f565b50506152c2610160830183614dde565b6152d0818360038601614f1f565b50506152e0610180830183614dde565b610b6a818360048601614f1f565b813581556020820135600182015560408201356002820155600381016153196150ec606085016150d3565b615344615328608085016150c6565b82805462ff0000191691151560101b62ff000016919091179055565b61537161535360a085016150c6565b82805463ff000000191691151560181b63ff00000016919091179055565b6153a061538060c085016150c6565b82805464ff00000000191691151560201b64ff0000000016919091179055565b506153ae60e0830183614dde565b6153bc818360048601614f1f565b50506153cc610100830183614dde565b6153da818360058601614f1f565b50506153ea610120830183614dde565b6153f8818360068601614f1f565b5050615408610140830183614dde565b610b6a818360078601614f1f565b81356154218161547f565b815461ffff191661ffff821617825550602082013561543f8161547f565b815463ffff00001916601082901b63ffff000016178255505050565b80151581146109f957600080fd5b6001600160e01b0319811681146109f957600080fd5b61ffff811681146109f957600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122046348f319b2408f4b498ac741aa0ef06bfee673261ca4982bb5160d84e1bd06e64736f6c6343000806003368747470733a2f2f706570656d6f6e2e66696e616e63652f6170692f706570656d6f6e2d6572633131353568747470733a2f2f706570656d6f6e2e66696e616e63652f6170692f63617264732f",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_id": "ID of the Token",
          "_owner": "The address of the token holder"
        },
        "returns": {
          "_0": "The _owner's balance of the Token type requested"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "_ids": "ID of the Tokens",
          "_owners": "The addresses of the token holders"
        },
        "returns": {
          "_0": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
        }
      },
      "endMinting(uint256)": {
        "details": "Ends minting of token",
        "params": {
          "_id": "Token ID for which minting will end"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "Address of authorized operator",
          "_owner": "The owner of the Tokens"
        },
        "returns": {
          "isOperator": "True if the operator is approved, false if not"
        }
      },
      "maxSupply(uint256)": {
        "details": "Returns the max quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Mints some amount of tokens to an address",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "_amounts": "Transfer amounts per token type",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source addresses",
          "_ids": "IDs of each token type",
          "_to": "Target addresses"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "_amount": "Transfered amount",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source address",
          "_id": "ID of the token type",
          "_to": "Target address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID",
        "params": {
          "_id": "uint256 ID of the token to query"
        },
        "returns": {
          "_0": "amount of token in existence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Pepemon Factory PEPEMON - gotta farm em all",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdrop(uint256,address[])": {
        "notice": "Mint NFT and send those to the list of given addresses"
      },
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of an account's Tokens"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of multiple account/token pairs"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given owner"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Send multiple types of Tokens from the _from address to the _to address (with safety call)"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14042,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14048,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15595,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15490,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_minters",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Role)16472_storage"
      },
      {
        "astId": 16575,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_whitelistAdmins",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Role)16472_storage"
      },
      {
        "astId": 15757,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "battleCardStats",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BattleCardStats)15724_storage)"
      },
      {
        "astId": 15762,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "supportCardStats",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(SupportCardStats)15747_storage)"
      },
      {
        "astId": 15766,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "elementDecode",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_string_storage)"
      },
      {
        "astId": 15771,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "weakResist",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_struct(elementWR)15752_storage)"
      },
      {
        "astId": 14924,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_currentTokenID",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14928,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "creators",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14932,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14936,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "tokenMaxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14938,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "name",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 14940,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "symbol",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 14942,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "baseMetadataURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 11958,
        "contract": "contracts/PepemonFactory.sol:PepemonFactory",
        "label": "_contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint16,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint16,t_struct(elementWR)15752_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct PepemonStats.elementWR)",
        "numberOfBytes": "32",
        "value": "t_struct(elementWR)15752_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(BattleCardStats)15724_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonStats.BattleCardStats)",
        "numberOfBytes": "32",
        "value": "t_struct(BattleCardStats)15724_storage"
      },
      "t_mapping(t_uint256,t_struct(SupportCardStats)15747_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PepemonStats.SupportCardStats)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportCardStats)15747_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BattleCardStats)15724_storage": {
        "encoding": "inplace",
        "label": "struct PepemonStats.BattleCardStats",
        "members": [
          {
            "astId": 15699,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "element",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15701,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "hp",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15703,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "speed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15705,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "intelligence",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15707,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "defense",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15709,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "attack",
            "offset": 10,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15711,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "specialAttack",
            "offset": 12,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15713,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "specialDefense",
            "offset": 14,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15715,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "level",
            "offset": 16,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15717,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 15719,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 15721,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "ipfsAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 15723,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "rarity",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Role)16472_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 16471,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SupportCardStats)15747_storage": {
        "encoding": "inplace",
        "label": "struct PepemonStats.SupportCardStats",
        "members": [
          {
            "astId": 15726,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "currentRoundChanges",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15728,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "nextRoundChanges",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 15730,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "specialCode",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15732,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "modifierNumberOfNextTurns",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 15734,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "isOffense",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15736,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "isNormal",
            "offset": 3,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15738,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "isStackable",
            "offset": 4,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15740,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 15742,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 15744,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "ipfsAddr",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 15746,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "rarity",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(elementWR)15752_storage": {
        "encoding": "inplace",
        "label": "struct PepemonStats.elementWR",
        "members": [
          {
            "astId": 15749,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "weakness",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15751,
            "contract": "contracts/PepemonFactory.sol:PepemonFactory",
            "label": "resistance",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}