{
  "address": "0xBe973123CF4ECC840fbA3aE14DACC6aD80Aaa2A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cardOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "deckOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "randOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1Addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "p1DeckId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "p2DeckId",
          "type": "uint256"
        }
      ],
      "name": "BattleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "battleIdRNGSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int16",
                      "name": "power",
                      "type": "int16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "numTurns",
                      "type": "uint16"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "reqCode",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct IPepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "atkHand",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int16",
                      "name": "power",
                      "type": "int16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "numTurns",
                      "type": "uint16"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "reqCode",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct IPepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "defHand",
          "type": "tuple"
        }
      ],
      "name": "calSupportCardsInHand",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int16",
                      "name": "power",
                      "type": "int16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "numTurns",
                      "type": "uint16"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "reqCode",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct IPepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "health",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "battleCardId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "spd",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "inte",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "def",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "atk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sAtk",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sDef",
                  "type": "int256"
                }
              ],
              "internalType": "struct PepemonBattle.CurrentBattleCardStats",
              "name": "currentBCstats",
              "type": "tuple"
            },
            {
              "internalType": "uint256[8]",
              "name": "supportCardInHandIds",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "tableSupportCardStats",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "supportCardId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int16",
                      "name": "power",
                      "type": "int16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "numTurns",
                      "type": "uint16"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectTo",
                      "name": "effectTo",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum IPepemonCardOracle.EffectFor",
                      "name": "effectFor",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "reqCode",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct IPepemonCardOracle.EffectMany",
                  "name": "effectMany",
                  "type": "tuple"
                }
              ],
              "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
              "name": "tableSupportCards",
              "type": "tuple[5]"
            }
          ],
          "internalType": "struct PepemonBattle.Hand",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "checkIfBattleEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "p1Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "p1DeckId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "p2Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "p2DeckId",
          "type": "uint256"
        }
      ],
      "name": "createBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "fight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "battle",
          "type": "tuple"
        }
      ],
      "name": "goForBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "battleId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deckId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "health",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "battleCardId",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "spd",
                          "type": "int256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "inte",
                          "type": "uint256"
                        },
                        {
                          "internalType": "int256",
                          "name": "def",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "atk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sAtk",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "sDef",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct PepemonBattle.CurrentBattleCardStats",
                      "name": "currentBCstats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256[8]",
                      "name": "supportCardInHandIds",
                      "type": "uint256[8]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tableSupportCardStats",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "supportCardId",
                          "type": "uint256"
                        },
                        {
                          "components": [
                            {
                              "internalType": "int16",
                              "name": "power",
                              "type": "int16"
                            },
                            {
                              "internalType": "uint16",
                              "name": "numTurns",
                              "type": "uint16"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectTo",
                              "name": "effectTo",
                              "type": "uint8"
                            },
                            {
                              "internalType": "enum IPepemonCardOracle.EffectFor",
                              "name": "effectFor",
                              "type": "uint8"
                            },
                            {
                              "internalType": "uint16",
                              "name": "reqCode",
                              "type": "uint16"
                            }
                          ],
                          "internalType": "struct IPepemonCardOracle.EffectMany",
                          "name": "effectMany",
                          "type": "tuple"
                        }
                      ],
                      "internalType": "struct PepemonBattle.TableSupportCardStats[5]",
                      "name": "tableSupportCards",
                      "type": "tuple[5]"
                    }
                  ],
                  "internalType": "struct PepemonBattle.Hand",
                  "name": "hand",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256[60]",
                  "name": "totalSupportCardIds",
                  "type": "uint256[60]"
                },
                {
                  "internalType": "uint256",
                  "name": "playedCardCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PepemonBattle.Player",
              "name": "player2",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTurn",
              "type": "uint256"
            },
            {
              "internalType": "enum PepemonBattle.Attacker",
              "name": "attacker",
              "type": "uint8"
            },
            {
              "internalType": "enum PepemonBattle.TurnHalves",
              "name": "turnHalves",
              "type": "uint8"
            }
          ],
          "internalType": "struct PepemonBattle.Battle",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "setAllowBattleAgainstOneself",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deckOracleAddress",
          "type": "address"
        }
      ],
      "name": "setBattleContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cardOracleAddress",
          "type": "address"
        }
      ],
      "name": "setCardContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "randOracleAddress",
          "type": "address"
        }
      ],
      "name": "setRandNrGenContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c26f22d82c6599666036737c82cb834439c77cbb58bdab9010866fb18391952",
  "receipt": {
    "to": null,
    "from": "0xE9600B3025C1291F2aA211a71bC41B6bfb82bFdD",
    "contractAddress": "0xBe973123CF4ECC840fbA3aE14DACC6aD80Aaa2A9",
    "transactionIndex": 0,
    "gasUsed": "3356180",
    "logsBloom": "0x
    "blockHash": "0x00005eb9000006de6fc3224e710deb57123cb816718058cff702adc3f6cbfa3b",
    "transactionHash": "0x6c26f22d82c6599666036737c82cb834439c77cbb58bdab9010866fb18391952",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23939495,
        "transactionHash": "0x6c26f22d82c6599666036737c82cb834439c77cbb58bdab9010866fb18391952",
        "address": "0xBe973123CF4ECC840fbA3aE14DACC6aD80Aaa2A9",
        "topics": [
          "0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339",
          "0x000000000000000000000000e9600b3025c1291f2aa211a71bc41b6bfb82bfdd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x00005eb9000006de6fc3224e710deb57123cb816718058cff702adc3f6cbfa3b"
      }
    ],
    "blockNumber": 23939495,
    "cumulativeGasUsed": "3356180",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4339A4f375c554379D1F3d9eDDe884C8b2c23210",
    "0x12EaA00470d8160DC43C11c32fD8c30E5fca0C05",
    "0xEB872fb86882Af5Ac3e920cCabB0F3dFe84428cb"
  ],
  "numDeployments": 3,
  "solcInputHash": "77074ce4823b83efbddac551ba8baad0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deckOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1Addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"p1DeckId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"p2DeckId\",\"type\":\"uint256\"}],\"name\":\"BattleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battleIdRNGSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"atkHand\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"defHand\",\"type\":\"tuple\"}],\"name\":\"calSupportCardsInHand\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"checkIfBattleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"p1DeckId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"p2Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"p2DeckId\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"fight\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"battle\",\"type\":\"tuple\"}],\"name\":\"goForBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deckId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"battleCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"spd\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"inte\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"def\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"atk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sAtk\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sDef\",\"type\":\"int256\"}],\"internalType\":\"struct PepemonBattle.CurrentBattleCardStats\",\"name\":\"currentBCstats\",\"type\":\"tuple\"},{\"internalType\":\"uint256[8]\",\"name\":\"supportCardInHandIds\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"tableSupportCardStats\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supportCardId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"power\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"numTurns\",\"type\":\"uint16\"},{\"internalType\":\"enum IPepemonCardOracle.EffectTo\",\"name\":\"effectTo\",\"type\":\"uint8\"},{\"internalType\":\"enum IPepemonCardOracle.EffectFor\",\"name\":\"effectFor\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"reqCode\",\"type\":\"uint16\"}],\"internalType\":\"struct IPepemonCardOracle.EffectMany\",\"name\":\"effectMany\",\"type\":\"tuple\"}],\"internalType\":\"struct PepemonBattle.TableSupportCardStats[5]\",\"name\":\"tableSupportCards\",\"type\":\"tuple[5]\"}],\"internalType\":\"struct PepemonBattle.Hand\",\"name\":\"hand\",\"type\":\"tuple\"},{\"internalType\":\"uint256[60]\",\"name\":\"totalSupportCardIds\",\"type\":\"uint256[60]\"},{\"internalType\":\"uint256\",\"name\":\"playedCardCount\",\"type\":\"uint256\"}],\"internalType\":\"struct PepemonBattle.Player\",\"name\":\"player2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTurn\",\"type\":\"uint256\"},{\"internalType\":\"enum PepemonBattle.Attacker\",\"name\":\"attacker\",\"type\":\"uint8\"},{\"internalType\":\"enum PepemonBattle.TurnHalves\",\"name\":\"turnHalves\",\"type\":\"uint8\"}],\"internalType\":\"struct PepemonBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowBattleAgainstOneself\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deckOracleAddress\",\"type\":\"address\"}],\"name\":\"setBattleContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cardOracleAddress\",\"type\":\"address\"}],\"name\":\"setCardContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randOracleAddress\",\"type\":\"address\"}],\"name\":\"setRandNrGenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBattle(address,uint256,address,uint256)\":{\"details\":\"Create battle\",\"params\":{\"p1Addr\":\"address player1\",\"p1DeckId\":\"uint256\",\"p2Addr\":\"address player2\",\"p2DeckId\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepemonBattle.sol\":\"PepemonBattle\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/PepemonBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"./lib/AdminRole.sol\\\";\\r\\nimport \\\"./PepemonCardDeck.sol\\\";\\r\\nimport \\\"./iface/IPepemonCardOracle.sol\\\";\\r\\nimport \\\"./lib/ChainLinkRngOracle.sol\\\";\\r\\n\\r\\ncontract PepemonBattle is AdminRole {\\r\\n\\r\\n    event BattleCreated(\\r\\n        address indexed player1Addr,\\r\\n        address indexed player2Addr,\\r\\n        uint256 battleId,\\r\\n        uint256 p1DeckId,\\r\\n        uint256 p2DeckId\\r\\n    );\\r\\n\\r\\n    mapping (uint => uint) public battleIdRNGSeed;\\r\\n\\r\\n    uint constant _max_inte = 8;\\r\\n    uint constant _max_cards_on_table = 5;\\r\\n    uint constant _refreshTurn = 5;\\r\\n\\r\\n    //Attacker can either be PLAYER_ONE or PLAYER_TWO\\r\\n    enum Attacker {\\r\\n        PLAYER_ONE,\\r\\n        PLAYER_TWO\\r\\n    }\\r\\n\\r\\n    //Game can either be in FIRST_HALF or SECOND_HALF\\r\\n    enum TurnHalves {\\r\\n        FIRST_HALF,\\r\\n        SECOND_HALF\\r\\n    }\\r\\n\\r\\n    //Battle contains:\\r\\n    //battleId = ID of this battle\\r\\n    //player1, player2 = players\\r\\n    //currentTurn\\r\\n    //attacker\\r\\n    //turnHalves => first half or second half?\\r\\n    struct Battle {\\r\\n        uint256 battleId;\\r\\n        Player player1;\\r\\n        Player player2;\\r\\n        uint256 currentTurn;\\r\\n        Attacker attacker;\\r\\n        TurnHalves turnHalves;\\r\\n    }\\r\\n\\r\\n    // Used to keep a local copy of players battle/support cards instead of reloading\\r\\n    // from the oracle\\r\\n    struct PlayersCards {\\r\\n        uint256 player1SupportCardsCount;\\r\\n        uint256 player2SupportCardsCount;\\r\\n        IPepemonCardOracle.BattleCardStats player1Battlecard;\\r\\n        IPepemonCardOracle.BattleCardStats player2Battlecard;\\r\\n        uint256[] player1SupportCards;\\r\\n        uint256[] player2SupportCards;\\r\\n    }\\r\\n\\r\\n    //playerAddr\\r\\n    //deckId = Id of deck\\r\\n    //hand = keeps track of current player's stats (such as health)\\r\\n    //totalSupportCardIds = all IDs of support cards\\r\\n    //playedCardCount = number of cards played already\\r\\n    struct Player {\\r\\n        address playerAddr;\\r\\n        uint256 deckId;\\r\\n        Hand hand;\\r\\n        uint256[60] totalSupportCardIds;\\r\\n        uint256 playedCardCount;\\r\\n    }\\r\\n\\r\\n    //health - health of player's battle card\\r\\n    // battleCardId = card id of player\\r\\n    // currentBCstats = all stats of the player's battle cards currently\\r\\n    // supportCardInHandIds = IDs of the support cards in your current hand\\r\\n    //                  the amount of support cards a player can play is determined by intelligence\\r\\n    // tableSupportCardStats = Number of support cards that are currently played on the table\\r\\n    // currentSuportCards = cards on the table, based on which turn ago they were played\\r\\n    //                      Notice that the number of turns is limited by _refreshTurn\\r\\n    struct Hand {\\r\\n        int256 health;\\r\\n        uint256 battleCardId;\\r\\n        CurrentBattleCardStats currentBCstats;\\r\\n        uint256[_max_inte] supportCardInHandIds;\\r\\n        uint256 tableSupportCardStats;\\r\\n        TableSupportCardStats[_max_cards_on_table] tableSupportCards;\\r\\n    }\\r\\n    //spd, inte, def, atk, sAtk, sDef - Current stats of battle card (with powerups included)\\r\\n    //Each param can go into the negatives\\r\\n    struct CurrentBattleCardStats {\\r\\n        int256 spd;\\r\\n        uint256 inte;\\r\\n        int256 def;\\r\\n        int256 atk;\\r\\n        int256 sAtk;\\r\\n        int256 sDef;\\r\\n    }\\r\\n\\r\\n    //links supportCardID with effectMany\\r\\n    struct TableSupportCardStats {\\r\\n        uint256 supportCardId;\\r\\n        IPepemonCardOracle.EffectMany effectMany;\\r\\n    }\\r\\n\\r\\n    uint256 private _nextBattleId;\\r\\n\\r\\n    bool private _allowBattleAgainstOneself;\\r\\n\\r\\n    IPepemonCardOracle private _cardContract;\\r\\n    PepemonCardDeck private _deckContract;\\r\\n    ChainLinkRngOracle private _randNrGenContract;\\r\\n\\r\\n    constructor(\\r\\n        address cardOracleAddress,\\r\\n        address deckOracleAddress,\\r\\n        address randOracleAddress\\r\\n    ) {\\r\\n        _cardContract = IPepemonCardOracle(cardOracleAddress);\\r\\n        _deckContract = PepemonCardDeck(deckOracleAddress);\\r\\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\\r\\n        _nextBattleId = 1;\\r\\n        _allowBattleAgainstOneself = false;\\r\\n    }\\r\\n\\r\\n    function setCardContractAddress(address cardOracleAddress) public onlyAdmin {\\r\\n        _cardContract = IPepemonCardOracle(cardOracleAddress);\\r\\n    }\\r\\n\\r\\n    function setBattleContractAddress(address deckOracleAddress) public onlyAdmin {\\r\\n        _deckContract = PepemonCardDeck(deckOracleAddress);\\r\\n    }\\r\\n\\r\\n    function setRandNrGenContractAddress(address randOracleAddress) public onlyAdmin {\\r\\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\\r\\n    }\\r\\n\\r\\n    function setAllowBattleAgainstOneself(bool allow) public onlyAdmin {\\r\\n        _allowBattleAgainstOneself = allow;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create battle\\r\\n     * @param p1Addr address player1\\r\\n     * @param p1DeckId uint256\\r\\n     * @param p2Addr address player2\\r\\n     * @param p2DeckId uint256\\r\\n     */\\r\\n    function createBattle(\\r\\n        address p1Addr,\\r\\n        uint256 p1DeckId,\\r\\n        address p2Addr,\\r\\n        uint256 p2DeckId\\r\\n    ) public onlyAdmin returns (Battle memory, uint256 battleId)  {\\r\\n        require(_allowBattleAgainstOneself || p1Addr != p2Addr, \\\"PepemonBattle: Cannot battle yourself\\\");\\r\\n\\r\\n        (uint256 p1BattleCardId, ) = _deckContract.decks(p1DeckId);\\r\\n        (uint256 p2BattleCardId, ) = _deckContract.decks(p2DeckId);\\r\\n\\r\\n        IPepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(p1BattleCardId);\\r\\n        IPepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(p2BattleCardId);\\r\\n\\r\\n        Battle memory newBattle;\\r\\n        // Initiate battle ID\\r\\n        newBattle.battleId = _nextBattleId;\\r\\n        // Initiate player1\\r\\n        newBattle.player1.hand.health = int256(uint256(p1BattleCard.hp));\\r\\n        newBattle.player1.hand.battleCardId = p1BattleCardId;\\r\\n        newBattle.player1.playerAddr = p1Addr;\\r\\n        newBattle.player1.deckId = p1DeckId;\\r\\n        // Initiate player2\\r\\n        newBattle.player2.hand.health = int256(uint256(p2BattleCard.hp));\\r\\n        newBattle.player2.hand.battleCardId = p2BattleCardId;\\r\\n        newBattle.player2.playerAddr = p2Addr;\\r\\n        newBattle.player2.deckId = p2DeckId;\\r\\n        // Set the RNG seed\\r\\n        battleIdRNGSeed[_nextBattleId] = _randSeed(newBattle);\\r\\n\\r\\n        //Emit event\\r\\n        emit BattleCreated(p1Addr, p2Addr, _nextBattleId, p1DeckId, p2DeckId);\\r\\n        return (newBattle, _nextBattleId++);\\r\\n    }\\r\\n\\r\\n    function getPlayersCards(\\r\\n        uint256 player1BattleCardId,\\r\\n        uint256 player2BattleCardId,\\r\\n        uint256 player1DeckId,\\r\\n        uint256 player2DeckId\\r\\n    ) internal view returns (PlayersCards memory) {\\r\\n        // Get Battle Cards for Player 1 and Player 2\\r\\n        IPepemonCardOracle.BattleCardStats memory player1Battlecard = _cardContract.getBattleCardById(player1BattleCardId);\\r\\n        IPepemonCardOracle.BattleCardStats memory player2Battlecard = _cardContract.getBattleCardById(player2BattleCardId);\\r\\n\\r\\n        // Get Support Cards for Player 1 and Player 2\\r\\n        uint256[] memory player1SupportCards = _deckContract.getAllSupportCardsInDeck(player1DeckId);\\r\\n        uint256[] memory player2SupportCards = _deckContract.getAllSupportCardsInDeck(player2DeckId);\\r\\n\\r\\n        // Get Support Card count for Player 1 and Player 2\\r\\n        uint256 player1SupportCardsCount = _deckContract.getSupportCardCountInDeck(player1DeckId);\\r\\n        uint256 player2SupportCardsCount = _deckContract.getSupportCardCountInDeck(player2DeckId);\\r\\n\\r\\n        // Create and return the PlayersCards struct instance\\r\\n        return PlayersCards({\\r\\n            player1Battlecard: player1Battlecard,\\r\\n            player1SupportCards: player1SupportCards,\\r\\n            player1SupportCardsCount: player1SupportCardsCount,\\r\\n            player2Battlecard: player2Battlecard,\\r\\n            player2SupportCards: player2SupportCards,\\r\\n            player2SupportCardsCount: player2SupportCardsCount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function goForBattle(Battle memory battle) public view returns (Battle memory, address winner) {\\r\\n        // local cache for cards and decks info to reduce gas usage\\r\\n        PlayersCards memory cards = getPlayersCards(\\r\\n            battle.player1.hand.battleCardId,\\r\\n            battle.player2.hand.battleCardId,\\r\\n            battle.player1.deckId,\\r\\n            battle.player2.deckId\\r\\n        );\\r\\n\\r\\n        //Initialize battle by starting the first turn\\r\\n        battle = goForNewTurn(battle, cards);\\r\\n        address winnerAddr;\\r\\n        // Battle goes!\\r\\n        while (true) {\\r\\n            // Resolve attacker in the current turn\\r\\n            battle = resolveAttacker(battle);\\r\\n            // Fight\\r\\n            battle = fight(battle);\\r\\n\\r\\n            // Check if battle ended\\r\\n            (bool isEnded, address win) = checkIfBattleEnded(battle);\\r\\n            if (isEnded) {\\r\\n                winnerAddr = win;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            // Resolve turn halves\\r\\n            battle = updateTurnInfo(battle, cards);\\r\\n        }\\r\\n        return (battle, winnerAddr);\\r\\n    }\\r\\n\\r\\n    //If currently in first half -> go to second half\\r\\n    //If currently in second half -> make a new turn\\r\\n    function updateTurnInfo(Battle memory battle, PlayersCards memory cards) internal view returns (Battle memory) {\\r\\n        // If the current half is first, go over second half\\r\\n        // or go over next turn\\r\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\r\\n            battle.turnHalves = TurnHalves.SECOND_HALF;\\r\\n        } else {\\r\\n            battle = goForNewTurn(battle, cards);\\r\\n        }\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    //Things this function does:\\r\\n    //Reset both players hand infos back to base stats (stats with no support card powerups)\\r\\n    //Check if support cards need to be scrambled and redealt\\r\\n    //Redeal support cards if necessary\\r\\n    //Calculate support card's power\\r\\n    //Finally, draw Pepemon's intelligence number of cards.\\r\\n    function goForNewTurn(Battle memory battle, PlayersCards memory cards) internal view returns (Battle memory) {\\r\\n        Player memory player1 = battle.player1;\\r\\n        Player memory player2 = battle.player2;\\r\\n\\r\\n        // Load base battle card stats (stats without any powerups)\\r\\n        // and reset both players' hand infos to base stats\\r\\n        player1.hand.currentBCstats = getCardStats(cards.player1Battlecard);\\r\\n        player2.hand.currentBCstats = getCardStats(cards.player2Battlecard);\\r\\n\\r\\n        uint256 p1SupportCardIdsLength = cards.player1SupportCardsCount;\\r\\n        uint256 p2SupportCardIdsLength = cards.player2SupportCardsCount;\\r\\n\\r\\n        //Refresh cards every 5 turns\\r\\n        bool isRefreshTurn = (battle.currentTurn % _refreshTurn == 0);\\r\\n\\r\\n        if (isRefreshTurn) {\\r\\n            //Need to refresh decks\\r\\n\\r\\n            // Shuffle player1 support cards\\r\\n            uint[] memory scrambled = Arrays.shuffle(cards.player1SupportCards, _randMod(69, battle));\\r\\n\\r\\n            //Copy back scrambled cards to original list\\r\\n            for (uint i = 0 ; i < p1SupportCardIdsLength; i++){\\r\\n                player1.totalSupportCardIds[i]=scrambled[i];\\r\\n            }\\r\\n            \\r\\n            //Reset played card count\\r\\n            player1.playedCardCount = 0;\\r\\n\\r\\n            //Shuffling player 2 support cards\\r\\n            //Create a pseudorandom seed and shuffle the cards\\r\\n            uint[] memory scrambled2 = Arrays.shuffle(cards.player2SupportCards, _randMod(420, battle));\\r\\n\\r\\n            //Copy the support cards back into the list\\r\\n            for (uint256 i = 0; i < p2SupportCardIdsLength; i++) {\\r\\n                player2.totalSupportCardIds[i]=scrambled2[i];\\r\\n            }\\r\\n            \\r\\n            //Reset player2 played card counts\\r\\n            player2.playedCardCount = 0;\\r\\n        }\\r\\n        else \\r\\n        {\\r\\n            //Don't need to refresh cards now\\r\\n\\r\\n            // Get temp support info of previous turn's hands and calculate their effect for the new turn\\r\\n            player1.hand = calSupportCardsOnTable(player1.hand, player2.hand);\\r\\n            player2.hand = calSupportCardsOnTable(player2.hand, player1.hand);\\r\\n        }\\r\\n\\r\\n        // Draw player1 support cards for the new turn\\r\\n        uint256 remainingCards = p1SupportCardIdsLength - player1.playedCardCount;\\r\\n        // limit number of cards to be taken to prevent taking invalid cards\\r\\n        player1.hand.currentBCstats.inte = remainingCards < player1.hand.currentBCstats.inte ? remainingCards : player1.hand.currentBCstats.inte;\\r\\n        for (uint256 i = 0; i < player1.hand.currentBCstats.inte; i++) {\\r\\n            // \\\"totalSupportCardIds\\\" array has 60 elements, max intelligence is 8 (_max_inte), each 5 rounds playedCardCount is reset, \\r\\n            // so in total, 40 (5*8) cards could end up being used, no out of bounds errors\\r\\n            player1.hand.supportCardInHandIds[i] = player1.totalSupportCardIds[i + player1.playedCardCount];\\r\\n        }\\r\\n        player1.playedCardCount += player1.hand.currentBCstats.inte;\\r\\n\\r\\n        // Draw player2 support cards for the new turn\\r\\n        remainingCards = p2SupportCardIdsLength - player2.playedCardCount;\\r\\n        // limit number of cards to be taken to prevent taking invalid cards\\r\\n        player2.hand.currentBCstats.inte = remainingCards < player2.hand.currentBCstats.inte ? remainingCards : player2.hand.currentBCstats.inte;\\r\\n        for (uint256 i = 0; i < player2.hand.currentBCstats.inte; i++) {\\r\\n            player2.hand.supportCardInHandIds[i] = player2.totalSupportCardIds[i + player2.playedCardCount];\\r\\n        }\\r\\n        player2.playedCardCount += player2.hand.currentBCstats.inte;\\r\\n\\r\\n        //Update current battle info\\r\\n        battle.player1 = player1;\\r\\n        battle.player2 = player2;\\r\\n\\r\\n        // Increment current turn number of battle\\r\\n        battle.currentTurn++;\\r\\n\\r\\n        // Go for first half in turn\\r\\n        battle.turnHalves = TurnHalves.FIRST_HALF;\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    //This method calculates the battle card's stats after taking into consideration all the support cards currently being played\\r\\n    function calSupportCardsOnTable(Hand memory hand, Hand memory oppHand) internal pure returns (Hand memory) {\\r\\n        for (uint256 i = 0; i < hand.tableSupportCardStats; i++) {\\r\\n            //Loop through every support card currently played\\r\\n\\r\\n            //Get the support card being considered now\\r\\n            TableSupportCardStats memory tableSupportCardStat = hand.tableSupportCards[i];\\r\\n            \\r\\n            //Get the effect of that support card\\r\\n            IPepemonCardOracle.EffectMany memory effect = tableSupportCardStat.effectMany;\\r\\n            \\r\\n            //If there is at least 1 turn left\\r\\n            if (effect.numTurns >= 1) {\\r\\n\\r\\n                //If the effect is for me\\r\\n                if (effect.effectFor == IPepemonCardOracle.EffectFor.ME) {\\r\\n                    // Change my card's stats using that support card\\r\\n                    // Currently effectTo of EffectMany can be ATTACK, DEFENSE, SPEED and INTELLIGENCE\\r\\n                    //Get the statistic changed and update it \\r\\n                    //Intelligence can't go into the negatives nor above _max_inte\\r\\n                    if (effect.effectTo == IPepemonCardOracle.EffectTo.ATTACK) {\\r\\n                        hand.currentBCstats.atk += effect.power;\\r\\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.DEFENSE) {\\r\\n                        hand.currentBCstats.def += effect.power;\\r\\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.SPEED) {\\r\\n                        hand.currentBCstats.spd += effect.power;\\r\\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.INTELLIGENCE) {\\r\\n                        int temp;\\r\\n                        temp = int256(hand.currentBCstats.inte) + effect.power;\\r\\n                        temp = temp > int(_max_inte) ? int(_max_inte) : temp;\\r\\n                        hand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\r\\n                    }\\r\\n                } else {\\r\\n                    //The card affects the opp's pepemon\\r\\n                    //Update card stats of the opp's pepemon\\r\\n                    //Make sure INT stat can't go below zero nor above _max_inte\\r\\n                    if (effect.effectTo == IPepemonCardOracle.EffectTo.ATTACK) {\\r\\n                        oppHand.currentBCstats.atk += effect.power;\\r\\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.DEFENSE) {\\r\\n                        oppHand.currentBCstats.def += effect.power;\\r\\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.SPEED) {\\r\\n                        oppHand.currentBCstats.spd += effect.power;\\r\\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.INTELLIGENCE) {\\r\\n                        int temp;\\r\\n                        temp = int256(oppHand.currentBCstats.inte) + effect.power;\\r\\n                        temp = temp > int(_max_inte) ? int(_max_inte) : temp;\\r\\n                        oppHand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\\r\\n                    }\\r\\n                }\\r\\n                // Decrease effect numTurns by 1 since 1 turn has already passed\\r\\n                effect.numTurns--;\\r\\n                // Delete this one from tableSupportCardStat if all turns of the card have been exhausted\\r\\n                if (effect.numTurns == 0) {\\r\\n                    if (i < hand.tableSupportCardStats - 1) {\\r\\n                        hand.tableSupportCards[i] = hand.tableSupportCards[hand.tableSupportCardStats - 1];\\r\\n                    }\\r\\n                    delete hand.tableSupportCards[hand.tableSupportCardStats - 1];\\r\\n                    hand.tableSupportCardStats--;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return hand;\\r\\n    }\\r\\n\\r\\n    //This method gets the current attacker\\r\\n    function resolveAttacker(Battle memory battle) internal view returns (Battle memory) {\\r\\n        CurrentBattleCardStats memory p1CurrentBattleCardStats = battle.player1.hand.currentBCstats;\\r\\n        CurrentBattleCardStats memory p2CurrentBattleCardStats = battle.player2.hand.currentBCstats;\\r\\n\\r\\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\\r\\n            //Player with highest speed card goes first\\r\\n            if (p1CurrentBattleCardStats.spd > p2CurrentBattleCardStats.spd) {\\r\\n                battle.attacker = Attacker.PLAYER_ONE;\\r\\n            } else if (p1CurrentBattleCardStats.spd < p2CurrentBattleCardStats.spd) {\\r\\n                battle.attacker = Attacker.PLAYER_TWO;\\r\\n            } else {\\r\\n                //Tiebreak: intelligence\\r\\n                if (p1CurrentBattleCardStats.inte > p2CurrentBattleCardStats.inte) {\\r\\n                    battle.attacker = Attacker.PLAYER_ONE;\\r\\n                } else if (p1CurrentBattleCardStats.inte < p2CurrentBattleCardStats.inte) {\\r\\n                    battle.attacker = Attacker.PLAYER_TWO;\\r\\n                } else {\\r\\n                    //Second tiebreak: use RNG\\r\\n                    uint256 rand = _randMod(69420, battle) % 2;\\r\\n                    battle.attacker = (rand == 0 ? Attacker.PLAYER_ONE : Attacker.PLAYER_TWO);\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            //For second half, switch players\\r\\n            battle.attacker = (battle.attacker == Attacker.PLAYER_ONE ? Attacker.PLAYER_TWO : Attacker.PLAYER_ONE);\\r\\n        }\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    //Create a random seed, using the chainlink number and the addresses of the combatants as entropy\\r\\n    function _randSeed(Battle memory battle) private view returns (uint256) {\\r\\n        //Get the chainlink random number\\r\\n        uint chainlinkNumber = _randNrGenContract.getRandomNumber();\\r\\n        //Create a new pseudorandom number using the seed and battle info as entropy\\r\\n        //This makes sure the RNG returns a different number every time\\r\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(block.number, chainlinkNumber, battle.player1.playerAddr, battle.player2.playerAddr)));\\r\\n        return randomNumber;\\r\\n    }\\r\\n\\r\\n    function _randMod(uint256 seed, Battle memory battle) private view returns (uint256) {\\r\\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(seed, battle.currentTurn, battleIdRNGSeed[battle.battleId])));\\r\\n        return randomNumber;\\r\\n    }\\r\\n\\r\\n    //Check if battle ended by looking at player's health\\r\\n    function checkIfBattleEnded(Battle memory battle) public pure returns (bool, address) {\\r\\n        if (battle.player1.hand.health <= 0) {\\r\\n            return (true, battle.player1.playerAddr);\\r\\n        } else if (battle.player2.hand.health <= 0) {\\r\\n            return (true, battle.player2.playerAddr);\\r\\n        } else {\\r\\n            return (false, address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fight(Battle memory battle) public view returns (Battle memory) {\\r\\n        Hand memory atkHand;\\r\\n        Hand memory defHand;\\r\\n\\r\\n        //Get attacker and defender for current turn\\r\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\r\\n            atkHand = battle.player1.hand;\\r\\n            defHand = battle.player2.hand;\\r\\n        } else {\\r\\n            atkHand = battle.player2.hand;\\r\\n            defHand = battle.player1.hand;\\r\\n        }\\r\\n\\r\\n        (atkHand, defHand) = calSupportCardsInHand(atkHand, defHand);\\r\\n\\r\\n        //Give 2 point advantage if weakness, 2 point disadvantage if resistance\\r\\n        atkHand.currentBCstats.atk += resistanceWeaknessCal(atkHand, defHand);\\r\\n\\r\\n        // Fight\\r\\n\\r\\n        //Calculate HP loss for defending player\\r\\n        if (atkHand.currentBCstats.atk > defHand.currentBCstats.def) {\\r\\n            //If attacker's attack > defender's defense, find difference. That is the defending player's HP loss\\r\\n            defHand.health -= (atkHand.currentBCstats.atk - defHand.currentBCstats.def);\\r\\n        } else {\\r\\n            //Otherwise, defender loses 1 HP\\r\\n            defHand.health -= 1;\\r\\n        }\\r\\n\\r\\n        //Write updated info back into battle\\r\\n        if (battle.attacker == Attacker.PLAYER_ONE) {\\r\\n            battle.player1.hand = atkHand;\\r\\n            battle.player2.hand = defHand;\\r\\n        } else {\\r\\n            battle.player1.hand = defHand;\\r\\n            battle.player2.hand = atkHand;\\r\\n        }\\r\\n\\r\\n        return battle;\\r\\n    }\\r\\n\\r\\n    \\r\\n    //We calculate the effect of every card in the player's hand\\r\\n    function calSupportCardsInHand(Hand memory atkHand, Hand memory defHand) public view returns (Hand memory, Hand memory) {\\r\\n        // If this card is included in player's hand, adds an additional power equal to the total of\\r\\n        // all normal offense/defense cards\\r\\n        bool isPower0CardIncluded = false;\\r\\n        // Total sum of normal support cards\\r\\n        int256 totalNormalPower = 0;\\r\\n        // Cal attacker hand\\r\\n        for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n            //Loop through every card the attacker has in his hand\\r\\n            uint256 id = atkHand.supportCardInHandIds[i];\\r\\n\\r\\n            //Get the support cardStats\\r\\n            IPepemonCardOracle.SupportCardStats memory cardStats = _cardContract.getSupportCardById(id);\\r\\n            if (cardStats.supportCardType == IPepemonCardOracle.SupportCardType.OFFENSE) {\\r\\n                // Card type is OFFENSE.\\r\\n                // Calc effects of EffectOne array\\r\\n\\r\\n                IPepemonCardOracle.EffectOne memory effectOne = cardStats.effectOne;\\r\\n                \\r\\n                //Checks if that support card is triggered and by how much it is triggered by\\r\\n                (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\r\\n                if (isTriggered) {\\r\\n                    //use triggeredPower if triggered\\r\\n                    atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\r\\n                    totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\r\\n                }\\r\\n                else{\\r\\n                    //use basePower if not\\r\\n                    atkHand.currentBCstats.atk += effectOne.basePower;\\r\\n                    totalNormalPower += effectOne.basePower;\\r\\n                }\\r\\n\\r\\n            } else if (cardStats.supportCardType == IPepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\r\\n                // Card type is STRONG OFFENSE.\\r\\n\\r\\n                //Make sure unstackable cards can't be stacked\\r\\n                if (cardStats.unstackable) {\\r\\n                    bool isNew = true;\\r\\n                    // Check if card is new to previous cards\\r\\n                    for (uint256 j = 0; j < i; j++) {\\r\\n                        if (id == atkHand.supportCardInHandIds[j]) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    if (!isNew) {\\r\\n                        //If it isn't - skip card\\r\\n                        continue;\\r\\n                    }\\r\\n                    // Check if card is new to temp support info cards\\r\\n                    for (uint256 j = 0; j < atkHand.tableSupportCardStats; j++) {\\r\\n                        if (id == atkHand.tableSupportCards[j].supportCardId) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    if (!isNew) {\\r\\n                        //If it isn't - skip card\\r\\n                        continue;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Calc effects of EffectOne array\\r\\n\\r\\n                IPepemonCardOracle.EffectOne memory effectOne = cardStats.effectOne;\\r\\n                (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\\r\\n                if (isTriggered) {\\r\\n                    //If triggered: use triggered power\\r\\n                    if (multiplier > 1) {\\r\\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\\r\\n                    } else {\\r\\n                        if (effectOne.effectTo == IPepemonCardOracle.EffectTo.STRONG_ATTACK) {\\r\\n                            // If it's a use Special Attack instead of Attack card\\r\\n                            atkHand.currentBCstats.atk = atkHand.currentBCstats.sAtk;\\r\\n                            continue;\\r\\n                        } else if (effectOne.triggeredPower == 0) {\\r\\n                            // We have a card that says ATK is increased by amount\\r\\n                            // Equal to the total of all offense cards in the current turn\\r\\n                            isPower0CardIncluded = true;\\r\\n                            continue;\\r\\n                        }\\r\\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower;\\r\\n                    }\\r\\n                }\\r\\n                else{\\r\\n                    //If not triggered: use base power instead\\r\\n                    atkHand.currentBCstats.atk += effectOne.basePower;\\r\\n                    totalNormalPower += effectOne.basePower;\\r\\n                }\\r\\n                // If card lasts for >1 turns\\r\\n                if (cardStats.effectMany.power != 0) {\\r\\n                    // Add card  to table if <5 on table currently\\r\\n                    if (atkHand.tableSupportCardStats < _max_cards_on_table) {\\r\\n                        atkHand.tableSupportCards[atkHand.tableSupportCardStats++] = TableSupportCardStats({\\r\\n                            supportCardId: id,\\r\\n                            effectMany: cardStats.effectMany\\r\\n                        });\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                // Other card type is ignored.\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n        if (isPower0CardIncluded) {\\r\\n            //If we have a card that says ATK is increased by amount equal to total of all offense cards\\r\\n            atkHand.currentBCstats.atk += totalNormalPower;\\r\\n        }\\r\\n        // Cal defense hand\\r\\n        isPower0CardIncluded = false;\\r\\n        totalNormalPower = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\r\\n            uint256 id = defHand.supportCardInHandIds[i];\\r\\n            IPepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(id);\\r\\n            if (card.supportCardType == IPepemonCardOracle.SupportCardType.DEFENSE) {\\r\\n                // Card type is DEFENSE\\r\\n                // Calc effects of EffectOne array\\r\\n\\r\\n                    IPepemonCardOracle.EffectOne memory effectOne = card.effectOne;\\r\\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\r\\n                    if (isTriggered) {\\r\\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(multiplier);\\r\\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\\r\\n                    }\\r\\n                    else{\\r\\n                        //If not triggered, use base power instead\\r\\n                        defHand.currentBCstats.def += effectOne.basePower;\\r\\n                        totalNormalPower += effectOne.basePower;\\r\\n                    }\\r\\n\\r\\n            } else if (card.supportCardType == IPepemonCardOracle.SupportCardType.STRONG_DEFENSE) {\\r\\n                // Card type is STRONG DEFENSE\\r\\n                if (card.unstackable) {\\r\\n                    bool isNew = true;\\r\\n                    // Check if card is new to previous cards\\r\\n                    for (uint256 j = 0; j < i; j++) {\\r\\n                        if (id == defHand.supportCardInHandIds[j]) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    // Check if card is new to temp support info cards\\r\\n                    for (uint256 j = 0; j < defHand.tableSupportCardStats; j++) {\\r\\n                        if (id == defHand.tableSupportCards[j].supportCardId) {\\r\\n                            isNew = false;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                    if (!isNew) {\\r\\n                        continue;\\r\\n                    }\\r\\n                }\\r\\n                // Calc effects of EffectOne array\\r\\n                IPepemonCardOracle.EffectOne memory effectOne = card.effectOne;\\r\\n                (bool isTriggered, uint256 num) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\\r\\n                if (isTriggered) {\\r\\n                    if (num > 0) {\\r\\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(num);\\r\\n                    } else {\\r\\n                        if (effectOne.effectTo == IPepemonCardOracle.EffectTo.STRONG_DEFENSE) {\\r\\n                            defHand.currentBCstats.def = defHand.currentBCstats.sDef;\\r\\n                            continue;\\r\\n                        } else if (effectOne.triggeredPower == 0) {\\r\\n                            // Equal to the total of all defense cards in the current turn\\r\\n                            isPower0CardIncluded = true;\\r\\n                            continue;\\r\\n                        }\\r\\n                        defHand.currentBCstats.def += effectOne.triggeredPower;\\r\\n                    }\\r\\n                }\\r\\n                else{\\r\\n                    //If not triggered, use base stats instead\\r\\n                    defHand.currentBCstats.def += effectOne.basePower;\\r\\n                    totalNormalPower += effectOne.basePower;\\r\\n                }\\r\\n            \\r\\n                // If card effect lasts >1 turn\\r\\n                if (card.effectMany.power != 0) {\\r\\n                    // Add card to table if there are <5 cards on table right now\\r\\n                    if (defHand.tableSupportCardStats < _max_cards_on_table) {\\r\\n                        defHand.tableSupportCards[defHand.tableSupportCardStats++] = TableSupportCardStats({\\r\\n                            supportCardId: id,\\r\\n                            effectMany: card.effectMany\\r\\n                        });\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                // Other card type is ignored.\\r\\n                continue;\\r\\n            }\\r\\n        }\\r\\n        if (isPower0CardIncluded) {\\r\\n            //If a \\\"add total of defense\\\" card is included\\r\\n            defHand.currentBCstats.def += totalNormalPower;\\r\\n        }\\r\\n\\r\\n        return (atkHand, defHand);\\r\\n    }\\r\\n\\r\\n    //Strip important game information (like speed, intelligence, etc.) from battle card\\r\\n    function getCardStats(IPepemonCardOracle.BattleCardStats memory x) internal pure returns (CurrentBattleCardStats memory){\\r\\n        CurrentBattleCardStats memory ret;\\r\\n\\r\\n        ret.spd = int(uint(x.spd));\\r\\n        ret.inte = x.inte;\\r\\n        ret.def = int(uint(x.def));\\r\\n        ret.atk = int(uint(x.atk));\\r\\n        ret.sAtk = int(uint(x.sAtk));\\r\\n        ret.sDef = int(uint(x.sDef));\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n//Checks if the requirements are satisfied for a certain code\\r\\n//returns bool - is satisfied?\\r\\n// uint - the multiplier for the card's attack power\\r\\n// for most cases multiplier is 1\\r\\nfunction checkReqCode(\\r\\n        Hand memory atkHand,\\r\\n        Hand memory defHand,\\r\\n        uint256 reqCode,\\r\\n        bool isAttacker\\r\\n    ) internal view returns (bool, uint256) {\\r\\n        bool isTriggered = false;\\r\\n        uint256 multiplier = 1;\\r\\n        if (reqCode == 0) {\\r\\n            // No requirement\\r\\n            isTriggered = true;\\r\\n        } else if (reqCode == 1) {\\r\\n            // Intelligence of offense pepemon <= 5.\\r\\n            isTriggered = (atkHand.currentBCstats.inte <= 5 );\\r\\n        } else if (reqCode == 2) {\\r\\n            // Number of defense cards of defense pepemon is 0.\\r\\n            isTriggered = true;\\r\\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\\r\\n                IPepemonCardOracle.SupportCardType supportCardType = _cardContract.getSupportCardTypeById(\\r\\n                    defHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (supportCardType == IPepemonCardOracle.SupportCardType.DEFENSE) {\\r\\n                    isTriggered = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        } else if (reqCode == 3) {\\r\\n            // Each +2 offense cards of offense pepemon.\\r\\n            return countCards(atkHand, IPepemonCardOracle.SupportCardType.OFFENSE, 2);\\r\\n        } else if (reqCode == 4) {\\r\\n            // Each +3 offense cards of offense pepemon.\\r\\n            return countCards(atkHand, IPepemonCardOracle.SupportCardType.OFFENSE, 3);\\r\\n        } else if (reqCode == 5) {\\r\\n            // Each offense card of offense pepemon.\\r\\n            return countCards(atkHand, IPepemonCardOracle.SupportCardType.OFFENSE, 0);\\r\\n\\r\\n        } else if (reqCode == 6) {\\r\\n            // Each +3 defense card of defense pepemon.\\r\\n            return countCards(defHand, IPepemonCardOracle.SupportCardType.DEFENSE, 3);\\r\\n        } else if (reqCode == 7) {\\r\\n            // Each +4 defense card of defense pepemon.\\r\\n            return countCards(defHand, IPepemonCardOracle.SupportCardType.DEFENSE, 4);\\r\\n        } else if (reqCode == 8) {\\r\\n            // Intelligence of defense pepemon <= 5.\\r\\n            isTriggered = (defHand.currentBCstats.inte <= 5 );\\r\\n        } else if (reqCode == 9) {\\r\\n            // Intelligence of defense pepemon >= 7.\\r\\n            isTriggered = (defHand.currentBCstats.inte >= 7 );\\r\\n        } else if (reqCode == 10) {\\r\\n            // Offense pepemon is using strong attack\\r\\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\\r\\n                IPepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                    atkHand.supportCardInHandIds[i]\\r\\n                );\\r\\n                if (card.supportCardType == IPepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\\r\\n                    isTriggered = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            multiplier = 1;\\r\\n        } else if (reqCode == 11) {\\r\\n            // The current HP is less than 50% of max HP.\\r\\n            isTriggered = lessThanHalfHP(isAttacker ? atkHand : defHand);\\r\\n        }\\r\\n        return (isTriggered, multiplier);\\r\\n    }\\r\\n\\r\\n    function lessThanHalfHP(Hand memory hand) internal view returns (bool){\\r\\n        return hand.health * 2 <= int256(uint256(_cardContract.getBattleCardById(hand.battleCardId).hp));\\r\\n    }\\r\\n    \\r\\n    function countCards(Hand memory hand, IPepemonCardOracle.SupportCardType cardType, int basePower) internal view returns (bool, uint){\\r\\n        uint multiplier = 0;\\r\\n        for (uint256 i = 0; i < hand.currentBCstats.inte; i++) {\\r\\n            IPepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\\r\\n                hand.supportCardInHandIds[i]\\r\\n            );\\r\\n            if (card.supportCardType != cardType) {\\r\\n                continue;\\r\\n            }\\r\\n            IPepemonCardOracle.EffectOne memory effectOne = card.effectOne;\\r\\n            if (effectOne.basePower == basePower || basePower == 0) {\\r\\n                multiplier++;\\r\\n            }\\r\\n        }\\r\\n        return (multiplier>0, multiplier);\\r\\n    }\\r\\n\\r\\n    function resistanceWeaknessCal(Hand memory atkHand, Hand memory defHand) internal view returns (int){\\r\\n        int adjustment = 0;\\r\\n        uint battleIdAtk = atkHand.battleCardId;\\r\\n        uint battleIdDef = defHand.battleCardId;\\r\\n        IPepemonCardOracle.BattleCardTypes atkType = _cardContract.getBattleCardById(battleIdAtk).element;\\r\\n        IPepemonCardOracle.BattleCardTypes defType = _cardContract.getBattleCardById(battleIdDef).element;\\r\\n        IPepemonCardOracle.BattleCardTypes weakness = _cardContract.getWeakResist(defType).weakness;\\r\\n        IPepemonCardOracle.BattleCardTypes resistance = _cardContract.getWeakResist(defType).resistance;\\r\\n        if (atkType == weakness) adjustment = 2;\\r\\n        if (atkType == resistance) adjustment = -2;\\r\\n        return adjustment;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0xa54e3c2ea4673de0dc0d1a3ad4a99f41074fa83400d2ca98d36a3d17d8c562b9\",\"license\":\"MIT\"},\"contracts/PepemonCardDeck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n//pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./iface/IPepemonFactory.sol\\\";\\r\\nimport \\\"./iface/IPepemonCardOracle.sol\\\";\\r\\nimport \\\"./lib/Arrays.sol\\\";\\r\\n\\r\\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Deck {\\r\\n        uint256 battleCardId;\\r\\n        uint256 supportCardCount;\\r\\n        mapping(uint256 => SupportCardType) supportCardTypes;\\r\\n        uint256[] supportCardTypeList;\\r\\n    }\\r\\n\\r\\n    struct SupportCardType {\\r\\n        uint256 supportCardId;\\r\\n        uint256 count;\\r\\n        uint256 pointer;\\r\\n        bool isEntity;\\r\\n    }\\r\\n\\r\\n    struct SupportCardRequest {\\r\\n        uint256 supportCardId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    uint256 public MAX_SUPPORT_CARDS;\\r\\n    uint256 public MIN_SUPPORT_CARDS;\\r\\n\\r\\n    // set this to 0 to disable minting test cards.\\r\\n    uint256 maxMintTestCardId;\\r\\n    uint256 minMintTestCardId;\\r\\n\\r\\n    uint256 nextDeckId;\\r\\n    address public battleCardAddress;\\r\\n    address public supportCardAddress;\\r\\n\\r\\n    mapping(uint256 => Deck) public decks;\\r\\n    mapping(address => uint256[]) public playerToDecks;\\r\\n\\r\\n    constructor() ERC721(\\\"Pepedeck\\\", \\\"Pepedeck\\\") {\\r\\n        nextDeckId = 1;\\r\\n        MAX_SUPPORT_CARDS = 60;\\r\\n        MIN_SUPPORT_CARDS = 40;\\r\\n        \\r\\n        minMintTestCardId = 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override supportInterface .\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC1155Receiver)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier sendersDeck(uint256 _deckId) {\\r\\n        require(msg.sender == ownerOf(_deckId), \\\"PepemonCardDeck: Not your deck\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // PUBLIC METHODS\\r\\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\\r\\n        battleCardAddress = _battleCardAddress;\\r\\n    }\\r\\n\\r\\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\\r\\n        supportCardAddress = _supportCardAddress;\\r\\n    }\\r\\n\\r\\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\\r\\n        MAX_SUPPORT_CARDS = _maxSupportCards;\\r\\n    }\\r\\n\\r\\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\\r\\n        MIN_SUPPORT_CARDS = _minSupportCards;\\r\\n    }\\r\\n\\r\\n    // ALLOW TEST MINTING\\r\\n    function setMintingCards(uint256 minCardId, uint256 maxCardId) public onlyOwner {\\r\\n        maxMintTestCardId = maxCardId;\\r\\n        minMintTestCardId = minCardId;\\r\\n    }\\r\\n    /**\\r\\n     * @dev right now there are 40 different cards that can be minted, but the maximum is configurable with maxMintTestCard. \\r\\n     * setting maxMintTestCard to 0 disables this card minting.\\r\\n     */\\r\\n    function mintCards() public {\\r\\n        require(maxMintTestCardId > 0, \\\"Minting test cards is disabled\\\");\\r\\n        IPepemonFactory(supportCardAddress).batchMint(minMintTestCardId, maxMintTestCardId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function createDeck() public {\\r\\n        _safeMint(msg.sender, nextDeckId);\\r\\n        playerToDecks[msg.sender].push(nextDeckId);\\r\\n        nextDeckId = nextDeckId.add(1);\\r\\n    }\\r\\n\\r\\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\\r\\n        require(\\r\\n            IPepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\\r\\n            \\\"PepemonCardDeck: Don't own battle card\\\"\\r\\n        );\\r\\n\\r\\n        require(battleCardId != decks[deckId].battleCardId, \\\"PepemonCardDeck: Card already in deck\\\");\\r\\n\\r\\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\\r\\n        decks[deckId].battleCardId = battleCardId;\\r\\n\\r\\n        IPepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \\\"\\\");\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\\r\\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\\r\\n\\r\\n        decks[_deckId].battleCardId = 0;\\r\\n\\r\\n        returnBattleCardFromDeck(oldBattleCardId);\\r\\n    }\\r\\n\\r\\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\\r\\n        for (uint256 i = 0; i < supportCards.length; i++) {\\r\\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\\r\\n        for (uint256 i = 0; i < _supportCards.length; i++) {\\r\\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // INTERNALS\\r\\n    function addSupportCardToDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \\\"PepemonCardDeck: Deck overflow\\\");\\r\\n        require(\\r\\n            IPepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\\r\\n            \\\"PepemonCardDeck: You don't have enough of this card\\\"\\r\\n        );\\r\\n\\r\\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\\r\\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\\r\\n                supportCardId: _supportCardId,\\r\\n                count: _amount,\\r\\n                pointer: decks[_deckId].supportCardTypeList.length,\\r\\n                isEntity: true\\r\\n            });\\r\\n\\r\\n            // Prepend the ID to the list\\r\\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\\r\\n        } else {\\r\\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n            supportCard.count = supportCard.count.add(_amount);\\r\\n        }\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\\r\\n\\r\\n        IPepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function removeSupportCardFromDeck(\\r\\n        uint256 _deckId,\\r\\n        uint256 _supportCardId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        supportCardList.count = supportCardList.count.sub(_amount);\\r\\n\\r\\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\\r\\n\\r\\n        if (supportCardList.count == 0) {\\r\\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\\r\\n\\r\\n            // update the pointer of the item to be swapped\\r\\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\\r\\n\\r\\n            // swap the last item of the list with the one to be deleted\\r\\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\\r\\n            decks[_deckId].supportCardTypeList.pop();\\r\\n\\r\\n            delete decks[_deckId].supportCardTypes[_supportCardId];\\r\\n        }\\r\\n\\r\\n        IPepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\\r\\n        if (_battleCardId != 0) {\\r\\n            IPepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // VIEWS\\r\\n    function getDeckCount(address player) public view returns (uint256) {\\r\\n        return playerToDecks[player].length;\\r\\n    }\\r\\n\\r\\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\\r\\n        return decks[_deckId].battleCardId;\\r\\n    }\\r\\n\\r\\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n\\r\\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            supportCardTypes[i] = deck.supportCardTypeList[i];\\r\\n        }\\r\\n\\r\\n        return supportCardTypes;\\r\\n    }\\r\\n\\r\\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\\r\\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\\r\\n    }\\r\\n\\r\\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\\r\\n        return decks[deckId].supportCardCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns array of support cards for a deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\\r\\n        Deck storage deck = decks[_deckId];\\r\\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\\r\\n        uint256 idx = 0;\\r\\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\\r\\n            uint256 supportCardId = deck.supportCardTypeList[i];\\r\\n            uint256 count = deck.supportCardTypes[supportCardId].count;\\r\\n            for (uint256 j = 0; j < count; j++) {\\r\\n                supportCards[idx++] = supportCardId;\\r\\n            }\\r\\n        }\\r\\n        return supportCards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Shuffles deck\\r\\n     * @param _deckId uint256 ID of the deck\\r\\n     */\\r\\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\\r\\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\\r\\n        return Arrays.shuffle(totalSupportCards, _seed);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d47f7db2ffb7cedba3027f383c418ff017057cbca2106e366e3e93f976534a1\",\"license\":\"MIT\"},\"contracts/iface/IPepemonCardOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\\r\\n**/\\r\\ninterface IPepemonCardOracle {\\r\\n\\r\\n    enum SupportCardType {\\r\\n        OFFENSE,\\r\\n        STRONG_OFFENSE,\\r\\n        DEFENSE,\\r\\n        STRONG_DEFENSE\\r\\n    }\\r\\n\\r\\n    enum EffectTo {\\r\\n        ATTACK,\\r\\n        STRONG_ATTACK,\\r\\n        DEFENSE,\\r\\n        STRONG_DEFENSE,\\r\\n        SPEED,\\r\\n        INTELLIGENCE\\r\\n    }\\r\\n\\r\\n    enum EffectFor {\\r\\n        ME,\\r\\n        ENEMY\\r\\n    }\\r\\n\\r\\n    enum BattleCardTypes{\\r\\n        FIRE,\\r\\n        GRASS,\\r\\n        WATER,\\r\\n        LIGHTNING,\\r\\n        WIND,\\r\\n        POISON,\\r\\n        GHOST,\\r\\n        FAIRY,\\r\\n        EARTH,\\r\\n        UNKNOWN,\\r\\n        NONE\\r\\n    }\\r\\n\\r\\n    struct BattleCardStats {\\r\\n        uint256 battleCardId;\\r\\n        BattleCardTypes element;\\r\\n        uint16 hp; // hitpoints\\r\\n        uint16 spd; // speed\\r\\n        uint16 inte; // intelligence\\r\\n        uint16 def; // defense\\r\\n        uint16 atk; // attack\\r\\n        uint16 sAtk; // special attack\\r\\n        uint16 sDef; // special defense\\r\\n    }\\r\\n\\r\\n    struct SupportCardStats {\\r\\n        uint256 supportCardId;\\r\\n        SupportCardType supportCardType;\\r\\n        EffectOne effectOne;\\r\\n        EffectMany effectMany;\\r\\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\\r\\n        bool unstackable;\\r\\n        // This property is for EffectMany now.\\r\\n        // If true, assume the card is already in effect\\r\\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\\r\\n        bool unresettable;\\r\\n    }\\r\\n\\r\\n    struct EffectOne {\\r\\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\\r\\n        \\r\\n        //basePower = power if req not met\\r\\n        int16 basePower;\\r\\n\\r\\n        //triggeredPower = power if req met\\r\\n        int16 triggeredPower;\\r\\n        EffectTo effectTo;\\r\\n        EffectFor effectFor;\\r\\n        uint16 reqCode; //requirement code\\r\\n    }\\r\\n\\r\\n    struct EffectMany {\\r\\n        int16 power;\\r\\n        uint16 numTurns;\\r\\n        EffectTo effectTo;\\r\\n        EffectFor effectFor;\\r\\n        uint16 reqCode; //requirement code\\r\\n    }\\r\\n\\r\\n    //Struct for keeping track of weakness / resistance\\r\\n    struct elementWR{\\r\\n        BattleCardTypes weakness;\\r\\n        BattleCardTypes resistance;\\r\\n    }\\r\\n\\r\\n    // mappings\\r\\n    function battleCardStats(uint256 x) view external returns (BattleCardStats memory);\\r\\n    \\r\\n    function supportCardStats(uint256 x) view external returns (SupportCardStats memory);\\r\\n    \\r\\n    function elementDecode(BattleCardTypes x) view external returns (string memory);\\r\\n    \\r\\n    function weakResist(BattleCardTypes x) view external returns (elementWR memory);\\r\\n\\r\\n    // other functions\\r\\n    function addBattleCard(BattleCardStats memory cardData) external;\\r\\n\\r\\n    function updateBattleCard(BattleCardStats memory cardData) external;\\r\\n\\r\\n    function getBattleCardById(uint256 _id) view external returns (BattleCardStats memory);\\r\\n\\r\\n    function addSupportCard(SupportCardStats memory cardData) external;\\r\\n\\r\\n    function updateSupportCard(SupportCardStats memory cardData) external;\\r\\n\\r\\n    function getSupportCardById(uint256 _id) view  external returns (SupportCardStats memory);\\r\\n\\r\\n    function getWeakResist(BattleCardTypes element) view  external returns (elementWR memory);\\r\\n\\r\\n    function getSupportCardTypeById(uint256 _id) view external returns (SupportCardType);\\r\\n}\\r\\n\",\"keccak256\":\"0x363ca2212ab0c9878d383244b9d74a204f455c25b5341229a79cc3d5404c61be\",\"license\":\"MIT\"},\"contracts/iface/IPepemonFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPepemonFactory {\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _amount,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function setApprovalForAll(\\r\\n        address _operator,\\r\\n        bool _approved\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(\\r\\n        address _owner, \\r\\n        uint256 _id\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function airdrop(\\r\\n        uint256 _id,\\r\\n        address[] memory _addresses\\r\\n    ) external;\\r\\n\\r\\n    function batchMint(\\r\\n        uint start, \\r\\n        uint end, \\r\\n        address to) \\r\\n    external;\\r\\n\\r\\n    function addMinter(\\r\\n        address account\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8d53435857db30870aef3bf5e7ab4ebbdc73dda9b7f05b90d406cee0a5848cbe\",\"license\":\"MIT\"},\"contracts/lib/AdminRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AdminRole {\\n  using Roles for Roles.Role;\\n\\n  event AdminAdded(address indexed account);\\n  event AdminRemoved(address indexed account);\\n\\n  Roles.Role private admins;\\n\\n  constructor() {\\n    _addAdmin(msg.sender);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(msg.sender));\\n    _;\\n  }\\n\\n  function isAdmin(address account) public view returns (bool) {\\n    return admins.has(account);\\n  }\\n\\n  function addAdmin(address account) public onlyAdmin {\\n    _addAdmin(account);\\n  }\\n\\n  function renounceAdmin() public {\\n    _removeAdmin(msg.sender);\\n  }\\n\\n  function _addAdmin(address account) internal {\\n    admins.add(account);\\n    emit AdminAdded(account);\\n  }\\n\\n  function _removeAdmin(address account) internal {\\n    admins.remove(account);\\n    emit AdminRemoved(account);\\n  }\\n}\",\"keccak256\":\"0x087322ecbf7bdc39315bedc5ec603149a119a35910f82ceb131820c1b7bb9804\",\"license\":\"MIT\"},\"contracts/lib/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Arrays {\\n    //Shuffles an array of uints with random seed\\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            //Pick random index to swap current element with\\n            uint256 n = i + _seed % (_elements.length - i);\\n\\n            //swap elements\\n            uint256 temp = _elements[n];\\n            _elements[n] = _elements[i];\\n            _elements[i] = temp;\\n\\n            //Create new pseudorandom number using seed.\\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\\n        }\\n        return _elements;\\n    }\\n}\\n\",\"keccak256\":\"0x61371b66c2b9849ea3837a60073233c577f8978017339fcd3bf169cb498a1828\",\"license\":\"MIT\"},\"contracts/lib/ChainLinkRngOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"./AdminRole.sol\\\";\\r\\n\\r\\nabstract contract ChainLinkRngOracle is VRFConsumerBase, AdminRole {\\r\\n    bytes32 immutable keyHash;\\r\\n    bytes32 public lastRequestId;\\r\\n    uint256 internal fee;\\r\\n\\r\\n    address constant maticLink = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\r\\n    address constant maticVrfCoordinator = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\\r\\n    bytes32 constant maticKeyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\\r\\n\\r\\n    address constant mumbaiLink = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\\r\\n    address constant mumbaiVrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;\\r\\n    bytes32 constant mumbaiKeyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\\r\\n\\r\\n    address constant fantomTestnetLink = 0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F;\\r\\n    address constant fantomTestnetVrfCoordinator = 0xbd13f08b8352A3635218ab9418E340c60d6Eb418;\\r\\n    bytes32 constant fantomTestnetKeyHash = 0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4;\\r\\n\\r\\n    address constant fantomLink = 0x6F43FF82CCA38001B6699a8AC47A2d0E66939407;\\r\\n    address constant fantomVrfCoordinator = 0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634;\\r\\n    bytes32 constant fantomKeyHash = 0x5881eea62f9876043df723cf89f0c2bb6f950da25e9dfe66995c24f919c8f8ab;\\r\\n\\r\\n\\r\\n\\r\\n    mapping(bytes32 => uint256) internal results;\\r\\n\\r\\n    constructor() VRFConsumerBase(fantomTestnetVrfCoordinator, fantomTestnetLink) {\\r\\n        keyHash = fantomTestnetKeyHash;\\r\\n        fee = 1 ether / 1000;\\r\\n    }\\r\\n\\r\\n    //Get a new random number (paying link for it)\\r\\n    //Only callable by admin\\r\\n    function getNewRandomNumber() public onlyAdmin returns (bytes32 requestId) {\\r\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\r\\n        lastRequestId = requestRandomness(keyHash, fee);\\r\\n        return lastRequestId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n        results[requestId] = randomness;\\r\\n    }\\r\\n\\r\\n    function fetchNumberByRequestId(bytes32 _requestId) public view returns (uint256) {\\r\\n        return results[_requestId];\\r\\n    }\\r\\n\\r\\n    //Get most recent random number and use that as randomness source    \\r\\n    function getRandomNumber() public view returns (uint256){\\r\\n        return fetchNumberByRequestId(lastRequestId);        \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8a2e11145d4d975ccc5d32cfc4c2a35547edc104c47f4f009bf444a1ce38137\",\"license\":\"MIT\"},\"contracts/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an account access to this role\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(!has(role, account));\\n\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev remove an account's access to this role\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(account != address(0));\\n    require(has(role, account));\\n\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev check if an account has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address account)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    require(account != address(0));\\n    return role.bearer[account];\\n  }\\n}\",\"keccak256\":\"0xd66f1c8050d61971204bf1249496bd98b69fd79b2011a630767f817d7201b56c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637cdb32cd1161008c578063c6b34e1c11610066578063c6b34e1c146101c6578063d8963fc4146101e7578063daf98120146101fa578063ee56b3911461021a57600080fd5b80637cdb32cd1461018a57806380cfb679146101ab5780638bad0c0a146101be57600080fd5b8063108a3b42146100d457806320de985c1461010b57806324d7806c1461012c5780632c1e3c391461014f57806346864cd8146101645780637048027514610177575b600080fd5b6100e76100e236600461313b565b610248565b6040805192151583526001600160a01b039091166020830152015b60405180910390f35b61011e6101193660046131b9565b610292565b604051610102929190613601565b61013f61013a366004612f41565b610ac2565b6040519015158152602001610102565b61016261015d366004612f41565b610ad4565b005b610162610172366004612f41565b610b08565b610162610185366004612f41565b610b3c565b61019d61019836600461313b565b610b5a565b6040516101029291906135bc565b6101626101b9366004612f41565b610bfa565b610162610c34565b6101d96101d4366004612f63565b610c3f565b6040516101029291906135e4565b6101626101f5366004613054565b611051565b61020d61020836600461313b565b611076565b60405161010291906135ad565b61023a610228366004613339565b60016020526000908152604090205481565b604051908152602001610102565b6000806000836020015160400151600001511361026b5750506020015151600191565b6040808401510151516000126102875750506040015151600191565b506000928392509050565b61029a612955565b6102a2612955565b60008060005b866040015160200151811015610694576000876060015182600881106102d0576102d06138d8565b6020020151600354604051634ca7d96360e11b8152600481018390529192506000916101009091046001600160a01b03169063994fb2c6906024016101c06040518083038186803b15801561032457600080fd5b505afa158015610338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035c91906131f0565b9050600081602001516003811115610376576103766138c2565b14156104305760008160400151905060008061039d8c8c856080015161ffff166001611212565b9150915081156103f65780836020015160010b6103ba919061375f565b8c604001516060018181516103cf9190613706565b90525060208301516103e590829060010b61375f565b6103ef9088613706565b9650610428565b826000015160010b8c604001516060018181516104139190613706565b90525082516104259060010b88613706565b96505b50505061067f565b600181602001516003811115610448576104486138c2565b14156106785780608001511561050d57600160005b848110156104a2578a60600151816008811061047b5761047b6138d8565b602002015184141561049057600091506104a2565b8061049a8161386f565b91505061045d565b50806104b057505050610682565b60005b8a608001518110156104fd578a60a0015181600581106104d5576104d56138d8565b6020020151518414156104eb57600091506104fd565b806104f58161386f565b9150506104b3565b508061050b57505050610682565b505b60008160400151905060008061052e8c8c856080015161ffff166001611212565b9150915081156105e05760018111156105715780836020015160010b610554919061375f565b8c604001516060018181516105699190613706565b905250610612565b600183604001516005811115610589576105896138c2565b14156105a957505050506040880151608081015160609091015250610682565b602083015160010b6105c357600197505050505050610682565b826020015160010b8c604001516060018181516105699190613706565b826000015160010b8c604001516060018181516105fd9190613706565b905250825161060f9060010b88613706565b96505b60608401515160010b156104285760058c60800151101561042857604080518082019091528581526060850151602082015260a08d015160808e018051906106598261386f565b90526005811061066b5761066b6138d8565b602002015250505061067f565b5050610682565b50505b8061068c8161386f565b9150506102a8565b5081156106b5578086604001516060018181516106b19190613706565b9052505b506000905080805b856040015160200151811015610a97576000866060015182600881106106e5576106e56138d8565b6020020151600354604051634ca7d96360e11b8152600481018390529192506000916101009091046001600160a01b03169063994fb2c6906024016101c06040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077191906131f0565b905060028160200151600381111561078b5761078b6138c2565b1415610845576000816040015190506000806107b28c8c856080015161ffff166000611212565b91509150811561080b5780836020015160010b6107cf919061375f565b8b604001516040018181516107e49190613706565b90525060208301516107fa90829060010b61375f565b6108049088613706565b965061083d565b826000015160010b8b604001516040018181516108289190613706565b905250825161083a9060010b88613706565b96505b505050610a82565b60038160200151600381111561085d5761085d6138c2565b1415610a7b5780608001511561091557600160005b848110156108b75789606001518160088110610890576108906138d8565b60200201518414156108a557600091506108b7565b806108af8161386f565b915050610872565b5060005b8960800151811015610905578960a0015181600581106108dd576108dd6138d8565b6020020151518414156108f35760009150610905565b806108fd8161386f565b9150506108bb565b508061091357505050610a85565b505b6000816040015190506000806109368c8c856080015161ffff166000611212565b9150915081156109e35780156109765780836020015160010b610959919061375f565b8b6040015160400181815161096e9190613706565b905250610a15565b60038360400151600581111561098e5761098e6138c2565b14156109ac575050505060408781015160a081015191015250610a85565b602083015160010b6109c657600197505050505050610a85565b826020015160010b8b6040015160400181815161096e9190613706565b826000015160010b8b60400151604001818151610a009190613706565b9052508251610a129060010b88613706565b96505b60608401515160010b1561083d5760058b60800151101561083d57604080518082019091528581526060850151602082015260a08c015160808d01805190610a5c8261386f565b905260058110610a6e57610a6e6138d8565b6020020152505050610a82565b5050610a85565b50505b80610a8f8161386f565b9150506106bd565b508115610ab857808560400151604001818151610ab49190613706565b9052505b5093949293505050565b6000610ace818361152d565b92915050565b610add33610ac2565b610ae657600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610b1133610ac2565b610b1a57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610b4533610ac2565b610b4e57600080fd5b610b5781611562565b50565b610b6261299c565b600080610b9984602001516040015160200151856040015160400151602001518660200151602001518760400151602001516115a4565b9050610ba584826118f8565b935060005b610bb385611c5c565b9450610bbe85611076565b9450600080610bcc87610248565b915091508115610bdf579150610bf29050565b610be98785611dc9565b96505050610baa565b939492505050565b610c0333610ac2565b610c0c57600080fd5b600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610c3d33611e0f565b565b610c4761299c565b6000610c5233610ac2565b610c5b57600080fd5b60035460ff1680610c7e5750836001600160a01b0316866001600160a01b031614155b610cdc5760405162461bcd60e51b815260206004820152602560248201527f506570656d6f6e426174746c653a2043616e6e6f7420626174746c6520796f756044820152643939b2b63360d91b606482015260840160405180910390fd5b6004805460405163a090195d60e01b81529182018790526000916001600160a01b039091169063a090195d90602401604080518083038186803b158015610d2257600080fd5b505afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a919061336b565b506004805460405163a090195d60e01b81529182018790529192506000916001600160a01b03169063a090195d90602401604080518083038186803b158015610da257600080fd5b505afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda919061336b565b50600354604051632552294360e11b8152600481018590529192506000916101009091046001600160a01b031690634aa45286906024016101206040518083038186803b158015610e2a57600080fd5b505afa158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e62919061308c565b600354604051632552294360e11b8152600481018590529192506000916101009091046001600160a01b031690634aa45286906024016101206040518083038186803b158015610eb157600080fd5b505afa158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee9919061308c565b9050610ef361299c565b600254816000018181525050826040015161ffff1681602001516040015160000181815250508481602001516040015160200181815250508a8160200151600001906001600160a01b031690816001600160a01b0316815250508981602001516020018181525050816040015161ffff168160400151604001516000018181525050838160400151604001516020018181525050888160400151600001906001600160a01b031690816001600160a01b0316815250508781604001516020018181525050610fc081611e51565b6002805460009081526001602090815260409182902093909355905481519081529182018c905281018990526001600160a01b03808b1691908d16907f120b95ba2da84b9e69c1acba6099b801de6f291523db8bdf56b0c268b6f2c42c9060600160405180910390a3600280548291600061103a8361386f565b919050559650965050505050505b94509492505050565b61105a33610ac2565b61106357600080fd5b6003805460ff1916911515919091179055565b61107e61299c565b611086612955565b61108e612955565b6000846080015160018111156110a6576110a66138c2565b14156110c757836020015160400151915083604001516040015190506110de565b836040015160400151915083602001516040015190505b6110e88282610292565b90925090506110f78282611f37565b826040015160600181815161110c9190613706565b905250604080820151810151908301516060015113156111595780604001516040015182604001516060015161114291906137e4565b815182906111519083906137e4565b905250611170565b60018160000181815161116c91906137e4565b9052505b600084608001516001811115611188576111886138c2565b14156111a8576020840151604090810183905280850151018190526111be565b6020840151604090810182905280850151018290525b509192915050565b6001600160a01b0381166111d957600080fd5b6111e3828261152d565b156111ed57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080806001856112265760019150611520565b856001141561124357600588604001516020015111159150611520565b8560021415611346576001915060005b87604001516020015181101561134057600354606089015160009161010090046001600160a01b031690634bcb9613908460088110611294576112946138d8565b60200201516040518263ffffffff1660e01b81526004016112b791815260200190565b60206040518083038186803b1580156112cf57600080fd5b505afa1580156112e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113079190613071565b9050600281600381111561131d5761131d6138c2565b141561132d576000935050611340565b50806113388161386f565b915050611253565b50611520565b85600314156113675761135c88600060026121e1565b935093505050611048565b856004141561137d5761135c88600060036121e1565b85600514156113925761135c886000806121e1565b85600614156113a85761135c87600260036121e1565b85600714156113be5761135c87600260046121e1565b85600814156113db57600587604001516020015111159150611520565b85600914156113f857600787604001516020015110159150611520565b85600a14156115005760005b8860400151602001518110156114f65760035460608a015160009161010090046001600160a01b03169063994fb2c6908460088110611445576114456138d8565b60200201516040518263ffffffff1660e01b815260040161146891815260200190565b6101c06040518083038186803b15801561148157600080fd5b505afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b991906131f0565b90506001816020015160038111156114d3576114d36138c2565b14156114e35760019350506114f6565b50806114ee8161386f565b915050611404565b5060019050611520565b85600b14156115205761151d85611517578761231e565b8861231e565b91505b9097909650945050505050565b60006001600160a01b03821661154257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61156d6000826111c6565b6040516001600160a01b038216907f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990600090a250565b6115ac6129ee565b600354604051632552294360e11b81526004810187905260009161010090046001600160a01b031690634aa45286906024016101206040518083038186803b1580156115f757600080fd5b505afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f919061308c565b600354604051632552294360e11b8152600481018890529192506000916101009091046001600160a01b031690634aa45286906024016101206040518083038186803b15801561167e57600080fd5b505afa158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b6919061308c565b600480546040516337260b2960e11b81529182018890529192506000916001600160a01b031690636e4c16529060240160006040518083038186803b1580156116fe57600080fd5b505afa158015611712573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261173a9190810190612fa7565b600480546040516337260b2960e11b81529182018890529192506000916001600160a01b031690636e4c16529060240160006040518083038186803b15801561178257600080fd5b505afa158015611796573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117be9190810190612fa7565b60048054604051639895d74960e01b81529182018a90529192506000916001600160a01b031690639895d7499060240160206040518083038186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190613352565b60048054604051639895d74960e01b81529182018a90529192506000916001600160a01b031690639895d7499060240160206040518083038186803b15801561188657600080fd5b505afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be9190613352565b6040805160c08101825293845260208401919091528201959095526060810193909352608083019190915260a08201529695505050505050565b61190061299c565b602083015160408085015190840151611918906123c8565b6040808401510152606084015161192e906123c8565b60408083015101528351602085015160608701516000906119519060059061388a565b1590508015611a4a576000611974886080015161196f60458c61242e565b61248b565b905060005b848110156119c857818181518110611993576119936138d8565b6020026020010151876060015182603c81106119b1576119b16138d8565b6020020152806119c08161386f565b915050611979565b5060006080870181905260a08901516119e79061196f6101a48d61242e565b905060005b84811015611a3b57818181518110611a0657611a066138d8565b6020026020010151876060015182603c8110611a2457611a246138d8565b602002015280611a338161386f565b9150506119ec565b50506000608086015250611a76565b611a5c85604001518560400151612576565b6040808701829052850151611a7091612576565b60408501525b6000856080015184611a889190613823565b9050856040015160400151602001518110611aaf5785604001516040015160200151611ab1565b805b60408088015101516020015260005b86604001516040015160200151811015611b2e5760608701516080880151611ae89083613747565b603c8110611af857611af86138d8565b60200201518760400151606001518260088110611b1757611b176138d8565b602002015280611b268161386f565b915050611ac0565b508560400151604001516020015186608001818151611b4d9190613747565b9052506080850151611b5f9084613823565b9050846040015160400151602001518110611b865784604001516040015160200151611b88565b805b60408087015101516020015260005b85604001516040015160200151811015611c055760608601516080870151611bbf9083613747565b603c8110611bcf57611bcf6138d8565b60200201518660400151606001518260088110611bee57611bee6138d8565b602002015280611bfd8161386f565b915050611b97565b508460400151604001516020015185608001818151611c249190613747565b905250602089018690526040890185905260608901805190611c458261386f565b90525050600060a089015250959695505050505050565b611c6461299c565b6020820151604090810151810151818401518201519091015160008460a001516001811115611c9557611c956138c2565b1415611d6e57805182511315611cb557600060808501815b9052506111be565b805182511215611cd9576080840160015b90816001811115611cad57611cad6138c2565b806020015182602001511115611cf457608084016000611cc6565b806020015182602001511015611d0f57608084016001611cc6565b60006002611d2062010f2c8761242e565b611d2a919061388a565b90508015611d39576001611d3c565b60005b85608001906001811115611d5257611d526138c2565b90816001811115611d6557611d656138c2565b905250506111be565b600084608001516001811115611d8657611d866138c2565b14611d92576000611d95565b60015b84608001906001811115611dab57611dab6138c2565b90816001811115611dbe57611dbe6138c2565b905250509192915050565b611dd161299c565b60008360a001516001811115611de957611de96138c2565b1415611dfb57600160a0840152611e08565b611e0583836118f8565b92505b5090919050565b611e1a60008261290d565b6040516001600160a01b038216907fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90600090a250565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663dbdff2c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea257600080fd5b505afa158015611eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eda9190613352565b602084810151516040958601515186514381850152808801949094526bffffffffffffffffffffffff19606092831b811683860152911b166074830152845180830360680181526088909201909452805193019290922092915050565b60208281015190820151600354604051632552294360e11b815260048101849052600093849390929091849161010090046001600160a01b031690634aa45286906024016101206040518083038186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcc919061308c565b60200151600354604051632552294360e11b8152600481018590529192506000916101009091046001600160a01b031690634aa45286906024016101206040518083038186803b15801561201f57600080fd5b505afa158015612033573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612057919061308c565b6020015160035460405163b230345360e01b81529192506000916101009091046001600160a01b03169063b230345390612095908590600401613593565b604080518083038186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e491906132de565b5160035460405163b230345360e01b81529192506000916101009091046001600160a01b03169063b23034539061211f908690600401613593565b604080518083038186803b15801561213657600080fd5b505afa15801561214a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216e91906132de565b60200151905081600a811115612186576121866138c2565b84600a811115612198576121986138c2565b14156121a357600296505b80600a8111156121b5576121b56138c2565b84600a8111156121c7576121c76138c2565b14156121d35760011996505b509498975050505050505050565b6000806000805b86604001516020015181101561230f57600354606088015160009161010090046001600160a01b03169063994fb2c6908460088110612229576122296138d8565b60200201516040518263ffffffff1660e01b815260040161224c91815260200190565b6101c06040518083038186803b15801561226557600080fd5b505afa158015612279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229d91906131f0565b90508660038111156122b1576122b16138c2565b816020015160038111156122c7576122c76138c2565b146122d257506122fd565b6040810151805160010b8714806122e7575086155b156122fa57836122f68161386f565b9450505b50505b806123078161386f565b9150506121e8565b50801515969095509350505050565b6003546020820151604051632552294360e11b8152600481019190915260009161010090046001600160a01b031690634aa45286906024016101206040518083038186803b15801561236f57600080fd5b505afa158015612383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a7919061308c565b6040015161ffff16826000015160026123c0919061375f565b131592915050565b6123d0612a30565b6123d8612a30565b60608084015161ffff90811683526080808601518216602085015260a0808701518316604086015260c087015183169385019390935260e086015182169084015261010090940151909316928101929092525090565b6060810151815160009081526001602090815260408083205490519293849361246b93889391019283526020830191909152604082015260600190565b60408051808303601f190181529190528051602090910120949350505050565b606060005b83518110156111be5760008185516124a89190613823565b6124b2908561388a565b6124bc9083613747565b905060008582815181106124d2576124d26138d8565b602002602001015190508583815181106124ee576124ee6138d8565b6020026020010151868381518110612508576125086138d8565b60200260200101818152505080868481518110612527576125276138d8565b6020026020010181815250508460405160200161254691815260200190565b6040516020818303038152906040528051906020012060001c94505050808061256e9061386f565b915050612490565b61257e612955565b60005b83608001518110156111be5760008460a0015182600581106125a5576125a56138d8565b602002015190506000816020015190506001816020015161ffff16106128f8576000816060015160018111156125dd576125dd6138c2565b141561270d576000816040015160058111156125fb576125fb6138c2565b141561262657806000015160010b866040015160600181815161261e9190613706565b90525061282a565b60028160400151600581111561263e5761263e6138c2565b141561266157806000015160010b866040015160400181815161261e9190613706565b600481604001516005811115612679576126796138c2565b141561269c57806000015160010b866040015160000181815161261e9190613706565b6005816040015160058111156126b4576126b46138c2565b1415612708576000816000015160010b8760400151602001516126d79190613706565b9050600881136126e757806126ea565b60085b9050600081136126fb5760006126fd565b805b604088015160200152505b61282a565b600081604001516005811115612725576127256138c2565b141561274857806000015160010b856040015160600181815161261e9190613706565b600281604001516005811115612760576127606138c2565b141561278357806000015160010b856040015160400181815161261e9190613706565b60048160400151600581111561279b5761279b6138c2565b14156127be57806000015160010b856040015160000181815161261e9190613706565b6005816040015160058111156127d6576127d66138c2565b141561282a576000816000015160010b8660400151602001516127f99190613706565b905060088113612809578061280c565b60085b90506000811361281d57600061281f565b805b604087015160200152505b6020810180519061283a8261383a565b61ffff908116909152602083015116151590506128f857600186608001516128629190613823565b8310156128b0578560a001516001876080015161287f9190613823565b6005811061288f5761288f6138d8565b60200201518660a0015184600581106128aa576128aa6138d8565b60200201525b8560a00151600187608001516128c69190613823565b600581106128d6576128d66138d8565b602002016128e2612a66565b9052608086018051906128f482613858565b9052505b505080806129059061386f565b915050612581565b6001600160a01b03811661292057600080fd5b61292a828261152d565b61293357600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6040518060c001604052806000815260200160008152602001612976612a30565b8152602001612983612aaa565b815260200160008152602001612997612ac9565b905290565b6040518060c00160405280600081526020016129b6612af6565b81526020016129c3612af6565b815260200160008152602001600060018111156129e2576129e26138c2565b81526020016000905290565b6040518060c001604052806000815260200160008152602001612a0f612b2f565b8152602001612a1c612b2f565b815260200160608152602001606081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060400160405280600081526020016129976040805160a0810182526000808252602082018190529091820190815260200160008152600060209091015290565b6040518061010001604052806008906020820280368337509192915050565b6040518060a001604052806005905b612ae0612a66565b815260200190600190039081612ad85790505090565b6040805160a08101825260008082526020820152908101612b15612955565b8152602001612b22612b7c565b8152602001600081525090565b60408051610120810190915260008082526020820190815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b604051806107800160405280603c906020820280368337509192915050565b80356001600160a01b0381168114612bb257600080fd5b919050565b600082601f830112612bc857600080fd5b612bd0613647565b8083856103c086011115612be357600080fd5b60005b6005811015612ca25781870360c080821215612c0157600080fd5b612c0961361e565b84358152602060a080601f1986011215612c2257600080fd5b612c2a613647565b945081870135612c398161393c565b8552604087810135612c4a8161394b565b86840152606088810135612c5d8161392f565b8083890152506080915081890135612c7481613922565b908701529087013590612c868261394b565b8501528181019390935286529401939190910190600101612be6565b509095945050505050565b600082601f830112612cbe57600080fd5b60405161010080820182811067ffffffffffffffff82111715612ce357612ce36138ee565b6040528184828101871015612cf757600080fd5b600092505b6008831015612d1c57803582526001929092019160209182019101612cfc565b509195945050505050565b8051612bb281613914565b8051600b8110612bb257600080fd5b805160048110612bb257600080fd5b600060a08284031215612d6257600080fd5b612d6a613647565b90508151612d778161393c565b81526020820151612d878161394b565b60208201526040820151612d9a8161392f565b60408201526060820151612dad81613922565b60608201526080820151612dc08161394b565b608082015292915050565b60008183036105e0811215612ddf57600080fd5b612de761366a565b9150823582526020830135602083015260c0603f1982011215612e0957600080fd5b50612e1261366a565b60408301358152606083013560208201526080830135604082015260a0830135606082015260c0830135608082015260e083013560a082015280604083015250612e60836101008401612cad565b60608201526102008201356080820152612e7e836102208401612bb7565b60a082015292915050565b6000610dc08284031215612e9c57600080fd5b612ea4613647565b9050612eaf82612b9b565b815260208083013581830152612ec88460408501612dcb565b60408301528361063f840112612edd57600080fd5b612ee56136b1565b806106208501610da0860187811115612efd57600080fd5b60005b603c811015612f1d57823585529385019391850191600101612f00565b5082606087015280356080870152505050505092915050565b8051612bb28161394b565b600060208284031215612f5357600080fd5b612f5c82612b9b565b9392505050565b60008060008060808587031215612f7957600080fd5b612f8285612b9b565b935060208501359250612f9760408601612b9b565b9396929550929360600135925050565b60006020808385031215612fba57600080fd5b825167ffffffffffffffff80821115612fd257600080fd5b818501915085601f830112612fe657600080fd5b815181811115612ff857612ff86138ee565b8060051b91506130098483016136d5565b8181528481019084860184860187018a101561302457600080fd5b600095505b83861015613047578051835260019590950194918601918601613029565b5098975050505050505050565b60006020828403121561306657600080fd5b8135612f5c81613914565b60006020828403121561308357600080fd5b612f5c82612d41565b6000610120828403121561309f57600080fd5b6130a761368d565b825181526130b760208401612d32565b60208201526130c860408401612f36565b60408201526130d960608401612f36565b60608201526130ea60808401612f36565b60808201526130fb60a08401612f36565b60a082015261310c60c08401612f36565b60c082015261311d60e08401612f36565b60e0820152610100613130818501612f36565b908201529392505050565b6000611c00828403121561314e57600080fd5b61315661366a565b823581526131678460208501612e89565b602082015261317a84610de08501612e89565b6040820152611ba08301356060820152611bc083013561319981613922565b6080820152611be08301356131ad81613922565b60a08201529392505050565b600080610bc083850312156131cd57600080fd5b6131d78484612dcb565b91506131e7846105e08501612dcb565b90509250929050565b60008183036101c081121561320457600080fd5b61320c61366a565b8351815261321c60208501612d41565b602082015260a0603f198301121561323357600080fd5b61323b613647565b9150604084015161324b8161393c565b8252606084015161325b8161393c565b6020830152608084015161326e8161392f565b604083015260a084015161328181613922565b606083015260c08401516132948161394b565b6080830152604081018290526132ad8560e08601612d50565b60608201526132bf6101808501612d27565b60808201526132d16101a08501612d27565b60a0820152949350505050565b6000604082840312156132f057600080fd5b6040516040810181811067ffffffffffffffff82111715613313576133136138ee565b60405261331f83612d32565b815261332d60208401612d32565b60208201529392505050565b60006020828403121561334b57600080fd5b5035919050565b60006020828403121561336457600080fd5b5051919050565b6000806040838503121561337e57600080fd5b505080516020909101519092909150565b8060005b600581101561341b578151805185526020808201519150815160010b8187015280820151604061ffff808316828a015281850151925060609150600683106133dd576133dd6138c2565b88820192909252830151906080906133f483613904565b88820192909252929092015190911660a086015260c0909401939190910190600101613393565b50505050565b8060005b600881101561341b578151845260209384019390910190600101613425565b80518252602081015161345a602084018261352c565b50604081015161346e610de084018261352c565b506060810151611ba0830152608081015161348881613904565b611bc083015260a081015161349c81613904565b80611be0840152505050565b80518252602081015160208301526040810151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e0840152506060810151613508610100840182613421565b50608081015161020083015260a081015161352761022084018261338f565b505050565b80516001600160a01b031682526020808201518184015260408083015190613556908501826134a8565b506060820151610620840160005b603c81101561358157825182529183019190830190600101613564565b5050505060800151610da09190910152565b60208101600b83106135a7576135a76138c2565b91905290565b611c008101610ace8284613444565b611c2081016135cb8285613444565b6001600160a01b0392909216611c009190910152919050565b611c2081016135f38285613444565b82611c008301529392505050565b610bc0810161361082856134a8565b612f5c6105e08301846134a8565b6040805190810167ffffffffffffffff81118282101715613641576136416138ee565b60405290565b60405160a0810167ffffffffffffffff81118282101715613641576136416138ee565b60405160c0810167ffffffffffffffff81118282101715613641576136416138ee565b604051610120810167ffffffffffffffff81118282101715613641576136416138ee565b604051610780810167ffffffffffffffff81118282101715613641576136416138ee565b604051601f8201601f1916810167ffffffffffffffff811182821017156136fe576136fe6138ee565b604052919050565b600080821280156001600160ff1b0384900385131615613728576137286138ac565b600160ff1b8390038412811615613741576137416138ac565b50500190565b6000821982111561375a5761375a6138ac565b500190565b60006001600160ff1b0381841382841380821686840486111615613785576137856138ac565b600160ff1b60008712828116878305891216156137a4576137a46138ac565b600087129250878205871284841616156137c0576137c06138ac565b878505871281841616156137d6576137d66138ac565b505050929093029392505050565b60008083128015600160ff1b850184121615613802576138026138ac565b6001600160ff1b038401831381161561381d5761381d6138ac565b50500390565b600082821015613835576138356138ac565b500390565b600061ffff82168061384e5761384e6138ac565b6000190192915050565b600081613867576138676138ac565b506000190190565b6000600019821415613883576138836138ac565b5060010190565b6000826138a757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60028110610b5757610b576138c2565b8015158114610b5757600080fd5b60028110610b5757600080fd5b60068110610b5757600080fd5b8060010b8114610b5757600080fd5b61ffff81168114610b5757600080fdfea26469706673582212207187cf3e85ac7037eee66a303af0d2762e733c1cc737e743f331a5270299308b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBattle(address,uint256,address,uint256)": {
        "details": "Create battle",
        "params": {
          "p1Addr": "address player1",
          "p1DeckId": "uint256",
          "p2Addr": "address player2",
          "p2DeckId": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8463,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "admins",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)8969_storage"
      },
      {
        "astId": 2436,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "battleIdRNGSeed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2539,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_nextBattleId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2541,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_allowBattleAgainstOneself",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2544,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_cardContract",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IPepemonCardOracle)8391"
      },
      {
        "astId": 2547,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_deckContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PepemonCardDeck)6177"
      },
      {
        "astId": 2550,
        "contract": "contracts/PepemonBattle.sol:PepemonBattle",
        "label": "_randNrGenContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ChainLinkRngOracle)8765"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ChainLinkRngOracle)8765": {
        "encoding": "inplace",
        "label": "contract ChainLinkRngOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IPepemonCardOracle)8391": {
        "encoding": "inplace",
        "label": "contract IPepemonCardOracle",
        "numberOfBytes": "20"
      },
      "t_contract(PepemonCardDeck)6177": {
        "encoding": "inplace",
        "label": "contract PepemonCardDeck",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Role)8969_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 8968,
            "contract": "contracts/PepemonBattle.sol:PepemonBattle",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}