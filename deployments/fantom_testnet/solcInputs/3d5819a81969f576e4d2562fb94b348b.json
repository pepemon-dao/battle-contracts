{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    internal\n    virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(\n    bytes32 _keyHash,\n    uint256 _fee\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(\n    address _vrfCoordinator,\n    address _link\n  ) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    external\n  {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash,\n    uint256 _vRFInputSeed\n  )\n    internal\n    pure\n    returns (\n      bytes32\n    )\n  {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n *\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor (string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155).interfaceId\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        virtual\n        override\n    {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        _balances[id][account] = accountBalance - amount;\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        internal\n        virtual\n    { }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        private\n    {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"./extensions/IERC721Enumerable.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping (uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping (address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId\n            || interfaceId == type(IERC721Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\n            : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n     * in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers.\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "contracts-exposed/cardlib/Address.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/Address.sol\";\n\ncontract XAddress {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    event xfunctionCall_address_bytes_Returned(bytes arg0);\n\n    event xfunctionCall_address_bytes_string_Returned(bytes arg0);\n\n    event xfunctionCallWithValue_address_bytes_uint256_Returned(bytes arg0);\n\n    event xfunctionCallWithValue_address_bytes_uint256_string_Returned(bytes arg0);\n\n    event xfunctionDelegateCall_address_bytes_Returned(bytes arg0);\n\n    event xfunctionDelegateCall_address_bytes_string_Returned(bytes arg0);\n\n    constructor() {}\n\n    function xisContract(address account) external view returns (bool) {\n        return Address.isContract(account);\n    }\n\n    function xsendValue(address payable recipient,uint256 amount) external payable {\n        return Address.sendValue(recipient,amount);\n    }\n\n    function xfunctionCall(address target,bytes calldata data) external payable returns (bytes memory) {\n        (bytes memory ret0) = Address.functionCall(target,data);\n        emit xfunctionCall_address_bytes_Returned(ret0);\n        return (ret0);\n    }\n\n    function xfunctionCall(address target,bytes calldata data,string calldata errorMessage) external payable returns (bytes memory) {\n        (bytes memory ret0) = Address.functionCall(target,data,errorMessage);\n        emit xfunctionCall_address_bytes_string_Returned(ret0);\n        return (ret0);\n    }\n\n    function xfunctionCallWithValue(address target,bytes calldata data,uint256 value) external payable returns (bytes memory) {\n        (bytes memory ret0) = Address.functionCallWithValue(target,data,value);\n        emit xfunctionCallWithValue_address_bytes_uint256_Returned(ret0);\n        return (ret0);\n    }\n\n    function xfunctionCallWithValue(address target,bytes calldata data,uint256 value,string calldata errorMessage) external payable returns (bytes memory) {\n        (bytes memory ret0) = Address.functionCallWithValue(target,data,value,errorMessage);\n        emit xfunctionCallWithValue_address_bytes_uint256_string_Returned(ret0);\n        return (ret0);\n    }\n\n    function xfunctionStaticCall(address target,bytes calldata data) external view returns (bytes memory) {\n        return Address.functionStaticCall(target,data);\n    }\n\n    function xfunctionStaticCall(address target,bytes calldata data,string calldata errorMessage) external view returns (bytes memory) {\n        return Address.functionStaticCall(target,data,errorMessage);\n    }\n\n    function xfunctionDelegateCall(address target,bytes calldata data) external payable returns (bytes memory) {\n        (bytes memory ret0) = Address.functionDelegateCall(target,data);\n        emit xfunctionDelegateCall_address_bytes_Returned(ret0);\n        return (ret0);\n    }\n\n    function xfunctionDelegateCall(address target,bytes calldata data,string calldata errorMessage) external payable returns (bytes memory) {\n        (bytes memory ret0) = Address.functionDelegateCall(target,data,errorMessage);\n        emit xfunctionDelegateCall_address_bytes_string_Returned(ret0);\n        return (ret0);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/AdminRole.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/AdminRole.sol\";\n\ncontract XAdminRole is AdminRole {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/Base64.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/Base64.sol\";\n\ncontract XBase64 {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xTABLE() external pure returns (bytes memory) {\n        return Base64.TABLE;\n    }\n\n    function xencode(bytes calldata data) external pure returns (string memory) {\n        return Base64.encode(data);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/Context.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/Context.sol\";\n\ncontract XContext is Context {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/ERC1155.sol\";\n\ncontract XERC1155 is ERC1155 {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xERC1155_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_RECEIVED_VALUE;\n    }\n\n    function xERC1155_BATCH_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED_VALUE;\n    }\n\n    function xbalances(address arg0, uint256 arg1) external view returns (uint256) {\n        return balances[arg0][arg1];\n    }\n\n    function xoperators(address arg0, address arg1) external view returns (bool) {\n        return operators[arg0][arg1];\n    }\n\n    function x_safeTransferFrom(address _from,address _to,uint256 _id,uint256 _amount) external {\n        return super._safeTransferFrom(_from,_to,_id,_amount);\n    }\n\n    function x_callonERC1155Received(address _from,address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._callonERC1155Received(_from,_to,_id,_amount,_data);\n    }\n\n    function x_safeBatchTransferFrom(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._safeBatchTransferFrom(_from,_to,_ids,_amounts);\n    }\n\n    function x_callonERC1155BatchReceived(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._callonERC1155BatchReceived(_from,_to,_ids,_amounts,_data);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/ERC1155Metadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/ERC1155Metadata.sol\";\n\ncontract XERC1155Metadata is ERC1155Metadata {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_uint2str(uint256 _i) external pure returns (string memory) {\n        return super._uint2str(_i);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/ERC1155MintBurn.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/ERC1155MintBurn.sol\";\n\ncontract XERC1155MintBurn is ERC1155MintBurn {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xERC1155_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_RECEIVED_VALUE;\n    }\n\n    function xERC1155_BATCH_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED_VALUE;\n    }\n\n    function xbalances(address arg0, uint256 arg1) external view returns (uint256) {\n        return balances[arg0][arg1];\n    }\n\n    function xoperators(address arg0, address arg1) external view returns (bool) {\n        return operators[arg0][arg1];\n    }\n\n    function x_mint(address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._mint(_to,_id,_amount,_data);\n    }\n\n    function x_batchMint(address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._batchMint(_to,_ids,_amounts,_data);\n    }\n\n    function x_burn(address _from,uint256 _id,uint256 _amount) external {\n        return super._burn(_from,_id,_amount);\n    }\n\n    function x_batchBurn(address _from,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._batchBurn(_from,_ids,_amounts);\n    }\n\n    function x_safeTransferFrom(address _from,address _to,uint256 _id,uint256 _amount) external {\n        return super._safeTransferFrom(_from,_to,_id,_amount);\n    }\n\n    function x_callonERC1155Received(address _from,address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._callonERC1155Received(_from,_to,_id,_amount,_data);\n    }\n\n    function x_safeBatchTransferFrom(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._safeBatchTransferFrom(_from,_to,_ids,_amounts);\n    }\n\n    function x_callonERC1155BatchReceived(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._callonERC1155BatchReceived(_from,_to,_ids,_amounts,_data);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/ERC1155Tradable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/ERC1155Tradable.sol\";\n\ncontract XERC1155Tradable is ERC1155Tradable {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    event xcreate_Returned(uint256 arg0);\n\n    constructor(string memory _name, string memory _symbol) ERC1155Tradable(_name, _symbol) {}\n\n    function xERC1155_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_RECEIVED_VALUE;\n    }\n\n    function xERC1155_BATCH_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED_VALUE;\n    }\n\n    function xbalances(address arg0, uint256 arg1) external view returns (uint256) {\n        return balances[arg0][arg1];\n    }\n\n    function xoperators(address arg0, address arg1) external view returns (bool) {\n        return operators[arg0][arg1];\n    }\n\n    function x_setBaseMetadataURI(string calldata x) external {\n        return super._setBaseMetadataURI(x);\n    }\n\n    function xcreate(uint256 _maxSupply,uint256 _initialSupply,string calldata _uri,bytes calldata _data) external returns (uint256) {\n        (uint256 ret0) = super.create(_maxSupply,_initialSupply,_uri,_data);\n        emit xcreate_Returned(ret0);\n        return (ret0);\n    }\n\n    function xmintPepe(address _to,uint256 _id,uint256 _quantity,bytes calldata _data) external {\n        return super.mintPepe(_to,_id,_quantity,_data);\n    }\n\n    function x_exists(uint256 _id) external view returns (bool) {\n        return super._exists(_id);\n    }\n\n    function xuint2str(uint256 value) external pure returns (string memory) {\n        return super.uint2str(value);\n    }\n\n    function xgetSupportType(PepemonStats.SupportCardStats calldata s) external pure returns (string memory) {\n        return super.getSupportType(s);\n    }\n\n    function x_URIForSupport(uint256 id) external view returns (bytes memory) {\n        return super._URIForSupport(id);\n    }\n\n    function x_URIForBattle(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle(id);\n    }\n\n    function x_URIForBattle3(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle3(id);\n    }\n\n    function x_URIForBattle2(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle2(id);\n    }\n\n    function x_URIForBattle4(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle4(id);\n    }\n\n    function x_getUri2(uint256 id) external view returns (bytes memory) {\n        return super._getUri2(id);\n    }\n\n    function x_getUri(uint256 id) external view returns (string memory) {\n        return super._getUri(id);\n    }\n\n    function x_addWhitelistAdmin(address account) external {\n        return super._addWhitelistAdmin(account);\n    }\n\n    function x_removeWhitelistAdmin(address account) external {\n        return super._removeWhitelistAdmin(account);\n    }\n\n    function x_addMinter(address account) external {\n        return super._addMinter(account);\n    }\n\n    function x_removeMinter(address account) external {\n        return super._removeMinter(account);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    function x_uint2str(uint256 _i) external pure returns (string memory) {\n        return super._uint2str(_i);\n    }\n\n    function x_mint(address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._mint(_to,_id,_amount,_data);\n    }\n\n    function x_batchMint(address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._batchMint(_to,_ids,_amounts,_data);\n    }\n\n    function x_burn(address _from,uint256 _id,uint256 _amount) external {\n        return super._burn(_from,_id,_amount);\n    }\n\n    function x_batchBurn(address _from,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._batchBurn(_from,_ids,_amounts);\n    }\n\n    function x_safeTransferFrom(address _from,address _to,uint256 _id,uint256 _amount) external {\n        return super._safeTransferFrom(_from,_to,_id,_amount);\n    }\n\n    function x_callonERC1155Received(address _from,address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._callonERC1155Received(_from,_to,_id,_amount,_data);\n    }\n\n    function x_safeBatchTransferFrom(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._safeBatchTransferFrom(_from,_to,_ids,_amounts);\n    }\n\n    function x_callonERC1155BatchReceived(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._callonERC1155BatchReceived(_from,_to,_ids,_amounts,_data);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/IERC1155.sol\";\n\nabstract contract XIERC1155 is IERC1155 {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/IERC1155Receiver.sol\";\n\nabstract contract XIERC1155Receiver is IERC1155Receiver {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/IERC165.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/IERC165.sol\";\n\nabstract contract XIERC165 is IERC165 {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/MinterRole.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/MinterRole.sol\";\n\ncontract XMinterRole is MinterRole {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_addMinter(address account) external {\n        return super._addMinter(account);\n    }\n\n    function x_removeMinter(address account) external {\n        return super._removeMinter(account);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/Ownable.sol\";\n\ncontract XOwnable is Ownable {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/PepemonStats.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/PepemonStats.sol\";\n\ncontract XPepemonStats is PepemonStats {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xuint2str(uint256 value) external pure returns (string memory) {\n        return super.uint2str(value);\n    }\n\n    function xgetSupportType(PepemonStats.SupportCardStats calldata s) external pure returns (string memory) {\n        return super.getSupportType(s);\n    }\n\n    function x_URIForSupport(uint256 id) external view returns (bytes memory) {\n        return super._URIForSupport(id);\n    }\n\n    function x_URIForBattle(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle(id);\n    }\n\n    function x_URIForBattle3(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle3(id);\n    }\n\n    function x_URIForBattle2(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle2(id);\n    }\n\n    function x_URIForBattle4(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle4(id);\n    }\n\n    function x_getUri2(uint256 id) external view returns (bytes memory) {\n        return super._getUri2(id);\n    }\n\n    function x_getUri(uint256 id) external view returns (string memory) {\n        return super._getUri(id);\n    }\n\n    function x_addWhitelistAdmin(address account) external {\n        return super._addWhitelistAdmin(account);\n    }\n\n    function x_removeWhitelistAdmin(address account) external {\n        return super._removeWhitelistAdmin(account);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/Roles.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/Roles.sol\";\n\ncontract XRoles {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    mapping(uint256 => Roles.Role) internal xv_Roles_Role;\n\n    constructor() {}\n\n    function xadd(uint256 role,address account) external payable {\n        return Roles.add(xv_Roles_Role[role],account);\n    }\n\n    function xremove(uint256 role,address account) external payable {\n        return Roles.remove(xv_Roles_Role[role],account);\n    }\n\n    function xhas(uint256 role,address account) external view returns (bool) {\n        return Roles.has(xv_Roles_Role[role],account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/cardlib/WhitelistAdminRole.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/cardlib/WhitelistAdminRole.sol\";\n\ncontract XWhitelistAdminRole is WhitelistAdminRole {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_addWhitelistAdmin(address account) external {\n        return super._addWhitelistAdmin(account);\n    }\n\n    function x_removeWhitelistAdmin(address account) external {\n        return super._removeWhitelistAdmin(account);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/iface/IPepemonCardOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/iface/IPepemonCardOracle.sol\";\n\nabstract contract XIPepemonCardOracle is IPepemonCardOracle {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/iface/IPepemonFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/iface/IPepemonFactory.sol\";\n\nabstract contract XIPepemonFactory is IPepemonFactory {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/lib/AdminRole.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/lib/AdminRole.sol\";\n\ncontract XAdminRole is AdminRole {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/lib/Arrays.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/lib/Arrays.sol\";\n\ncontract XArrays {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xshuffle(uint256[] calldata _elements,uint256 _seed) external pure returns (uint256[] memory) {\n        return Arrays.shuffle(_elements,_seed);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/lib/ChainLinkRngOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/lib/ChainLinkRngOracle.sol\";\n\ncontract XChainLinkRngOracle is ChainLinkRngOracle {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    event xrequestRandomness_Returned(bytes32 arg0);\n\n    constructor() {}\n\n    function xkeyHash() external view returns (bytes32) {\n        return keyHash;\n    }\n\n    function xfee() external view returns (uint256) {\n        return fee;\n    }\n\n    function xmaticLink() external pure returns (address) {\n        return maticLink;\n    }\n\n    function xmaticVrfCoordinator() external pure returns (address) {\n        return maticVrfCoordinator;\n    }\n\n    function xmaticKeyHash() external pure returns (bytes32) {\n        return maticKeyHash;\n    }\n\n    function xmumbaiLink() external pure returns (address) {\n        return mumbaiLink;\n    }\n\n    function xmumbaiVrfCoordinator() external pure returns (address) {\n        return mumbaiVrfCoordinator;\n    }\n\n    function xmumbaiKeyHash() external pure returns (bytes32) {\n        return mumbaiKeyHash;\n    }\n\n    function xfantomTestnetLink() external pure returns (address) {\n        return fantomTestnetLink;\n    }\n\n    function xfantomTestnetVrfCoordinator() external pure returns (address) {\n        return fantomTestnetVrfCoordinator;\n    }\n\n    function xfantomTestnetKeyHash() external pure returns (bytes32) {\n        return fantomTestnetKeyHash;\n    }\n\n    function xfantomLink() external pure returns (address) {\n        return fantomLink;\n    }\n\n    function xfantomVrfCoordinator() external pure returns (address) {\n        return fantomVrfCoordinator;\n    }\n\n    function xfantomKeyHash() external pure returns (bytes32) {\n        return fantomKeyHash;\n    }\n\n    function xresults(bytes32 arg0) external view returns (uint256) {\n        return results[arg0];\n    }\n\n    function xLINK() external view returns (LinkTokenInterface) {\n        return LINK;\n    }\n\n    function xfulfillRandomness(bytes32 requestId,uint256 randomness) external {\n        return super.fulfillRandomness(requestId,randomness);\n    }\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    function xrequestRandomness(bytes32 _keyHash,uint256 _fee) external returns (bytes32) {\n        (bytes32 ret0) = super.requestRandomness(_keyHash,_fee);\n        emit xrequestRandomness_Returned(ret0);\n        return (ret0);\n    }\n\n    function xmakeVRFInputSeed(bytes32 _keyHash,uint256 _userSeed,address _requester,uint256 _nonce) external pure returns (uint256) {\n        return super.makeVRFInputSeed(_keyHash,_userSeed,_requester,_nonce);\n    }\n\n    function xmakeRequestId(bytes32 _keyHash,uint256 _vRFInputSeed) external pure returns (bytes32) {\n        return super.makeRequestId(_keyHash,_vRFInputSeed);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/lib/Elo.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/lib/Elo.sol\";\nimport \"../../solmate/src/utils/FixedPointMathLib.sol\";\n\ncontract XElo {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xsixteenthRoot(uint256 x) external pure returns (uint256) {\n        return Elo.sixteenthRoot(x);\n    }\n\n    function xratingChange(uint256 ratingA,uint256 ratingB,uint256 score,uint256 kFactor) external pure returns (uint256, bool) {\n        return Elo.ratingChange(ratingA,ratingB,score,kFactor);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/lib/RewardPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/lib/RewardPool.sol\";\n\nabstract contract XRewardPool is RewardPool {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/lib/Roles.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/lib/Roles.sol\";\n\ncontract XRoles {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    mapping(uint256 => Roles.Role) internal xv_Roles_Role;\n\n    constructor() {}\n\n    function xadd(uint256 role,address account) external payable {\n        return Roles.add(xv_Roles_Role[role],account);\n    }\n\n    function xremove(uint256 role,address account) external payable {\n        return Roles.remove(xv_Roles_Role[role],account);\n    }\n\n    function xhas(uint256 role,address account) external view returns (bool) {\n        return Roles.has(xv_Roles_Role[role],account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/PepemonBattle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/PepemonBattle.sol\";\n\ncontract XPepemonBattle is PepemonBattle {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor(address cardOracleAddress, address deckOracleAddress, address randOracleAddress) PepemonBattle(cardOracleAddress, deckOracleAddress, randOracleAddress) {}\n\n    function x_max_inte() external pure returns (uint256) {\n        return _max_inte;\n    }\n\n    function x_max_cards_on_table() external pure returns (uint256) {\n        return _max_cards_on_table;\n    }\n\n    function x_refreshTurn() external pure returns (uint256) {\n        return _refreshTurn;\n    }\n\n    function xgetPlayersCards(uint256 player1BattleCardId,uint256 player2BattleCardId,uint256 player1DeckId,uint256 player2DeckId) external view returns (PepemonBattle.PlayersCards memory) {\n        return super.getPlayersCards(player1BattleCardId,player2BattleCardId,player1DeckId,player2DeckId);\n    }\n\n    function xupdateTurnInfo(PepemonBattle.Battle calldata battle,PepemonBattle.PlayersCards calldata cards) external view returns (PepemonBattle.Battle memory) {\n        return super.updateTurnInfo(battle,cards);\n    }\n\n    function xgoForNewTurn(PepemonBattle.Battle calldata battle,PepemonBattle.PlayersCards calldata cards) external view returns (PepemonBattle.Battle memory) {\n        return super.goForNewTurn(battle,cards);\n    }\n\n    function xcalSupportCardsOnTable(PepemonBattle.Hand calldata hand,PepemonBattle.Hand calldata oppHand) external pure returns (PepemonBattle.Hand memory) {\n        return super.calSupportCardsOnTable(hand,oppHand);\n    }\n\n    function xresolveAttacker(PepemonBattle.Battle calldata battle) external view returns (PepemonBattle.Battle memory) {\n        return super.resolveAttacker(battle);\n    }\n\n    function xgetCardStats(IPepemonCardOracle.BattleCardStats calldata x) external pure returns (PepemonBattle.CurrentBattleCardStats memory) {\n        return super.getCardStats(x);\n    }\n\n    function xcheckReqCode(PepemonBattle.Hand calldata atkHand,PepemonBattle.Hand calldata defHand,uint256 reqCode,bool isAttacker) external view returns (bool, uint256) {\n        return super.checkReqCode(atkHand,defHand,reqCode,isAttacker);\n    }\n\n    function xlessThanHalfHP(PepemonBattle.Hand calldata hand) external view returns (bool) {\n        return super.lessThanHalfHP(hand);\n    }\n\n    function xcountCards(PepemonBattle.Hand calldata hand,IPepemonCardOracle.SupportCardType cardType,int256 basePower) external view returns (bool, uint256) {\n        return super.countCards(hand,cardType,basePower);\n    }\n\n    function xresistanceWeaknessCal(PepemonBattle.Hand calldata atkHand,PepemonBattle.Hand calldata defHand) external view returns (int256) {\n        return super.resistanceWeaknessCal(atkHand,defHand);\n    }\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/PepemonCardDeck.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/PepemonCardDeck.sol\";\n\ncontract XPepemonCardDeck is PepemonCardDeck {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xmaxMintTestCardId() external view returns (uint256) {\n        return maxMintTestCardId;\n    }\n\n    function xminMintTestCardId() external view returns (uint256) {\n        return minMintTestCardId;\n    }\n\n    function xnextDeckId() external view returns (uint256) {\n        return nextDeckId;\n    }\n\n    function xaddSupportCardToDeck(uint256 _deckId,uint256 _supportCardId,uint256 _amount) external {\n        return super.addSupportCardToDeck(_deckId,_supportCardId,_amount);\n    }\n\n    function xremoveSupportCardFromDeck(uint256 _deckId,uint256 _supportCardId,uint256 _amount) external {\n        return super.removeSupportCardFromDeck(_deckId,_supportCardId,_amount);\n    }\n\n    function xreturnBattleCardFromDeck(uint256 _battleCardId) external {\n        return super.returnBattleCardFromDeck(_battleCardId);\n    }\n\n    function x_baseURI() external view returns (string memory) {\n        return super._baseURI();\n    }\n\n    function x_safeTransfer(address from,address to,uint256 tokenId,bytes calldata _data) external {\n        return super._safeTransfer(from,to,tokenId,_data);\n    }\n\n    function x_exists(uint256 tokenId) external view returns (bool) {\n        return super._exists(tokenId);\n    }\n\n    function x_isApprovedOrOwner(address spender,uint256 tokenId) external view returns (bool) {\n        return super._isApprovedOrOwner(spender,tokenId);\n    }\n\n    function x_safeMint(address to,uint256 tokenId) external {\n        return super._safeMint(to,tokenId);\n    }\n\n    function x_safeMint(address to,uint256 tokenId,bytes calldata _data) external {\n        return super._safeMint(to,tokenId,_data);\n    }\n\n    function x_mint(address to,uint256 tokenId) external {\n        return super._mint(to,tokenId);\n    }\n\n    function x_burn(uint256 tokenId) external {\n        return super._burn(tokenId);\n    }\n\n    function x_transfer(address from,address to,uint256 tokenId) external {\n        return super._transfer(from,to,tokenId);\n    }\n\n    function x_approve(address to,uint256 tokenId) external {\n        return super._approve(to,tokenId);\n    }\n\n    function x_beforeTokenTransfer(address from,address to,uint256 tokenId) external {\n        return super._beforeTokenTransfer(from,to,tokenId);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/PepemonCardOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/PepemonCardOracle.sol\";\n\ncontract XPepemonCardOracle is PepemonCardOracle {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/PepemonFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/PepemonFactory.sol\";\n\ncontract XPepemonFactory is PepemonFactory {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    event xcreate_Returned(uint256 arg0);\n\n    constructor() {}\n\n    function xERC1155_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_RECEIVED_VALUE;\n    }\n\n    function xERC1155_BATCH_RECEIVED_VALUE() external pure returns (bytes4) {\n        return ERC1155_BATCH_RECEIVED_VALUE;\n    }\n\n    function xbalances(address arg0, uint256 arg1) external view returns (uint256) {\n        return balances[arg0][arg1];\n    }\n\n    function xoperators(address arg0, address arg1) external view returns (bool) {\n        return operators[arg0][arg1];\n    }\n\n    function x_setBaseMetadataURI(string calldata x) external {\n        return super._setBaseMetadataURI(x);\n    }\n\n    function xcreate(uint256 _maxSupply,uint256 _initialSupply,string calldata _uri,bytes calldata _data) external returns (uint256) {\n        (uint256 ret0) = super.create(_maxSupply,_initialSupply,_uri,_data);\n        emit xcreate_Returned(ret0);\n        return (ret0);\n    }\n\n    function xmintPepe(address _to,uint256 _id,uint256 _quantity,bytes calldata _data) external {\n        return super.mintPepe(_to,_id,_quantity,_data);\n    }\n\n    function x_exists(uint256 _id) external view returns (bool) {\n        return super._exists(_id);\n    }\n\n    function xuint2str(uint256 value) external pure returns (string memory) {\n        return super.uint2str(value);\n    }\n\n    function xgetSupportType(PepemonStats.SupportCardStats calldata s) external pure returns (string memory) {\n        return super.getSupportType(s);\n    }\n\n    function x_URIForSupport(uint256 id) external view returns (bytes memory) {\n        return super._URIForSupport(id);\n    }\n\n    function x_URIForBattle(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle(id);\n    }\n\n    function x_URIForBattle3(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle3(id);\n    }\n\n    function x_URIForBattle2(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle2(id);\n    }\n\n    function x_URIForBattle4(uint256 id) external view returns (bytes memory) {\n        return super._URIForBattle4(id);\n    }\n\n    function x_getUri2(uint256 id) external view returns (bytes memory) {\n        return super._getUri2(id);\n    }\n\n    function x_getUri(uint256 id) external view returns (string memory) {\n        return super._getUri(id);\n    }\n\n    function x_addWhitelistAdmin(address account) external {\n        return super._addWhitelistAdmin(account);\n    }\n\n    function x_removeWhitelistAdmin(address account) external {\n        return super._removeWhitelistAdmin(account);\n    }\n\n    function x_addMinter(address account) external {\n        return super._addMinter(account);\n    }\n\n    function x_removeMinter(address account) external {\n        return super._removeMinter(account);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    function x_uint2str(uint256 _i) external pure returns (string memory) {\n        return super._uint2str(_i);\n    }\n\n    function x_mint(address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._mint(_to,_id,_amount,_data);\n    }\n\n    function x_batchMint(address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._batchMint(_to,_ids,_amounts,_data);\n    }\n\n    function x_burn(address _from,uint256 _id,uint256 _amount) external {\n        return super._burn(_from,_id,_amount);\n    }\n\n    function x_batchBurn(address _from,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._batchBurn(_from,_ids,_amounts);\n    }\n\n    function x_safeTransferFrom(address _from,address _to,uint256 _id,uint256 _amount) external {\n        return super._safeTransferFrom(_from,_to,_id,_amount);\n    }\n\n    function x_callonERC1155Received(address _from,address _to,uint256 _id,uint256 _amount,bytes calldata _data) external {\n        return super._callonERC1155Received(_from,_to,_id,_amount,_data);\n    }\n\n    function x_safeBatchTransferFrom(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts) external {\n        return super._safeBatchTransferFrom(_from,_to,_ids,_amounts);\n    }\n\n    function x_callonERC1155BatchReceived(address _from,address _to,uint256[] calldata _ids,uint256[] calldata _amounts,bytes calldata _data) external {\n        return super._callonERC1155BatchReceived(_from,_to,_ids,_amounts,_data);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/PepemonMatchmaker.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/PepemonMatchmaker.sol\";\n\ncontract XPepemonMatchmaker is PepemonMatchmaker {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    event xdoBattle_Returned(address arg0, address arg1, uint256 arg2);\n\n    constructor(uint256 defaultRanking, address battleAddress, address deckAddress, address rewardPoolAddress) PepemonMatchmaker(defaultRanking, battleAddress, deckAddress, rewardPoolAddress) {}\n\n    function x_waitingDecksIndex(uint256 arg0) external view returns (uint256) {\n        return _waitingDecksIndex[arg0];\n    }\n\n    function xenterPve(uint256 deckId) external {\n        return super.enterPve(deckId);\n    }\n\n    function xenterPvp(uint256 deckId) external {\n        return super.enterPvp(deckId);\n    }\n\n    function xaddWaitingDeck(uint256 deckId) external {\n        return super.addWaitingDeck(deckId);\n    }\n\n    function xremoveWaitingDeck(uint256 deckId) external {\n        return super.removeWaitingDeck(deckId);\n    }\n\n    function xprocessMatch(uint256 player1deckId,uint256 player2deckId) external {\n        return super.processMatch(player1deckId,player2deckId);\n    }\n\n    function xgetPveMatchmakingOpponent(uint256 deckId) external view returns (uint256) {\n        return super.getPveMatchmakingOpponent(deckId);\n    }\n\n    function xfindMatchmakingOpponent(uint256 deckId) external view returns (uint256) {\n        return super.findMatchmakingOpponent(deckId);\n    }\n\n    function xdoBattle(uint256 player1deckId,uint256 player2deckId) external returns (address, address, uint256) {\n        (address ret0, address ret1, uint256 ret2) = super.doBattle(player1deckId,player2deckId);\n        emit xdoBattle_Returned(ret0, ret1, ret2);\n        return (ret0, ret1, ret2);\n    }\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/PepemonRewardPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/PepemonRewardPool.sol\";\n\ncontract XPepemonRewardPool is PepemonRewardPool {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    constructor() {}\n\n    function xrewardPool() external view returns (PepemonRewardPool.Reward[] memory) {\n        return rewardPool;\n    }\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts-exposed/SampleChainLinkRngOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/SampleChainLinkRngOracle.sol\";\n\ncontract XSampleChainLinkRngOracle is SampleChainLinkRngOracle {\n    bytes32 public __hh_exposed_bytecode_marker = \"hardhat-exposed\";\n\n    event xrequestRandomness_Returned(bytes32 arg0);\n\n    constructor() {}\n\n    function xkeyHash() external view returns (bytes32) {\n        return keyHash;\n    }\n\n    function xfee() external view returns (uint256) {\n        return fee;\n    }\n\n    function xmaticLink() external pure returns (address) {\n        return maticLink;\n    }\n\n    function xmaticVrfCoordinator() external pure returns (address) {\n        return maticVrfCoordinator;\n    }\n\n    function xmaticKeyHash() external pure returns (bytes32) {\n        return maticKeyHash;\n    }\n\n    function xmumbaiLink() external pure returns (address) {\n        return mumbaiLink;\n    }\n\n    function xmumbaiVrfCoordinator() external pure returns (address) {\n        return mumbaiVrfCoordinator;\n    }\n\n    function xmumbaiKeyHash() external pure returns (bytes32) {\n        return mumbaiKeyHash;\n    }\n\n    function xfantomTestnetLink() external pure returns (address) {\n        return fantomTestnetLink;\n    }\n\n    function xfantomTestnetVrfCoordinator() external pure returns (address) {\n        return fantomTestnetVrfCoordinator;\n    }\n\n    function xfantomTestnetKeyHash() external pure returns (bytes32) {\n        return fantomTestnetKeyHash;\n    }\n\n    function xfantomLink() external pure returns (address) {\n        return fantomLink;\n    }\n\n    function xfantomVrfCoordinator() external pure returns (address) {\n        return fantomVrfCoordinator;\n    }\n\n    function xfantomKeyHash() external pure returns (bytes32) {\n        return fantomKeyHash;\n    }\n\n    function xresults(bytes32 arg0) external view returns (uint256) {\n        return results[arg0];\n    }\n\n    function xLINK() external view returns (LinkTokenInterface) {\n        return LINK;\n    }\n\n    function xfulfillRandomness(bytes32 requestId,uint256 randomness) external {\n        return super.fulfillRandomness(requestId,randomness);\n    }\n\n    function x_addAdmin(address account) external {\n        return super._addAdmin(account);\n    }\n\n    function x_removeAdmin(address account) external {\n        return super._removeAdmin(account);\n    }\n\n    function xrequestRandomness(bytes32 _keyHash,uint256 _fee) external returns (bytes32) {\n        (bytes32 ret0) = super.requestRandomness(_keyHash,_fee);\n        emit xrequestRandomness_Returned(ret0);\n        return (ret0);\n    }\n\n    function xmakeVRFInputSeed(bytes32 _keyHash,uint256 _userSeed,address _requester,uint256 _nonce) external pure returns (uint256) {\n        return super.makeVRFInputSeed(_keyHash,_userSeed,_requester,_nonce);\n    }\n\n    function xmakeRequestId(bytes32 _keyHash,uint256 _vRFInputSeed) external pure returns (bytes32) {\n        return super.makeRequestId(_keyHash,_vRFInputSeed);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/cardlib/Address.sol": {
      "content": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/cardlib/AdminRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Roles.sol\";\r\n\r\ncontract AdminRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event AdminAdded(address indexed account);\r\n  event AdminRemoved(address indexed account);\r\n\r\n  Roles.Role private admins;\r\n\r\n  constructor() {\r\n    _addAdmin(msg.sender);\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(isAdmin(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isAdmin(address account) public view returns (bool) {\r\n    return admins.has(account);\r\n  }\r\n\r\n  function addAdmin(address account) public onlyAdmin {\r\n    _addAdmin(account);\r\n  }\r\n\r\n  function renounceAdmin() public {\r\n    _removeAdmin(msg.sender);\r\n  }\r\n\r\n  function _addAdmin(address account) internal {\r\n    admins.add(account);\r\n    emit AdminAdded(account);\r\n  }\r\n\r\n  function _removeAdmin(address account) internal {\r\n    admins.remove(account);\r\n    emit AdminRemoved(account);\r\n  }\r\n}"
    },
    "contracts/cardlib/Base64.sol": {
      "content": "\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return '';\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {let i := 0} lt(i, len) {} {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n"
    },
    "contracts/cardlib/Context.sol": {
      "content": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"
    },
    "contracts/cardlib/ERC1155.sol": {
      "content": "import \"./IERC1155Receiver.sol\";\r\nimport \"./IERC1155.sol\";\r\nimport \"./Address.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of Multi-Token Standard contract\r\n */\r\ncontract ERC1155 is IERC1155 {\r\n    using Address for address;\r\n\r\n\r\n    /***********************************|\r\n    |        Variables and Events       |\r\n    |__________________________________*/\r\n\r\n    // onReceive function signatures\r\n    bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n    bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n    // Objects balances\r\n    mapping (address => mapping(uint256 => uint256)) internal balances;\r\n\r\n    // Operator Functions\r\n    mapping (address => mapping(address => bool)) internal operators;\r\n\r\n\r\n    /***********************************|\r\n    |     Public Transfer Functions     |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     * @param _data    Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    public override\r\n    {\r\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeTransferFrom: INVALID_OPERATOR\");\r\n        require(_to != address(0),\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\");\r\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\r\n\r\n        _safeTransferFrom(_from, _to, _id, _amount);\r\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     * @param _data     Additional data with no specified format, sent in call to `_to`\r\n     */\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    public override\r\n    {\r\n        // Requirements\r\n        require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\");\r\n        require(_to != address(0), \"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\");\r\n\r\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\r\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\r\n    }\r\n\r\n\r\n    /***********************************|\r\n    |    Internal Transfer Functions    |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\r\n     * @param _from    Source address\r\n     * @param _to      Target address\r\n     * @param _id      ID of the token type\r\n     * @param _amount  Transfered amount\r\n     */\r\n    function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\r\n    internal \r\n    {\r\n        // Update balances\r\n        balances[_from][_id] = balances[_from][_id]-_amount; // Subtract amount\r\n        balances[_to][_id] = balances[_to][_id]+_amount;     // Add amount\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\r\n     */\r\n    function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal \r\n    {\r\n        // Check if recipient is contract\r\n        if (_to.isContract()) {\r\n            bytes4 retval = IERC1155Receiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\r\n            require(retval == ERC1155_RECEIVED_VALUE, \"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n     * @param _from     Source addresses\r\n     * @param _to       Target addresses\r\n     * @param _ids      IDs of each token type\r\n     * @param _amounts  Transfer amounts per token type\r\n     */\r\n    function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n    {\r\n        require(_ids.length == _amounts.length, \"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\");\r\n\r\n        // Number of transfer to execute\r\n        uint256 nTransfer = _ids.length;\r\n\r\n        // Executing all transfers\r\n        for (uint256 i = 0; i < nTransfer; i++) {\r\n            // Update storage balance of previous bin\r\n            balances[_from][_ids[i]] = balances[_from][_ids[i]]-_amounts[i];\r\n            balances[_to][_ids[i]] = balances[_to][_ids[i]]+_amounts[i];\r\n        }\r\n\r\n        // Emit event\r\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\r\n    }\r\n\r\n    /**\r\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\r\n     */\r\n    function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n    {\r\n        // Pass data if recipient is contract\r\n        if (_to.isContract()) {\r\n            bytes4 retval = IERC1155Receiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\r\n            require(retval == ERC1155_BATCH_RECEIVED_VALUE, \"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\");\r\n        }\r\n    }\r\n\r\n\r\n    /***********************************|\r\n    |         Operator Functions        |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n     * @param _operator  Address to add to the set of authorized operators\r\n     * @param _approved  True if the operator is approved, false to revoke approval\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved)\r\n    external override\r\n    {\r\n        // Update operator status\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /**\r\n     * @notice Queries the approval status of an operator for a given owner\r\n     * @param _owner     The owner of the Tokens\r\n     * @param _operator  Address of authorized operator\r\n     * @return isOperator True if the operator is approved, false if not\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n    public view virtual override returns (bool isOperator)\r\n    {\r\n        return operators[_owner][_operator];\r\n    }\r\n\r\n\r\n    /***********************************|\r\n    |         Balance Functions         |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Get the balance of an account's Tokens\r\n     * @param _owner  The address of the token holder\r\n     * @param _id     ID of the Token\r\n     * @return The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id)\r\n    public view override returns (uint256)\r\n    {\r\n        return balances[_owner][_id];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of multiple account/token pairs\r\n     * @param _owners The addresses of the token holders\r\n     * @param _ids    ID of the Tokens\r\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n     */\r\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\r\n    public view override returns (uint256[] memory)\r\n    {\r\n        require(_owners.length == _ids.length, \"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\");\r\n\r\n        // Variables\r\n        uint256[] memory batchBalances = new uint256[](_owners.length);\r\n\r\n        // Iterate over each owner and token ID\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n\r\n    /***********************************|\r\n    |          ERC165 Functions         |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n     */\r\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * INTERFACE_SIGNATURE_ERC1155 =\r\n     * bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\r\n     * bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\r\n     * bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\r\n     * bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\r\n     * bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\r\n     * bytes4(keccak256(\"isApprovedForAll(address,address)\"));\r\n     */\r\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\r\n     * @return `true` if the contract implements `_interfaceID` and\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID) external pure override returns (bool) {\r\n        if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}"
    },
    "contracts/cardlib/ERC1155Metadata.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\ncontract ERC1155Metadata {\r\n\r\n\r\n    /***********************************|\r\n    |    Utility Internal Functions     |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Convert uint256 to string\r\n     * @param _i Unsigned integer to convert to string\r\n     */\r\n    function _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n}\r\n\r\n"
    },
    "contracts/cardlib/ERC1155MintBurn.sol": {
      "content": "import \"./ERC1155.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\r\n *      a parent contract to be executed as they are `internal` functions\r\n */\r\ncontract ERC1155MintBurn is ERC1155 {\r\n\r\n\r\n    /****************************************|\r\n    |            Minting Functions           |\r\n    |_______________________________________*/\r\n\r\n    /**\r\n     * @notice Mint _amount of tokens of a given id\r\n     * @param _to      The address to mint tokens to\r\n     * @param _id      Token id to mint\r\n     * @param _amount  The amount to be minted\r\n     * @param _data    Data to pass if receiver is contract\r\n     */\r\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\r\n    internal\r\n    {\r\n        // Add _amount\r\n        balances[_to][_id] = balances[_to][_id]+_amount;\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint tokens for each ids in _ids\r\n     * @param _to       The address to mint tokens to\r\n     * @param _ids      Array of ids to mint\r\n     * @param _amounts  Array of amount of tokens to mint per id\r\n     * @param _data    Data to pass if receiver is contract\r\n     */\r\n    function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\r\n    internal\r\n    {\r\n        require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\");\r\n\r\n        // Number of mints to execute\r\n        uint256 nMint = _ids.length;\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nMint; i++) {\r\n            // Update storage balance\r\n            balances[_to][_ids[i]] = balances[_to][_ids[i]]+(_amounts[i]);\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\r\n\r\n        // Calling onReceive method if recipient is contract\r\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\r\n    }\r\n\r\n\r\n    /****************************************|\r\n    |            Burning Functions           |\r\n    |_______________________________________*/\r\n\r\n    /**\r\n     * @notice Burn _amount of tokens of a given token id\r\n     * @param _from    The address to burn tokens from\r\n     * @param _id      Token id to burn\r\n     * @param _amount  The amount to be burned\r\n     */\r\n    function _burn(address _from, uint256 _id, uint256 _amount)\r\n    internal\r\n    {\r\n        //Substract _amount\r\n        balances[_from][_id] = balances[_from][_id]-(_amount);\r\n\r\n        // Emit event\r\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\r\n     * @param _from     The address to burn tokens from\r\n     * @param _ids      Array of token ids to burn\r\n     * @param _amounts  Array of the amount to be burned\r\n     */\r\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\r\n    internal\r\n    {\r\n        require(_ids.length == _amounts.length, \"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\");\r\n\r\n        // Number of mints to execute\r\n        uint256 nBurn = _ids.length;\r\n\r\n        // Executing all minting\r\n        for (uint256 i = 0; i < nBurn; i++) {\r\n            // Update storage balance\r\n            balances[_from][_ids[i]] = balances[_from][_ids[i]]-(_amounts[i]);\r\n        }\r\n\r\n        // Emit batch mint event\r\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/cardlib/ERC1155Tradable.sol": {
      "content": "import \"./ERC1155.sol\";\r\nimport \"./ERC1155MintBurn.sol\";\r\nimport \"./ERC1155Metadata.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./MinterRole.sol\";\r\nimport \"./WhitelistAdminRole.sol\";\r\nimport \"./PepemonStats.sol\";\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address,\r\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable, MinterRole, WhitelistAdminRole, PepemonStats {\r\n\r\n    uint256 private _currentTokenID = 0;\r\n    mapping(uint256 => address) public creators;\r\n    mapping(uint256 => uint256) public tokenSupply;\r\n    mapping(uint256 => uint256) public tokenMaxSupply;\r\n    // Contract name\r\n    string public name;\r\n    // Contract symbol\r\n    string public symbol;\r\n    string public baseMetadataURI;\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol\r\n    )  {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n    function _setBaseMetadataURI(string memory x) internal{\r\n        baseMetadataURI = x;\r\n    }\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _removeWhitelistAdmin(account);\r\n    }\r\n    \r\n    function removeMinter(address account) public onlyOwner {\r\n        _removeMinter(account);\r\n    }\r\n\r\n    function uri(uint256 _id) public view returns (string memory) {\r\n        require(_exists(_id), \"ERC1155Tradable#uri: NONEXISTENT_TOKEN\");\r\n        return _getUri(_id);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total quantity for a token ID\r\n     * @param _id uint256 ID of the token to query\r\n     * @return amount of token in existence\r\n     */\r\n    function totalSupply(uint256 _id) public view returns (uint256) {\r\n        return tokenSupply[_id];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the max quantity for a token ID\r\n     * @param _id uint256 ID of the token to query\r\n     * @return amount of token in existence\r\n     */\r\n    function maxSupply(uint256 _id) public view returns (uint256) {\r\n        return tokenMaxSupply[_id];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Creates a new token type and assigns _initialSupply to an address\r\n     * @param _maxSupply max supply allowed\r\n     * @param _initialSupply Optional amount to supply the first owner\r\n     * @param _uri Optional URI for this token type\r\n     * @param _data Optional data to pass if receiver is contract\r\n     * @return tokenId The newly created token ID\r\n     */\r\n    function create(\r\n        uint256 _maxSupply,\r\n        uint256 _initialSupply,\r\n        string memory _uri,\r\n        bytes memory _data\r\n        \r\n    ) internal  returns (uint256 tokenId) {\r\n        require(_initialSupply <= _maxSupply, \"Initial supply cannot be more than max supply\");\r\n        uint256 _id = _getNextTokenID();\r\n        _incrementTokenTypeId();\r\n        creators[_id] = msg.sender;\r\n\r\n        if (bytes(_uri).length > 0) {\r\n            emit URI(_uri, _id);\r\n        }\r\n\r\n        if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\r\n        tokenSupply[_id] = _initialSupply;\r\n        tokenMaxSupply[_id] = _maxSupply;\r\n        return _id;\r\n    }\r\n    function createBattleCard(BattleCardStats calldata _stats,\r\n        uint256 _maxSupply,\r\n        uint256 _initialSupply,\r\n        string calldata _uri,\r\n        bytes calldata _data\r\n    ) external onlyWhitelistAdmin returns(uint256 tokenId){\r\n        uint _id = create(_maxSupply, _initialSupply, _uri, _data);\r\n        setBattleCardStats(_id, _stats);\r\n        return _id;\r\n    }\r\n    \r\n    function createSupportCard(SupportCardStats calldata _stats,\r\n        uint256 _maxSupply,\r\n        uint256 _initialSupply,\r\n        string calldata _uri,\r\n        bytes calldata _data\r\n    ) external onlyWhitelistAdmin returns(uint256 tokenId){\r\n        uint _id = create(_maxSupply, _initialSupply, _uri, _data);\r\n        setSupportCardStats(_id, _stats);\r\n        return _id;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints some amount of tokens to an address\r\n     * @param _to          Address of the future owner of the token\r\n     * @param _id          Token ID to mint\r\n     * @param _quantity    Amount of tokens to mint\r\n     * @param _data        Data to pass if receiver is contract\r\n     */\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n    ) public onlyMinter {\r\n        mintPepe(_to, _id, _quantity, _data);\r\n    }\r\n    function mintPepe(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _quantity,\r\n        bytes memory _data\r\n    ) internal{\r\n        uint256 tokenId = _id;\r\n        uint256 newSupply = tokenSupply[tokenId]+_quantity;\r\n        require(newSupply <= tokenMaxSupply[tokenId], \"Max supply reached\");\r\n        _mint(_to, _id, _quantity, _data);\r\n        tokenSupply[_id] = tokenSupply[_id]+_quantity;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n     * @param _id uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 _id) internal view returns (bool) {\r\n        return creators[_id] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the next token ID based on value of _currentTokenID\r\n     * @return uint256 for the next token ID\r\n     */\r\n    function _getNextTokenID() private view returns (uint256) {\r\n        return _currentTokenID+1;\r\n    }\r\n\r\n    /**\r\n     * @dev increments the value of _currentTokenID\r\n     */\r\n    function _incrementTokenTypeId() private {\r\n        _currentTokenID++;\r\n    }\r\n}\r\n"
    },
    "contracts/cardlib/IERC1155.sol": {
      "content": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155.sol\r\n\r\nimport \"./IERC165.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}"
    },
    "contracts/cardlib/IERC1155Receiver.sol": {
      "content": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\nimport \"./IERC165.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}"
    },
    "contracts/cardlib/IERC165.sol": {
      "content": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"
    },
    "contracts/cardlib/MinterRole.sol": {
      "content": "import \"./Context.sol\";\r\nimport \"./Roles.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        require (account != address(this));\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n"
    },
    "contracts/cardlib/Ownable.sol": {
      "content": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\nimport \"./Context.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/cardlib/PepemonStats.sol": {
      "content": "import \"./WhitelistAdminRole.sol\";\r\nimport \"./Base64.sol\";\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract PepemonStats is WhitelistAdminRole{\r\n    \r\n    struct BattleCardStats {\r\n        uint16 element;\r\n        uint16 hp;\r\n        uint16 speed;\r\n        uint16 intelligence;\r\n        uint16 defense;\r\n        uint16 attack;\r\n        uint16 specialAttack;\r\n        uint16 specialDefense;\r\n        uint16 level;\r\n        string name;\r\n        string description;\r\n        string ipfsAddr;\r\n        string rarity;\r\n    }\r\n\r\n    struct SupportCardStats {\r\n        bytes32 currentRoundChanges;\r\n        bytes32 nextRoundChanges;\r\n        uint256 specialCode;\r\n        uint16 modifierNumberOfNextTurns;\r\n        bool isOffense;\r\n        bool isNormal;\r\n        bool isStackable;\r\n        string name;\r\n        string description;\r\n        string ipfsAddr;\r\n        string rarity;\r\n    }\r\n    \r\n    struct elementWR{\r\n        uint16 weakness;\r\n        uint16 resistance;\r\n    }\r\n\r\n    mapping(uint => BattleCardStats) public battleCardStats;\r\n    mapping(uint => SupportCardStats) public supportCardStats;\r\n    mapping (uint16 => string) public elementDecode;\r\n    mapping (uint16 => elementWR) public weakResist;\r\n    \r\n    constructor(){\r\n        elementDecode[1]=\"Fire\";\r\n        elementDecode[2]=\"Grass\";\r\n        elementDecode[3]=\"Water\";\r\n        elementDecode[4]=\"Lighting\";\r\n        elementDecode[5]=\"Wind\";\r\n        elementDecode[6]=\"Poison\";\r\n        elementDecode[7]=\"Ghost\";\r\n        elementDecode[8]=\"Fairy\";\r\n        elementDecode[9]=\"Earth\";\r\n        elementDecode[10]=\"Unknown\";\r\n        weakResist[1] = elementWR(3,2);\r\n        weakResist[2] = elementWR(1,3);\r\n        weakResist[3] = elementWR(4,1);\r\n        weakResist[4] = elementWR(9,5);\r\n        weakResist[5] = elementWR(6,9);\r\n        weakResist[6] = elementWR(8,2);\r\n        weakResist[7] = elementWR(8,6);\r\n        weakResist[8] = elementWR(7,8);\r\n        weakResist[9] = elementWR(2,7);\r\n        weakResist[10] = elementWR(0,0);\r\n    }\r\n    \r\n    function setBattleCardStats(uint id, BattleCardStats calldata x) public onlyWhitelistAdmin{\r\n        battleCardStats[id] = x;\r\n    }\r\n    function setSupportCardStats(uint id, SupportCardStats calldata x) public onlyWhitelistAdmin{\r\n        supportCardStats[id] = x;\r\n    }\r\n    function setWeakResist(uint16 element, elementWR calldata x) public onlyWhitelistAdmin{\r\n        weakResist[element] = x;\r\n    }\r\n    function setElementDecode(uint16 element, string calldata x) public onlyWhitelistAdmin{\r\n        elementDecode[element] = x;\r\n    }\r\n    \r\n    //Pos 0-7 = hp, spd, int, def, atk, sp atk, sp def\r\n    //Pos 8-13 = same but for opponent\r\n    function deconvert(bytes32 num) public pure returns(int16[14] memory){\r\n        int16[14] memory arr;\r\n        for (uint i =0 ; i < 14; i++){\r\n            arr[i] = int16(uint16(bytes2(num << 240))); \r\n            num = num >> 16;\r\n        } \r\n        return arr;\r\n    }\r\n    function uint2str(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    function convert(int16[14] calldata arr) public pure returns (bytes32){\r\n        bytes32 num;\r\n        for (uint i = 0 ; i < 14; i++ ){\r\n            num |= (bytes32(uint256(uint16(arr[i])))<<(16*i));\r\n        }\r\n        return num;\r\n    }\r\n    \r\n    //spaghetti code ahead :(\r\n        \r\n    function getSupportType(SupportCardStats memory s) internal pure returns(string memory){\r\n        string memory  x =\"Defense \";\r\n        string memory  y=\"(Special)\";\r\n        if (s.isOffense){\r\n            x = \"Offense \";\r\n        }\r\n        if (s.isNormal){\r\n            y = \"(Normal)\";\r\n        }\r\n        return string(abi.encodePacked(x, y));\r\n    }\r\n    function _URIForSupport(uint id) internal view returns (bytes memory){\r\n        SupportCardStats memory s = supportCardStats[id];\r\n        return abi.encodePacked(\r\n        \"{\\\"pool\\\": {\\\"name\\\": \\\"root\\\",\\\"points\\\": 1},\\\"external_url\\\": \\\"https://pepemon.world/\\\",\\\"image\\\": \\\"\", \r\n        s.ipfsAddr, \r\n        \"\\\",\\\"name\\\": \\\"\",\r\n        s.name, \r\n        \"\\\",\\\"description\\\": \\\"\",\r\n        s.description,\r\n        \"\\\",\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Set\\\",\\\"value\\\": \\\"Pepemon Support\\\"},{\\\"trait_type\\\": \\\"Rarity\\\",\\\"value\\\": \\\"\",\r\n        s.rarity, \r\n        \"\\\"},{\\\"trait_type\\\": \\\"Type\\\",\\\"value\\\": \\\"\", \r\n        getSupportType(s), \r\n        \"\\\"}]}\");\r\n    }\r\n\r\n\r\n    function _URIForBattle(uint id) internal view returns (bytes memory){\r\n        BattleCardStats memory b = battleCardStats[id];\r\n        uint16 e = b.element;\r\n        return abi.encodePacked(\"{\\\"pool\\\": {\\\"name\\\": \\\"root\\\",\\\"points\\\": 1},\\\"external_url\\\": \\\"https://pepemon.world/\\\",\\\"image\\\": \\\"\",\r\n        b.ipfsAddr, \r\n        \"\\\",\\\"name\\\": \\\"\", \r\n        b.name, \r\n        \"\\\",\\\"description\\\": \\\"\", \r\n        b.description, \r\n        \"\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Set\\\",\\\"value\\\":\\\"Pepemon Battle\\\"},{\\\"trait_type\\\":\\\"Level\\\",\\\"value\\\":\", \r\n        uint2str(b.level),\r\n        \"},{\\\"trait_type\\\":\\\"Element\\\",\\\"value\\\":\\\"\", \r\n        elementDecode[e], \r\n         \"\\\"},{\\\"trait_type\\\":\\\"Weakness\\\",\\\"value\\\":\\\"\");\r\n    }\r\n    function _URIForBattle3(uint id) internal view returns (bytes memory){\r\n        BattleCardStats memory b = battleCardStats[id];\r\n        uint16 e = b.element;\r\n        return abi.encodePacked(\r\n            elementDecode[weakResist[e].weakness], \r\n            \"\\\"},{\\\"trait_type\\\":\\\"Resistance\\\",\\\"value\\\":\\\"\",\r\n            elementDecode[weakResist[e].resistance], \r\n            \"\\\"},{\\\"trait_type\\\":\\\"HP\\\",\\\"value\\\":\", \r\n            uint2str(b.hp));\r\n    }\r\n    function _URIForBattle2(uint id) internal view returns (bytes memory){\r\n        BattleCardStats memory b = battleCardStats[id];\r\n        return abi.encodePacked(\"},{\\\"trait_type\\\":\\\"Speed\\\",\\\"value\\\":\"\r\n        , uint2str(b.speed)\r\n        , \"},{\\\"trait_type\\\":\\\"Intelligence\\\",\\\"value\\\":\"\r\n        , uint2str(b.intelligence)\r\n        , \"},{\\\"trait_type\\\":\\\"Defense\\\",\\\"value\\\":\"\r\n        , uint2str(b.defense));\r\n    }\r\n    function _URIForBattle4(uint id) internal view returns (bytes memory){\r\n        BattleCardStats memory b = battleCardStats[id];\r\n        return abi.encodePacked(\"},{\\\"trait_type\\\":\\\"Attack\\\",\\\"value\\\":\",\r\n        uint2str(b.attack),\r\n        \"},{\\\"trait_type\\\":\\\"Special Attack\\\",\\\"value\\\":\", \r\n        uint2str(b.specialAttack), \r\n        \"},{\\\"trait_type\\\":\\\"Special Defense\\\",\\\"value\\\":\", \r\n        uint2str(b.specialDefense), \r\n        \"}]}\");\r\n    }\r\n    \r\n    function _getUri2(uint id) internal view returns(bytes memory){\r\n        if (battleCardStats[id].hp==0){\r\n            return _URIForSupport(id);\r\n        }else{\r\n            return abi.encodePacked(_URIForBattle(id), _URIForBattle3(id), _URIForBattle2(id), _URIForBattle4(id));\r\n        }\r\n    }\r\n    function _getUri(uint id) internal view returns (string memory){\r\n        return string(abi.encodePacked(\"data:application/json;base64\\r\\n\\r\\n\", Base64.encode(_getUri2(id))));\r\n    }\r\n    \r\n}\r\n"
    },
    "contracts/cardlib/Roles.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        \r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}"
    },
    "contracts/cardlib/WhitelistAdminRole.sol": {
      "content": "import \"./Context.sol\";\r\nimport \"./Roles.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor ()  {\r\n        _addWhitelistAdmin(_msgSender());\r\n        _addWhitelistAdmin(address(0x104E989923417D765215B48e03baa4aF222f3F6D));\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        require (account != address(this));\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n"
    },
    "contracts/iface/IPepemonCardOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\r\n**/\r\ninterface IPepemonCardOracle {\r\n\r\n    enum SupportCardType {\r\n        OFFENSE,\r\n        STRONG_OFFENSE,\r\n        DEFENSE,\r\n        STRONG_DEFENSE\r\n    }\r\n\r\n    enum EffectTo {\r\n        ATTACK,\r\n        STRONG_ATTACK,\r\n        DEFENSE,\r\n        STRONG_DEFENSE,\r\n        SPEED,\r\n        INTELLIGENCE\r\n    }\r\n\r\n    enum EffectFor {\r\n        ME,\r\n        ENEMY\r\n    }\r\n\r\n    enum BattleCardTypes{\r\n        FIRE,\r\n        GRASS,\r\n        WATER,\r\n        LIGHTNING,\r\n        WIND,\r\n        POISON,\r\n        GHOST,\r\n        FAIRY,\r\n        EARTH,\r\n        UNKNOWN,\r\n        NONE\r\n    }\r\n\r\n    struct BattleCardStats {\r\n        uint256 battleCardId;\r\n        BattleCardTypes element;\r\n        uint16 hp; // hitpoints\r\n        uint16 spd; // speed\r\n        uint16 inte; // intelligence\r\n        uint16 def; // defense\r\n        uint16 atk; // attack\r\n        uint16 sAtk; // special attack\r\n        uint16 sDef; // special defense\r\n    }\r\n\r\n    struct SupportCardStats {\r\n        uint256 supportCardId;\r\n        SupportCardType supportCardType;\r\n        EffectOne effectOne;\r\n        EffectMany effectMany;\r\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\r\n        bool unstackable;\r\n        // This property is for EffectMany now.\r\n        // If true, assume the card is already in effect\r\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\r\n        bool unresettable;\r\n    }\r\n\r\n    struct EffectOne {\r\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\r\n        \r\n        //basePower = power if req not met\r\n        int16 basePower;\r\n\r\n        //triggeredPower = power if req met\r\n        int16 triggeredPower;\r\n        EffectTo effectTo;\r\n        EffectFor effectFor;\r\n        uint16 reqCode; //requirement code\r\n    }\r\n\r\n    struct EffectMany {\r\n        int16 power;\r\n        uint16 numTurns;\r\n        EffectTo effectTo;\r\n        EffectFor effectFor;\r\n        uint16 reqCode; //requirement code\r\n    }\r\n\r\n    //Struct for keeping track of weakness / resistance\r\n    struct elementWR{\r\n        BattleCardTypes weakness;\r\n        BattleCardTypes resistance;\r\n    }\r\n\r\n    // mappings\r\n    function battleCardStats(uint256 x) view external returns (BattleCardStats memory);\r\n    \r\n    function supportCardStats(uint256 x) view external returns (SupportCardStats memory);\r\n    \r\n    function elementDecode(BattleCardTypes x) view external returns (string memory);\r\n    \r\n    function weakResist(BattleCardTypes x) view external returns (elementWR memory);\r\n\r\n    // other functions\r\n    function addBattleCard(BattleCardStats memory cardData) external;\r\n\r\n    function updateBattleCard(BattleCardStats memory cardData) external;\r\n\r\n    function getBattleCardById(uint256 _id) view external returns (BattleCardStats memory);\r\n\r\n    function addSupportCard(SupportCardStats memory cardData) external;\r\n\r\n    function updateSupportCard(SupportCardStats memory cardData) external;\r\n\r\n    function getSupportCardById(uint256 _id) view  external returns (SupportCardStats memory);\r\n\r\n    function getWeakResist(BattleCardTypes element) view  external returns (elementWR memory);\r\n\r\n    function getSupportCardTypeById(uint256 _id) view external returns (SupportCardType);\r\n}\r\n"
    },
    "contracts/iface/IPepemonFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPepemonFactory {\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function setApprovalForAll(\r\n        address _operator,\r\n        bool _approved\r\n    ) external;\r\n\r\n    function balanceOf(\r\n        address _owner, \r\n        uint256 _id\r\n    ) external view returns (uint256);\r\n\r\n    function airdrop(\r\n        uint256 _id,\r\n        address[] memory _addresses\r\n    ) external;\r\n\r\n    function batchMint(\r\n        uint start, \r\n        uint end, \r\n        address to) \r\n    external;\r\n\r\n    function addMinter(\r\n        address account\r\n    ) external;\r\n}\r\n"
    },
    "contracts/lib/AdminRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Roles.sol\";\n\ncontract AdminRole {\n  using Roles for Roles.Role;\n\n  event AdminAdded(address indexed account);\n  event AdminRemoved(address indexed account);\n\n  Roles.Role private admins;\n\n  constructor() {\n    _addAdmin(msg.sender);\n  }\n\n  modifier onlyAdmin() {\n    require(isAdmin(msg.sender));\n    _;\n  }\n\n  function isAdmin(address account) public view returns (bool) {\n    return admins.has(account);\n  }\n\n  function addAdmin(address account) public onlyAdmin {\n    _addAdmin(account);\n  }\n\n  function renounceAdmin() public {\n    _removeAdmin(msg.sender);\n  }\n\n  function _addAdmin(address account) internal {\n    admins.add(account);\n    emit AdminAdded(account);\n  }\n\n  function _removeAdmin(address account) internal {\n    admins.remove(account);\n    emit AdminRemoved(account);\n  }\n}"
    },
    "contracts/lib/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Arrays {\n    //Shuffles an array of uints with random seed\n    function shuffle(uint256[] memory _elements, uint256 _seed) internal pure returns (uint256[] memory) {\n        for (uint256 i = 0; i < _elements.length; i++) {\n            //Pick random index to swap current element with\n            uint256 n = i + _seed % (_elements.length - i);\n\n            //swap elements\n            uint256 temp = _elements[n];\n            _elements[n] = _elements[i];\n            _elements[i] = temp;\n\n            //Create new pseudorandom number using seed.\n            _seed = uint(keccak256(abi.encodePacked(_seed)));\n        }\n        return _elements;\n    }\n}\n"
    },
    "contracts/lib/ChainLinkRngOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\r\nimport \"./AdminRole.sol\";\r\n\r\nabstract contract ChainLinkRngOracle is VRFConsumerBase, AdminRole {\r\n    bytes32 immutable keyHash;\r\n    bytes32 public lastRequestId;\r\n    uint256 internal fee;\r\n\r\n    address constant maticLink = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\r\n    address constant maticVrfCoordinator = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\r\n    bytes32 constant maticKeyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\r\n\r\n    address constant mumbaiLink = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\r\n    address constant mumbaiVrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;\r\n    bytes32 constant mumbaiKeyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\r\n\r\n    address constant fantomTestnetLink = 0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F;\r\n    address constant fantomTestnetVrfCoordinator = 0xbd13f08b8352A3635218ab9418E340c60d6Eb418;\r\n    bytes32 constant fantomTestnetKeyHash = 0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4;\r\n\r\n    address constant fantomLink = 0x6F43FF82CCA38001B6699a8AC47A2d0E66939407;\r\n    address constant fantomVrfCoordinator = 0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634;\r\n    bytes32 constant fantomKeyHash = 0x5881eea62f9876043df723cf89f0c2bb6f950da25e9dfe66995c24f919c8f8ab;\r\n\r\n\r\n\r\n    mapping(bytes32 => uint256) internal results;\r\n\r\n    constructor() VRFConsumerBase(fantomTestnetVrfCoordinator, fantomTestnetLink) {\r\n        keyHash = fantomTestnetKeyHash;\r\n        fee = 1 ether / 1000;\r\n    }\r\n\r\n    //Get a new random number (paying link for it)\r\n    //Only callable by admin\r\n    function getNewRandomNumber() public onlyAdmin returns (bytes32 requestId) {\r\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\r\n        lastRequestId = requestRandomness(keyHash, fee);\r\n        return lastRequestId;\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        results[requestId] = randomness;\r\n    }\r\n\r\n    function fetchNumberByRequestId(bytes32 _requestId) public view returns (uint256) {\r\n        return results[_requestId];\r\n    }\r\n\r\n    //Get most recent random number and use that as randomness source    \r\n    function getRandomNumber() public view returns (uint256){\r\n        return fetchNumberByRequestId(lastRequestId);        \r\n    }\r\n}\r\n"
    },
    "contracts/lib/Elo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// https://github.com/saucepoint/elo-lib/blob/main/src/Elo.sol\npragma solidity ^0.8.0;\n\nimport {FixedPointMathLib as fp} from \"solmate/src/utils/FixedPointMathLib.sol\";\n\nlibrary Elo {\n    /// @notice Get the 16th root of a number, used in ELO calculations\n    /// @dev Elo calculations require the 400th root (10 ^ (x / 400)), however this can be simplified to the 16th root (10 ^ ((x / 25) / 16))\n    function sixteenthRoot(uint256 x) internal pure returns (uint256) {\n        return fp.sqrt(fp.sqrt(fp.sqrt(fp.sqrt(x))));\n    }\n\n    /// @notice Calculates the change in ELO rating, after a given outcome.\n    /// @param ratingA the ELO rating of the player A\n    /// @param ratingB the ELO rating of the player B\n    /// @param score the score of the player A, scaled by 100. 100 = win, 50 = draw, 0 = loss\n    /// @param kFactor the k-factor or development multiplier used to calculate the change in ELO rating. 20 is the typical value\n    /// @return change the change in ELO rating of player A, with 2 decimals of precision. 1501 = 15.01 ELO change\n    /// @return negative the directional change of player A's ELO. Opposite sign for player B\n    function ratingChange(uint256 ratingA, uint256 ratingB, uint256 score, uint256 kFactor)\n        internal\n        pure\n        returns (uint256 change, bool negative)\n    {\n        uint256 _kFactor; // scaled up `kFactor` by 100\n        bool _negative = ratingB < ratingA;\n        uint256 ratingDiff; // absolute value difference between `ratingA` and `ratingB`\n\n        unchecked {\n            // scale up the inputs by a factor of 100\n            // since our elo math is scaled up by 100 (to avoid low precision integer division)\n            _kFactor = kFactor * 10_000;\n            ratingDiff = _negative ? ratingA - ratingB : ratingB - ratingA;\n        }\n\n        // checks against overflow/underflow, discovered via fuzzing\n        // large rating diffs leads to 10^ratingDiff being too large to fit in a uint256\n        require(ratingDiff < 1126, \"Rating difference too large\");\n        // large rating diffs when applying the scale factor leads to underflow (800 - ratingDiff)\n        if (_negative) require(ratingDiff < 800, \"Rating difference too large\");\n\n        // ----------------------------------------------------------------------\n        // Below, we'll be running simplified versions of the following formulas:\n        // expected score = 1 / (1 + 10 ^ (ratingDiff / 400))\n        // elo change = kFactor * (score - expectedScore)\n\n        uint256 n; // numerator of the power, with scaling, (numerator of `ratingDiff / 400`)\n        uint256 _powered; // the value of 10 ^ numerator\n        uint256 powered; // the value of 16th root of 10 ^ numerator (fully resolved 10 ^ (ratingDiff / 400))\n        uint256 kExpectedScore; // the expected score with K factor distributed\n        uint256 kScore; // the actual score with K factor distributed\n\n        unchecked {\n            // apply offset of 800 to scale the result by 100\n            n = _negative ? 800 - ratingDiff : 800 + ratingDiff;\n\n            // (x / 400) is the same as ((x / 25) / 16))\n            _powered = fp.rpow(10, n / 25, 1); // divide by 25 to avoid reach uint256 max\n            powered = sixteenthRoot(_powered); // x ^ (1 / 16) is the same as 16th root of x\n\n            // given `change = kFactor * (score - expectedScore)` we can distribute kFactor to both terms\n            kExpectedScore = _kFactor / (100 + powered); // both numerator and denominator scaled up by 100\n            kScore = kFactor * score; // input score is already scaled up by 100\n\n            // determines the sign of the ELO change\n            negative = kScore < kExpectedScore;\n            change = negative ? kExpectedScore - kScore : kScore - kExpectedScore;\n        }\n    }\n}"
    },
    "contracts/lib/RewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface RewardPool {\n    /**\n     * @dev Adds a single reward into the pool.\n     * @param tokenAddress Reward address\n     * @param tokenId Reward id\n     */\n    function addReward(address tokenAddress, uint256 tokenId) external; //onlyAdmin\n\n    /**\n     * @dev Transfer an amount of a given token from the sender into the rewardPool\n     * @param tokenAddress Reward address\n     * @param tokenId Reward id\n     * @param amount The number of items to be added to the pool.\n     */\n    function addRewards(address tokenAddress, uint256 tokenId, uint256 amount) external; //onlyAdmin\n\n    /**\n     * @dev Takes a random reward from rewardPool and sends it to someone.\n     * @param rngSeed RNG seed of a Battle\n     * @param account Address of who will receive the reward\n     */\n    function sendReward(uint256 rngSeed, address account) external; //onlyAdmin\n}"
    },
    "contracts/lib/Roles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}"
    },
    "contracts/PepemonBattle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\nimport \"./lib/AdminRole.sol\";\r\nimport \"./PepemonCardDeck.sol\";\r\nimport \"./iface/IPepemonCardOracle.sol\";\r\nimport \"./lib/ChainLinkRngOracle.sol\";\r\n\r\ncontract PepemonBattle is AdminRole {\r\n\r\n    event BattleCreated(\r\n        address indexed player1Addr,\r\n        address indexed player2Addr,\r\n        uint256 battleId,\r\n        uint256 p1DeckId,\r\n        uint256 p2DeckId\r\n    );\r\n\r\n    mapping (uint => uint) public battleIdRNGSeed;\r\n\r\n    uint constant _max_inte = 8;\r\n    uint constant _max_cards_on_table = 5;\r\n    uint constant _refreshTurn = 5;\r\n\r\n    //Attacker can either be PLAYER_ONE or PLAYER_TWO\r\n    enum Attacker {\r\n        PLAYER_ONE,\r\n        PLAYER_TWO\r\n    }\r\n\r\n    //Game can either be in FIRST_HALF or SECOND_HALF\r\n    enum TurnHalves {\r\n        FIRST_HALF,\r\n        SECOND_HALF\r\n    }\r\n\r\n    //Battle contains:\r\n    //battleId = ID of this battle\r\n    //player1, player2 = players\r\n    //currentTurn\r\n    //attacker\r\n    //turnHalves => first half or second half?\r\n    struct Battle {\r\n        uint256 battleId;\r\n        Player player1;\r\n        Player player2;\r\n        uint256 currentTurn;\r\n        Attacker attacker;\r\n        TurnHalves turnHalves;\r\n    }\r\n\r\n    // Used to keep a local copy of players battle/support cards instead of reloading\r\n    // from the oracle\r\n    struct PlayersCards {\r\n        uint256 player1SupportCardsCount;\r\n        uint256 player2SupportCardsCount;\r\n        IPepemonCardOracle.BattleCardStats player1Battlecard;\r\n        IPepemonCardOracle.BattleCardStats player2Battlecard;\r\n        uint256[] player1SupportCards;\r\n        uint256[] player2SupportCards;\r\n    }\r\n\r\n    //playerAddr\r\n    //deckId = Id of deck\r\n    //hand = keeps track of current player's stats (such as health)\r\n    //totalSupportCardIds = all IDs of support cards\r\n    //playedCardCount = number of cards played already\r\n    struct Player {\r\n        address playerAddr;\r\n        uint256 deckId;\r\n        Hand hand;\r\n        uint256[60] totalSupportCardIds;\r\n        uint256 playedCardCount;\r\n    }\r\n\r\n    //health - health of player's battle card\r\n    // battleCardId = card id of player\r\n    // currentBCstats = all stats of the player's battle cards currently\r\n    // supportCardInHandIds = IDs of the support cards in your current hand\r\n    //                  the amount of support cards a player can play is determined by intelligence\r\n    // tableSupportCardStats = Number of support cards that are currently played on the table\r\n    // currentSuportCards = cards on the table, based on which turn ago they were played\r\n    //                      Notice that the number of turns is limited by _refreshTurn\r\n    struct Hand {\r\n        int256 health;\r\n        uint256 battleCardId;\r\n        CurrentBattleCardStats currentBCstats;\r\n        uint256[_max_inte] supportCardInHandIds;\r\n        uint256 tableSupportCardStats;\r\n        TableSupportCardStats[_max_cards_on_table] tableSupportCards;\r\n    }\r\n    //spd, inte, def, atk, sAtk, sDef - Current stats of battle card (with powerups included)\r\n    //Each param can go into the negatives\r\n    struct CurrentBattleCardStats {\r\n        int256 spd;\r\n        uint256 inte;\r\n        int256 def;\r\n        int256 atk;\r\n        int256 sAtk;\r\n        int256 sDef;\r\n    }\r\n\r\n    //links supportCardID with effectMany\r\n    struct TableSupportCardStats {\r\n        uint256 supportCardId;\r\n        IPepemonCardOracle.EffectMany effectMany;\r\n    }\r\n\r\n    uint256 private _nextBattleId;\r\n\r\n    bool private _allowBattleAgainstOneself;\r\n\r\n    IPepemonCardOracle private _cardContract;\r\n    PepemonCardDeck private _deckContract;\r\n    ChainLinkRngOracle private _randNrGenContract;\r\n\r\n    constructor(\r\n        address cardOracleAddress,\r\n        address deckOracleAddress,\r\n        address randOracleAddress\r\n    ) {\r\n        _cardContract = IPepemonCardOracle(cardOracleAddress);\r\n        _deckContract = PepemonCardDeck(deckOracleAddress);\r\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\r\n        _nextBattleId = 1;\r\n        _allowBattleAgainstOneself = false;\r\n    }\r\n\r\n    function setCardContractAddress(address cardOracleAddress) public onlyAdmin {\r\n        _cardContract = IPepemonCardOracle(cardOracleAddress);\r\n    }\r\n\r\n    function setBattleContractAddress(address deckOracleAddress) public onlyAdmin {\r\n        _deckContract = PepemonCardDeck(deckOracleAddress);\r\n    }\r\n\r\n    function setRandNrGenContractAddress(address randOracleAddress) public onlyAdmin {\r\n        _randNrGenContract = ChainLinkRngOracle(randOracleAddress);\r\n    }\r\n\r\n    function setAllowBattleAgainstOneself(bool allow) public onlyAdmin {\r\n        _allowBattleAgainstOneself = allow;\r\n    }\r\n\r\n    /**\r\n     * @dev Create battle\r\n     * @param p1Addr address player1\r\n     * @param p1DeckId uint256\r\n     * @param p2Addr address player2\r\n     * @param p2DeckId uint256\r\n     */\r\n    function createBattle(\r\n        address p1Addr,\r\n        uint256 p1DeckId,\r\n        address p2Addr,\r\n        uint256 p2DeckId\r\n    ) public onlyAdmin returns (Battle memory, uint256 battleId)  {\r\n        require(_allowBattleAgainstOneself || p1Addr != p2Addr, \"PepemonBattle: Cannot battle yourself\");\r\n\r\n        (uint256 p1BattleCardId, ) = _deckContract.decks(p1DeckId);\r\n        (uint256 p2BattleCardId, ) = _deckContract.decks(p2DeckId);\r\n\r\n        IPepemonCardOracle.BattleCardStats memory p1BattleCard = _cardContract.getBattleCardById(p1BattleCardId);\r\n        IPepemonCardOracle.BattleCardStats memory p2BattleCard = _cardContract.getBattleCardById(p2BattleCardId);\r\n\r\n        Battle memory newBattle;\r\n        // Initiate battle ID\r\n        newBattle.battleId = _nextBattleId;\r\n        // Initiate player1\r\n        newBattle.player1.hand.health = int256(uint256(p1BattleCard.hp));\r\n        newBattle.player1.hand.battleCardId = p1BattleCardId;\r\n        newBattle.player1.playerAddr = p1Addr;\r\n        newBattle.player1.deckId = p1DeckId;\r\n        // Initiate player2\r\n        newBattle.player2.hand.health = int256(uint256(p2BattleCard.hp));\r\n        newBattle.player2.hand.battleCardId = p2BattleCardId;\r\n        newBattle.player2.playerAddr = p2Addr;\r\n        newBattle.player2.deckId = p2DeckId;\r\n        // Set the RNG seed\r\n        battleIdRNGSeed[_nextBattleId] = _randSeed(newBattle);\r\n\r\n        //Emit event\r\n        emit BattleCreated(p1Addr, p2Addr, _nextBattleId, p1DeckId, p2DeckId);\r\n        return (newBattle, _nextBattleId++);\r\n    }\r\n\r\n    function getPlayersCards(\r\n        uint256 player1BattleCardId,\r\n        uint256 player2BattleCardId,\r\n        uint256 player1DeckId,\r\n        uint256 player2DeckId\r\n    ) internal view returns (PlayersCards memory) {\r\n        // Get Battle Cards for Player 1 and Player 2\r\n        IPepemonCardOracle.BattleCardStats memory player1Battlecard = _cardContract.getBattleCardById(player1BattleCardId);\r\n        IPepemonCardOracle.BattleCardStats memory player2Battlecard = _cardContract.getBattleCardById(player2BattleCardId);\r\n\r\n        // Get Support Cards for Player 1 and Player 2\r\n        uint256[] memory player1SupportCards = _deckContract.getAllSupportCardsInDeck(player1DeckId);\r\n        uint256[] memory player2SupportCards = _deckContract.getAllSupportCardsInDeck(player2DeckId);\r\n\r\n        // Get Support Card count for Player 1 and Player 2\r\n        uint256 player1SupportCardsCount = _deckContract.getSupportCardCountInDeck(player1DeckId);\r\n        uint256 player2SupportCardsCount = _deckContract.getSupportCardCountInDeck(player2DeckId);\r\n\r\n        // Create and return the PlayersCards struct instance\r\n        return PlayersCards({\r\n            player1Battlecard: player1Battlecard,\r\n            player1SupportCards: player1SupportCards,\r\n            player1SupportCardsCount: player1SupportCardsCount,\r\n            player2Battlecard: player2Battlecard,\r\n            player2SupportCards: player2SupportCards,\r\n            player2SupportCardsCount: player2SupportCardsCount\r\n        });\r\n    }\r\n\r\n    function goForBattle(Battle memory battle) public view returns (Battle memory, address winner) {\r\n        // local cache for cards and decks info to reduce gas usage\r\n        PlayersCards memory cards = getPlayersCards(\r\n            battle.player1.hand.battleCardId,\r\n            battle.player2.hand.battleCardId,\r\n            battle.player1.deckId,\r\n            battle.player2.deckId\r\n        );\r\n\r\n        //Initialize battle by starting the first turn\r\n        battle = goForNewTurn(battle, cards);\r\n        address winnerAddr;\r\n        // Battle goes!\r\n        while (true) {\r\n            // Resolve attacker in the current turn\r\n            battle = resolveAttacker(battle);\r\n            // Fight\r\n            battle = fight(battle);\r\n\r\n            // Check if battle ended\r\n            (bool isEnded, address win) = checkIfBattleEnded(battle);\r\n            if (isEnded) {\r\n                winnerAddr = win;\r\n                break;\r\n            }\r\n\r\n            // Resolve turn halves\r\n            battle = updateTurnInfo(battle, cards);\r\n        }\r\n        return (battle, winnerAddr);\r\n    }\r\n\r\n    //If currently in first half -> go to second half\r\n    //If currently in second half -> make a new turn\r\n    function updateTurnInfo(Battle memory battle, PlayersCards memory cards) internal view returns (Battle memory) {\r\n        // If the current half is first, go over second half\r\n        // or go over next turn\r\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\r\n            battle.turnHalves = TurnHalves.SECOND_HALF;\r\n        } else {\r\n            battle = goForNewTurn(battle, cards);\r\n        }\r\n\r\n        return battle;\r\n    }\r\n\r\n    //Things this function does:\r\n    //Reset both players hand infos back to base stats (stats with no support card powerups)\r\n    //Check if support cards need to be scrambled and redealt\r\n    //Redeal support cards if necessary\r\n    //Calculate support card's power\r\n    //Finally, draw Pepemon's intelligence number of cards.\r\n    function goForNewTurn(Battle memory battle, PlayersCards memory cards) internal view returns (Battle memory) {\r\n        Player memory player1 = battle.player1;\r\n        Player memory player2 = battle.player2;\r\n\r\n        // Load base battle card stats (stats without any powerups)\r\n        // and reset both players' hand infos to base stats\r\n        player1.hand.currentBCstats = getCardStats(cards.player1Battlecard);\r\n        player2.hand.currentBCstats = getCardStats(cards.player2Battlecard);\r\n\r\n        uint256 p1SupportCardIdsLength = cards.player1SupportCardsCount;\r\n        uint256 p2SupportCardIdsLength = cards.player2SupportCardsCount;\r\n\r\n        //Refresh cards every 5 turns\r\n        bool isRefreshTurn = (battle.currentTurn % _refreshTurn == 0);\r\n\r\n        if (isRefreshTurn) {\r\n            //Need to refresh decks\r\n\r\n            // Shuffle player1 support cards\r\n            uint[] memory scrambled = Arrays.shuffle(cards.player1SupportCards, _randMod(69, battle));\r\n\r\n            //Copy back scrambled cards to original list\r\n            for (uint i = 0 ; i < p1SupportCardIdsLength; i++){\r\n                player1.totalSupportCardIds[i]=scrambled[i];\r\n            }\r\n            \r\n            //Reset played card count\r\n            player1.playedCardCount = 0;\r\n\r\n            //Shuffling player 2 support cards\r\n            //Create a pseudorandom seed and shuffle the cards\r\n            uint[] memory scrambled2 = Arrays.shuffle(cards.player2SupportCards, _randMod(420, battle));\r\n\r\n            //Copy the support cards back into the list\r\n            for (uint256 i = 0; i < p2SupportCardIdsLength; i++) {\r\n                player2.totalSupportCardIds[i]=scrambled2[i];\r\n            }\r\n            \r\n            //Reset player2 played card counts\r\n            player2.playedCardCount = 0;\r\n        }\r\n        else \r\n        {\r\n            //Don't need to refresh cards now\r\n\r\n            // Get temp support info of previous turn's hands and calculate their effect for the new turn\r\n            player1.hand = calSupportCardsOnTable(player1.hand, player2.hand);\r\n            player2.hand = calSupportCardsOnTable(player2.hand, player1.hand);\r\n        }\r\n\r\n        // Draw player1 support cards for the new turn\r\n        uint256 remainingCards = p1SupportCardIdsLength - player1.playedCardCount;\r\n        // limit number of cards to be taken to prevent taking invalid cards\r\n        player1.hand.currentBCstats.inte = remainingCards < player1.hand.currentBCstats.inte ? remainingCards : player1.hand.currentBCstats.inte;\r\n        for (uint256 i = 0; i < player1.hand.currentBCstats.inte; i++) {\r\n            // \"totalSupportCardIds\" array has 60 elements, max intelligence is 8 (_max_inte), each 5 rounds playedCardCount is reset, \r\n            // so in total, 40 (5*8) cards could end up being used, no out of bounds errors\r\n            player1.hand.supportCardInHandIds[i] = player1.totalSupportCardIds[i + player1.playedCardCount];\r\n        }\r\n        player1.playedCardCount += player1.hand.currentBCstats.inte;\r\n\r\n        // Draw player2 support cards for the new turn\r\n        remainingCards = p2SupportCardIdsLength - player2.playedCardCount;\r\n        // limit number of cards to be taken to prevent taking invalid cards\r\n        player2.hand.currentBCstats.inte = remainingCards < player2.hand.currentBCstats.inte ? remainingCards : player2.hand.currentBCstats.inte;\r\n        for (uint256 i = 0; i < player2.hand.currentBCstats.inte; i++) {\r\n            player2.hand.supportCardInHandIds[i] = player2.totalSupportCardIds[i + player2.playedCardCount];\r\n        }\r\n        player2.playedCardCount += player2.hand.currentBCstats.inte;\r\n\r\n        //Update current battle info\r\n        battle.player1 = player1;\r\n        battle.player2 = player2;\r\n\r\n        // Increment current turn number of battle\r\n        battle.currentTurn++;\r\n\r\n        // Go for first half in turn\r\n        battle.turnHalves = TurnHalves.FIRST_HALF;\r\n\r\n        return battle;\r\n    }\r\n\r\n    //This method calculates the battle card's stats after taking into consideration all the support cards currently being played\r\n    function calSupportCardsOnTable(Hand memory hand, Hand memory oppHand) internal pure returns (Hand memory) {\r\n        for (uint256 i = 0; i < hand.tableSupportCardStats; i++) {\r\n            //Loop through every support card currently played\r\n\r\n            //Get the support card being considered now\r\n            TableSupportCardStats memory tableSupportCardStat = hand.tableSupportCards[i];\r\n            \r\n            //Get the effect of that support card\r\n            IPepemonCardOracle.EffectMany memory effect = tableSupportCardStat.effectMany;\r\n            \r\n            //If there is at least 1 turn left\r\n            if (effect.numTurns >= 1) {\r\n\r\n                //If the effect is for me\r\n                if (effect.effectFor == IPepemonCardOracle.EffectFor.ME) {\r\n                    // Change my card's stats using that support card\r\n                    // Currently effectTo of EffectMany can be ATTACK, DEFENSE, SPEED and INTELLIGENCE\r\n                    //Get the statistic changed and update it \r\n                    //Intelligence can't go into the negatives nor above _max_inte\r\n                    if (effect.effectTo == IPepemonCardOracle.EffectTo.ATTACK) {\r\n                        hand.currentBCstats.atk += effect.power;\r\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.DEFENSE) {\r\n                        hand.currentBCstats.def += effect.power;\r\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.SPEED) {\r\n                        hand.currentBCstats.spd += effect.power;\r\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.INTELLIGENCE) {\r\n                        int temp;\r\n                        temp = int256(hand.currentBCstats.inte) + effect.power;\r\n                        temp = temp > int(_max_inte) ? int(_max_inte) : temp;\r\n                        hand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\r\n                    }\r\n                } else {\r\n                    //The card affects the opp's pepemon\r\n                    //Update card stats of the opp's pepemon\r\n                    //Make sure INT stat can't go below zero nor above _max_inte\r\n                    if (effect.effectTo == IPepemonCardOracle.EffectTo.ATTACK) {\r\n                        oppHand.currentBCstats.atk += effect.power;\r\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.DEFENSE) {\r\n                        oppHand.currentBCstats.def += effect.power;\r\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.SPEED) {\r\n                        oppHand.currentBCstats.spd += effect.power;\r\n                    } else if (effect.effectTo == IPepemonCardOracle.EffectTo.INTELLIGENCE) {\r\n                        int temp;\r\n                        temp = int256(oppHand.currentBCstats.inte) + effect.power;\r\n                        temp = temp > int(_max_inte) ? int(_max_inte) : temp;\r\n                        oppHand.currentBCstats.inte = (temp > 0 ? uint(temp) : 0);\r\n                    }\r\n                }\r\n                // Decrease effect numTurns by 1 since 1 turn has already passed\r\n                effect.numTurns--;\r\n                // Delete this one from tableSupportCardStat if all turns of the card have been exhausted\r\n                if (effect.numTurns == 0) {\r\n                    if (i < hand.tableSupportCardStats - 1) {\r\n                        hand.tableSupportCards[i] = hand.tableSupportCards[hand.tableSupportCardStats - 1];\r\n                    }\r\n                    delete hand.tableSupportCards[hand.tableSupportCardStats - 1];\r\n                    hand.tableSupportCardStats--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return hand;\r\n    }\r\n\r\n    //This method gets the current attacker\r\n    function resolveAttacker(Battle memory battle) internal view returns (Battle memory) {\r\n        CurrentBattleCardStats memory p1CurrentBattleCardStats = battle.player1.hand.currentBCstats;\r\n        CurrentBattleCardStats memory p2CurrentBattleCardStats = battle.player2.hand.currentBCstats;\r\n\r\n        if (battle.turnHalves == TurnHalves.FIRST_HALF) {\r\n            //Player with highest speed card goes first\r\n            if (p1CurrentBattleCardStats.spd > p2CurrentBattleCardStats.spd) {\r\n                battle.attacker = Attacker.PLAYER_ONE;\r\n            } else if (p1CurrentBattleCardStats.spd < p2CurrentBattleCardStats.spd) {\r\n                battle.attacker = Attacker.PLAYER_TWO;\r\n            } else {\r\n                //Tiebreak: intelligence\r\n                if (p1CurrentBattleCardStats.inte > p2CurrentBattleCardStats.inte) {\r\n                    battle.attacker = Attacker.PLAYER_ONE;\r\n                } else if (p1CurrentBattleCardStats.inte < p2CurrentBattleCardStats.inte) {\r\n                    battle.attacker = Attacker.PLAYER_TWO;\r\n                } else {\r\n                    //Second tiebreak: use RNG\r\n                    uint256 rand = _randMod(69420, battle) % 2;\r\n                    battle.attacker = (rand == 0 ? Attacker.PLAYER_ONE : Attacker.PLAYER_TWO);\r\n                }\r\n            }\r\n        } else {\r\n            //For second half, switch players\r\n            battle.attacker = (battle.attacker == Attacker.PLAYER_ONE ? Attacker.PLAYER_TWO : Attacker.PLAYER_ONE);\r\n        }\r\n\r\n        return battle;\r\n    }\r\n\r\n    //Create a random seed, using the chainlink number and the addresses of the combatants as entropy\r\n    function _randSeed(Battle memory battle) private view returns (uint256) {\r\n        //Get the chainlink random number\r\n        uint chainlinkNumber = _randNrGenContract.getRandomNumber();\r\n        //Create a new pseudorandom number using the seed and battle info as entropy\r\n        //This makes sure the RNG returns a different number every time\r\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(block.number, chainlinkNumber, battle.player1.playerAddr, battle.player2.playerAddr)));\r\n        return randomNumber;\r\n    }\r\n\r\n    function _randMod(uint256 seed, Battle memory battle) private view returns (uint256) {\r\n        uint256 randomNumber = uint(keccak256(abi.encodePacked(seed, battle.currentTurn, battleIdRNGSeed[battle.battleId])));\r\n        return randomNumber;\r\n    }\r\n\r\n    //Check if battle ended by looking at player's health\r\n    function checkIfBattleEnded(Battle memory battle) public pure returns (bool, address) {\r\n        if (battle.player1.hand.health <= 0) {\r\n            return (true, battle.player1.playerAddr);\r\n        } else if (battle.player2.hand.health <= 0) {\r\n            return (true, battle.player2.playerAddr);\r\n        } else {\r\n            return (false, address(0));\r\n        }\r\n    }\r\n\r\n    function fight(Battle memory battle) public view returns (Battle memory) {\r\n        Hand memory atkHand;\r\n        Hand memory defHand;\r\n\r\n        //Get attacker and defender for current turn\r\n        if (battle.attacker == Attacker.PLAYER_ONE) {\r\n            atkHand = battle.player1.hand;\r\n            defHand = battle.player2.hand;\r\n        } else {\r\n            atkHand = battle.player2.hand;\r\n            defHand = battle.player1.hand;\r\n        }\r\n\r\n        (atkHand, defHand) = calSupportCardsInHand(atkHand, defHand);\r\n\r\n        //Give 2 point advantage if weakness, 2 point disadvantage if resistance\r\n        atkHand.currentBCstats.atk += resistanceWeaknessCal(atkHand, defHand);\r\n\r\n        // Fight\r\n\r\n        //Calculate HP loss for defending player\r\n        if (atkHand.currentBCstats.atk > defHand.currentBCstats.def) {\r\n            //If attacker's attack > defender's defense, find difference. That is the defending player's HP loss\r\n            defHand.health -= (atkHand.currentBCstats.atk - defHand.currentBCstats.def);\r\n        } else {\r\n            //Otherwise, defender loses 1 HP\r\n            defHand.health -= 1;\r\n        }\r\n\r\n        //Write updated info back into battle\r\n        if (battle.attacker == Attacker.PLAYER_ONE) {\r\n            battle.player1.hand = atkHand;\r\n            battle.player2.hand = defHand;\r\n        } else {\r\n            battle.player1.hand = defHand;\r\n            battle.player2.hand = atkHand;\r\n        }\r\n\r\n        return battle;\r\n    }\r\n\r\n    \r\n    //We calculate the effect of every card in the player's hand\r\n    function calSupportCardsInHand(Hand memory atkHand, Hand memory defHand) public view returns (Hand memory, Hand memory) {\r\n        // If this card is included in player's hand, adds an additional power equal to the total of\r\n        // all normal offense/defense cards\r\n        bool isPower0CardIncluded = false;\r\n        // Total sum of normal support cards\r\n        int256 totalNormalPower = 0;\r\n        // Cal attacker hand\r\n        for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\r\n            //Loop through every card the attacker has in his hand\r\n            uint256 id = atkHand.supportCardInHandIds[i];\r\n\r\n            //Get the support cardStats\r\n            IPepemonCardOracle.SupportCardStats memory cardStats = _cardContract.getSupportCardById(id);\r\n            if (cardStats.supportCardType == IPepemonCardOracle.SupportCardType.OFFENSE) {\r\n                // Card type is OFFENSE.\r\n                // Calc effects of EffectOne array\r\n\r\n                IPepemonCardOracle.EffectOne memory effectOne = cardStats.effectOne;\r\n                \r\n                //Checks if that support card is triggered and by how much it is triggered by\r\n                (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\r\n                if (isTriggered) {\r\n                    //use triggeredPower if triggered\r\n                    atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\r\n                    totalNormalPower += effectOne.triggeredPower * int256(multiplier);\r\n                }\r\n                else{\r\n                    //use basePower if not\r\n                    atkHand.currentBCstats.atk += effectOne.basePower;\r\n                    totalNormalPower += effectOne.basePower;\r\n                }\r\n\r\n            } else if (cardStats.supportCardType == IPepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\r\n                // Card type is STRONG OFFENSE.\r\n\r\n                //Make sure unstackable cards can't be stacked\r\n                if (cardStats.unstackable) {\r\n                    bool isNew = true;\r\n                    // Check if card is new to previous cards\r\n                    for (uint256 j = 0; j < i; j++) {\r\n                        if (id == atkHand.supportCardInHandIds[j]) {\r\n                            isNew = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isNew) {\r\n                        //If it isn't - skip card\r\n                        continue;\r\n                    }\r\n                    // Check if card is new to temp support info cards\r\n                    for (uint256 j = 0; j < atkHand.tableSupportCardStats; j++) {\r\n                        if (id == atkHand.tableSupportCards[j].supportCardId) {\r\n                            isNew = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isNew) {\r\n                        //If it isn't - skip card\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Calc effects of EffectOne array\r\n\r\n                IPepemonCardOracle.EffectOne memory effectOne = cardStats.effectOne;\r\n                (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, true);\r\n                if (isTriggered) {\r\n                    //If triggered: use triggered power\r\n                    if (multiplier > 1) {\r\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower * int256(multiplier);\r\n                    } else {\r\n                        if (effectOne.effectTo == IPepemonCardOracle.EffectTo.STRONG_ATTACK) {\r\n                            // If it's a use Special Attack instead of Attack card\r\n                            atkHand.currentBCstats.atk = atkHand.currentBCstats.sAtk;\r\n                            continue;\r\n                        } else if (effectOne.triggeredPower == 0) {\r\n                            // We have a card that says ATK is increased by amount\r\n                            // Equal to the total of all offense cards in the current turn\r\n                            isPower0CardIncluded = true;\r\n                            continue;\r\n                        }\r\n                        atkHand.currentBCstats.atk += effectOne.triggeredPower;\r\n                    }\r\n                }\r\n                else{\r\n                    //If not triggered: use base power instead\r\n                    atkHand.currentBCstats.atk += effectOne.basePower;\r\n                    totalNormalPower += effectOne.basePower;\r\n                }\r\n                // If card lasts for >1 turns\r\n                if (cardStats.effectMany.power != 0) {\r\n                    // Add card  to table if <5 on table currently\r\n                    if (atkHand.tableSupportCardStats < _max_cards_on_table) {\r\n                        atkHand.tableSupportCards[atkHand.tableSupportCardStats++] = TableSupportCardStats({\r\n                            supportCardId: id,\r\n                            effectMany: cardStats.effectMany\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                // Other card type is ignored.\r\n                continue;\r\n            }\r\n        }\r\n        if (isPower0CardIncluded) {\r\n            //If we have a card that says ATK is increased by amount equal to total of all offense cards\r\n            atkHand.currentBCstats.atk += totalNormalPower;\r\n        }\r\n        // Cal defense hand\r\n        isPower0CardIncluded = false;\r\n        totalNormalPower = 0;\r\n\r\n        for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\r\n            uint256 id = defHand.supportCardInHandIds[i];\r\n            IPepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(id);\r\n            if (card.supportCardType == IPepemonCardOracle.SupportCardType.DEFENSE) {\r\n                // Card type is DEFENSE\r\n                // Calc effects of EffectOne array\r\n\r\n                    IPepemonCardOracle.EffectOne memory effectOne = card.effectOne;\r\n                    (bool isTriggered, uint256 multiplier) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\r\n                    if (isTriggered) {\r\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(multiplier);\r\n                        totalNormalPower += effectOne.triggeredPower * int256(multiplier);\r\n                    }\r\n                    else{\r\n                        //If not triggered, use base power instead\r\n                        defHand.currentBCstats.def += effectOne.basePower;\r\n                        totalNormalPower += effectOne.basePower;\r\n                    }\r\n\r\n            } else if (card.supportCardType == IPepemonCardOracle.SupportCardType.STRONG_DEFENSE) {\r\n                // Card type is STRONG DEFENSE\r\n                if (card.unstackable) {\r\n                    bool isNew = true;\r\n                    // Check if card is new to previous cards\r\n                    for (uint256 j = 0; j < i; j++) {\r\n                        if (id == defHand.supportCardInHandIds[j]) {\r\n                            isNew = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    // Check if card is new to temp support info cards\r\n                    for (uint256 j = 0; j < defHand.tableSupportCardStats; j++) {\r\n                        if (id == defHand.tableSupportCards[j].supportCardId) {\r\n                            isNew = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isNew) {\r\n                        continue;\r\n                    }\r\n                }\r\n                // Calc effects of EffectOne array\r\n                IPepemonCardOracle.EffectOne memory effectOne = card.effectOne;\r\n                (bool isTriggered, uint256 num) = checkReqCode(atkHand, defHand, effectOne.reqCode, false);\r\n                if (isTriggered) {\r\n                    if (num > 0) {\r\n                        defHand.currentBCstats.def += effectOne.triggeredPower * int256(num);\r\n                    } else {\r\n                        if (effectOne.effectTo == IPepemonCardOracle.EffectTo.STRONG_DEFENSE) {\r\n                            defHand.currentBCstats.def = defHand.currentBCstats.sDef;\r\n                            continue;\r\n                        } else if (effectOne.triggeredPower == 0) {\r\n                            // Equal to the total of all defense cards in the current turn\r\n                            isPower0CardIncluded = true;\r\n                            continue;\r\n                        }\r\n                        defHand.currentBCstats.def += effectOne.triggeredPower;\r\n                    }\r\n                }\r\n                else{\r\n                    //If not triggered, use base stats instead\r\n                    defHand.currentBCstats.def += effectOne.basePower;\r\n                    totalNormalPower += effectOne.basePower;\r\n                }\r\n            \r\n                // If card effect lasts >1 turn\r\n                if (card.effectMany.power != 0) {\r\n                    // Add card to table if there are <5 cards on table right now\r\n                    if (defHand.tableSupportCardStats < _max_cards_on_table) {\r\n                        defHand.tableSupportCards[defHand.tableSupportCardStats++] = TableSupportCardStats({\r\n                            supportCardId: id,\r\n                            effectMany: card.effectMany\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                // Other card type is ignored.\r\n                continue;\r\n            }\r\n        }\r\n        if (isPower0CardIncluded) {\r\n            //If a \"add total of defense\" card is included\r\n            defHand.currentBCstats.def += totalNormalPower;\r\n        }\r\n\r\n        return (atkHand, defHand);\r\n    }\r\n\r\n    //Strip important game information (like speed, intelligence, etc.) from battle card\r\n    function getCardStats(IPepemonCardOracle.BattleCardStats memory x) internal pure returns (CurrentBattleCardStats memory){\r\n        CurrentBattleCardStats memory ret;\r\n\r\n        ret.spd = int(uint(x.spd));\r\n        ret.inte = x.inte;\r\n        ret.def = int(uint(x.def));\r\n        ret.atk = int(uint(x.atk));\r\n        ret.sAtk = int(uint(x.sAtk));\r\n        ret.sDef = int(uint(x.sDef));\r\n\r\n        return ret;\r\n    }\r\n\r\n//Checks if the requirements are satisfied for a certain code\r\n//returns bool - is satisfied?\r\n// uint - the multiplier for the card's attack power\r\n// for most cases multiplier is 1\r\nfunction checkReqCode(\r\n        Hand memory atkHand,\r\n        Hand memory defHand,\r\n        uint256 reqCode,\r\n        bool isAttacker\r\n    ) internal view returns (bool, uint256) {\r\n        bool isTriggered = false;\r\n        uint256 multiplier = 1;\r\n        if (reqCode == 0) {\r\n            // No requirement\r\n            isTriggered = true;\r\n        } else if (reqCode == 1) {\r\n            // Intelligence of offense pepemon <= 5.\r\n            isTriggered = (atkHand.currentBCstats.inte <= 5 );\r\n        } else if (reqCode == 2) {\r\n            // Number of defense cards of defense pepemon is 0.\r\n            isTriggered = true;\r\n            for (uint256 i = 0; i < defHand.currentBCstats.inte; i++) {\r\n                IPepemonCardOracle.SupportCardType supportCardType = _cardContract.getSupportCardTypeById(\r\n                    defHand.supportCardInHandIds[i]\r\n                );\r\n                if (supportCardType == IPepemonCardOracle.SupportCardType.DEFENSE) {\r\n                    isTriggered = false;\r\n                    break;\r\n                }\r\n            }\r\n        } else if (reqCode == 3) {\r\n            // Each +2 offense cards of offense pepemon.\r\n            return countCards(atkHand, IPepemonCardOracle.SupportCardType.OFFENSE, 2);\r\n        } else if (reqCode == 4) {\r\n            // Each +3 offense cards of offense pepemon.\r\n            return countCards(atkHand, IPepemonCardOracle.SupportCardType.OFFENSE, 3);\r\n        } else if (reqCode == 5) {\r\n            // Each offense card of offense pepemon.\r\n            return countCards(atkHand, IPepemonCardOracle.SupportCardType.OFFENSE, 0);\r\n\r\n        } else if (reqCode == 6) {\r\n            // Each +3 defense card of defense pepemon.\r\n            return countCards(defHand, IPepemonCardOracle.SupportCardType.DEFENSE, 3);\r\n        } else if (reqCode == 7) {\r\n            // Each +4 defense card of defense pepemon.\r\n            return countCards(defHand, IPepemonCardOracle.SupportCardType.DEFENSE, 4);\r\n        } else if (reqCode == 8) {\r\n            // Intelligence of defense pepemon <= 5.\r\n            isTriggered = (defHand.currentBCstats.inte <= 5 );\r\n        } else if (reqCode == 9) {\r\n            // Intelligence of defense pepemon >= 7.\r\n            isTriggered = (defHand.currentBCstats.inte >= 7 );\r\n        } else if (reqCode == 10) {\r\n            // Offense pepemon is using strong attack\r\n            for (uint256 i = 0; i < atkHand.currentBCstats.inte; i++) {\r\n                IPepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\r\n                    atkHand.supportCardInHandIds[i]\r\n                );\r\n                if (card.supportCardType == IPepemonCardOracle.SupportCardType.STRONG_OFFENSE) {\r\n                    isTriggered = true;\r\n                    break;\r\n                }\r\n            }\r\n            multiplier = 1;\r\n        } else if (reqCode == 11) {\r\n            // The current HP is less than 50% of max HP.\r\n            isTriggered = lessThanHalfHP(isAttacker ? atkHand : defHand);\r\n        }\r\n        return (isTriggered, multiplier);\r\n    }\r\n\r\n    function lessThanHalfHP(Hand memory hand) internal view returns (bool){\r\n        return hand.health * 2 <= int256(uint256(_cardContract.getBattleCardById(hand.battleCardId).hp));\r\n    }\r\n    \r\n    function countCards(Hand memory hand, IPepemonCardOracle.SupportCardType cardType, int basePower) internal view returns (bool, uint){\r\n        uint multiplier = 0;\r\n        for (uint256 i = 0; i < hand.currentBCstats.inte; i++) {\r\n            IPepemonCardOracle.SupportCardStats memory card = _cardContract.getSupportCardById(\r\n                hand.supportCardInHandIds[i]\r\n            );\r\n            if (card.supportCardType != cardType) {\r\n                continue;\r\n            }\r\n            IPepemonCardOracle.EffectOne memory effectOne = card.effectOne;\r\n            if (effectOne.basePower == basePower || basePower == 0) {\r\n                multiplier++;\r\n            }\r\n        }\r\n        return (multiplier>0, multiplier);\r\n    }\r\n\r\n    function resistanceWeaknessCal(Hand memory atkHand, Hand memory defHand) internal view returns (int){\r\n        int adjustment = 0;\r\n        uint battleIdAtk = atkHand.battleCardId;\r\n        uint battleIdDef = defHand.battleCardId;\r\n        IPepemonCardOracle.BattleCardTypes atkType = _cardContract.getBattleCardById(battleIdAtk).element;\r\n        IPepemonCardOracle.BattleCardTypes defType = _cardContract.getBattleCardById(battleIdDef).element;\r\n        IPepemonCardOracle.BattleCardTypes weakness = _cardContract.getWeakResist(defType).weakness;\r\n        IPepemonCardOracle.BattleCardTypes resistance = _cardContract.getWeakResist(defType).resistance;\r\n        if (atkType == weakness) adjustment = 2;\r\n        if (atkType == resistance) adjustment = -2;\r\n        return adjustment;\r\n    }\r\n}\r\n\r\n\r\n\r\n"
    },
    "contracts/PepemonCardDeck.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n//pragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./iface/IPepemonFactory.sol\";\r\nimport \"./iface/IPepemonCardOracle.sol\";\r\nimport \"./lib/Arrays.sol\";\r\n\r\ncontract PepemonCardDeck is ERC721, ERC1155Holder, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Deck {\r\n        uint256 battleCardId;\r\n        uint256 supportCardCount;\r\n        mapping(uint256 => SupportCardType) supportCardTypes;\r\n        uint256[] supportCardTypeList;\r\n    }\r\n\r\n    struct SupportCardType {\r\n        uint256 supportCardId;\r\n        uint256 count;\r\n        uint256 pointer;\r\n        bool isEntity;\r\n    }\r\n\r\n    struct SupportCardRequest {\r\n        uint256 supportCardId;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 public MAX_SUPPORT_CARDS;\r\n    uint256 public MIN_SUPPORT_CARDS;\r\n\r\n    // set this to 0 to disable minting test cards.\r\n    uint256 maxMintTestCardId;\r\n    uint256 minMintTestCardId;\r\n\r\n    uint256 nextDeckId;\r\n    address public battleCardAddress;\r\n    address public supportCardAddress;\r\n\r\n    mapping(uint256 => Deck) public decks;\r\n    mapping(address => uint256[]) public playerToDecks;\r\n\r\n    constructor() ERC721(\"Pepedeck\", \"Pepedeck\") {\r\n        nextDeckId = 1;\r\n        MAX_SUPPORT_CARDS = 60;\r\n        MIN_SUPPORT_CARDS = 40;\r\n        \r\n        minMintTestCardId = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Override supportInterface .\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC1155Receiver)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier sendersDeck(uint256 _deckId) {\r\n        require(msg.sender == ownerOf(_deckId), \"PepemonCardDeck: Not your deck\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    // PUBLIC METHODS\r\n    function setBattleCardAddress(address _battleCardAddress) public onlyOwner {\r\n        battleCardAddress = _battleCardAddress;\r\n    }\r\n\r\n    function setSupportCardAddress(address _supportCardAddress) public onlyOwner {\r\n        supportCardAddress = _supportCardAddress;\r\n    }\r\n\r\n    function setMaxSupportCards(uint256 _maxSupportCards) public onlyOwner {\r\n        MAX_SUPPORT_CARDS = _maxSupportCards;\r\n    }\r\n\r\n    function setMinSupportCards(uint256 _minSupportCards) public onlyOwner {\r\n        MIN_SUPPORT_CARDS = _minSupportCards;\r\n    }\r\n\r\n    // ALLOW TEST MINTING\r\n    function setMintingCards(uint256 minCardId, uint256 maxCardId) public onlyOwner {\r\n        maxMintTestCardId = maxCardId;\r\n        minMintTestCardId = minCardId;\r\n    }\r\n    /**\r\n     * @dev right now there are 40 different cards that can be minted, but the maximum is configurable with maxMintTestCard. \r\n     * setting maxMintTestCard to 0 disables this card minting.\r\n     */\r\n    function mintCards() public {\r\n        require(maxMintTestCardId > 0, \"Minting test cards is disabled\");\r\n        IPepemonFactory(supportCardAddress).batchMint(minMintTestCardId, maxMintTestCardId, msg.sender);\r\n    }\r\n\r\n    function createDeck() public {\r\n        _safeMint(msg.sender, nextDeckId);\r\n        playerToDecks[msg.sender].push(nextDeckId);\r\n        nextDeckId = nextDeckId.add(1);\r\n    }\r\n\r\n    function addBattleCardToDeck(uint256 deckId, uint256 battleCardId) public sendersDeck(deckId) {\r\n        require(\r\n            IPepemonFactory(battleCardAddress).balanceOf(msg.sender, battleCardId) >= 1,\r\n            \"PepemonCardDeck: Don't own battle card\"\r\n        );\r\n\r\n        require(battleCardId != decks[deckId].battleCardId, \"PepemonCardDeck: Card already in deck\");\r\n\r\n        uint256 oldBattleCardId = decks[deckId].battleCardId;\r\n        decks[deckId].battleCardId = battleCardId;\r\n\r\n        IPepemonFactory(battleCardAddress).safeTransferFrom(msg.sender, address(this), battleCardId, 1, \"\");\r\n\r\n        returnBattleCardFromDeck(oldBattleCardId);\r\n    }\r\n\r\n    function removeBattleCardFromDeck(uint256 _deckId) public sendersDeck(_deckId) {\r\n        uint256 oldBattleCardId = decks[_deckId].battleCardId;\r\n\r\n        decks[_deckId].battleCardId = 0;\r\n\r\n        returnBattleCardFromDeck(oldBattleCardId);\r\n    }\r\n\r\n    function addSupportCardsToDeck(uint256 deckId, SupportCardRequest[] memory supportCards) public sendersDeck(deckId) {\r\n        for (uint256 i = 0; i < supportCards.length; i++) {\r\n            addSupportCardToDeck(deckId, supportCards[i].supportCardId, supportCards[i].amount);\r\n        }\r\n    }\r\n\r\n    function removeSupportCardsFromDeck(uint256 _deckId, SupportCardRequest[] memory _supportCards) public sendersDeck(_deckId) {\r\n        for (uint256 i = 0; i < _supportCards.length; i++) {\r\n            removeSupportCardFromDeck(_deckId, _supportCards[i].supportCardId, _supportCards[i].amount);\r\n        }\r\n    }\r\n\r\n    // INTERNALS\r\n    function addSupportCardToDeck(\r\n        uint256 _deckId,\r\n        uint256 _supportCardId,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(MAX_SUPPORT_CARDS >= decks[_deckId].supportCardCount.add(_amount), \"PepemonCardDeck: Deck overflow\");\r\n        require(\r\n            IPepemonFactory(supportCardAddress).balanceOf(msg.sender, _supportCardId) >= _amount,\r\n            \"PepemonCardDeck: You don't have enough of this card\"\r\n        );\r\n\r\n        if (!decks[_deckId].supportCardTypes[_supportCardId].isEntity) {\r\n            decks[_deckId].supportCardTypes[_supportCardId] = SupportCardType({\r\n                supportCardId: _supportCardId,\r\n                count: _amount,\r\n                pointer: decks[_deckId].supportCardTypeList.length,\r\n                isEntity: true\r\n            });\r\n\r\n            // Prepend the ID to the list\r\n            decks[_deckId].supportCardTypeList.push(_supportCardId);\r\n        } else {\r\n            SupportCardType storage supportCard = decks[_deckId].supportCardTypes[_supportCardId];\r\n            supportCard.count = supportCard.count.add(_amount);\r\n        }\r\n\r\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.add(_amount);\r\n\r\n        IPepemonFactory(supportCardAddress).safeTransferFrom(msg.sender, address(this), _supportCardId, _amount, \"\");\r\n    }\r\n\r\n    function removeSupportCardFromDeck(\r\n        uint256 _deckId,\r\n        uint256 _supportCardId,\r\n        uint256 _amount\r\n    ) internal {\r\n        SupportCardType storage supportCardList = decks[_deckId].supportCardTypes[_supportCardId];\r\n        supportCardList.count = supportCardList.count.sub(_amount);\r\n\r\n        decks[_deckId].supportCardCount = decks[_deckId].supportCardCount.sub(_amount);\r\n\r\n        if (supportCardList.count == 0) {\r\n            uint256 lastItemIndex = decks[_deckId].supportCardTypeList.length - 1;\r\n\r\n            // update the pointer of the item to be swapped\r\n            uint256 lastSupportCardId = decks[_deckId].supportCardTypeList[lastItemIndex];\r\n            decks[_deckId].supportCardTypes[lastSupportCardId].pointer = supportCardList.pointer;\r\n\r\n            // swap the last item of the list with the one to be deleted\r\n            decks[_deckId].supportCardTypeList[supportCardList.pointer] = decks[_deckId].supportCardTypeList[lastItemIndex];\r\n            decks[_deckId].supportCardTypeList.pop();\r\n\r\n            delete decks[_deckId].supportCardTypes[_supportCardId];\r\n        }\r\n\r\n        IPepemonFactory(supportCardAddress).safeTransferFrom(address(this), msg.sender, _supportCardId, _amount, \"\");\r\n    }\r\n\r\n    function returnBattleCardFromDeck(uint256 _battleCardId) internal {\r\n        if (_battleCardId != 0) {\r\n            IPepemonFactory(battleCardAddress).safeTransferFrom(address(this), msg.sender, _battleCardId, 1, \"\");\r\n        }\r\n    }\r\n\r\n    // VIEWS\r\n    function getDeckCount(address player) public view returns (uint256) {\r\n        return playerToDecks[player].length;\r\n    }\r\n\r\n    function getBattleCardInDeck(uint256 _deckId) public view returns (uint256) {\r\n        return decks[_deckId].battleCardId;\r\n    }\r\n\r\n    function getCardTypesInDeck(uint256 _deckId) public view returns (uint256[] memory) {\r\n        Deck storage deck = decks[_deckId];\r\n\r\n        uint256[] memory supportCardTypes = new uint256[](deck.supportCardTypeList.length);\r\n\r\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\r\n            supportCardTypes[i] = deck.supportCardTypeList[i];\r\n        }\r\n\r\n        return supportCardTypes;\r\n    }\r\n\r\n    function getCountOfCardTypeInDeck(uint256 _deckId, uint256 _cardTypeId) public view returns (uint256) {\r\n        return decks[_deckId].supportCardTypes[_cardTypeId].count;\r\n    }\r\n\r\n    function getSupportCardCountInDeck(uint256 deckId) public view returns (uint256) {\r\n        return decks[deckId].supportCardCount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array of support cards for a deck\r\n     * @param _deckId uint256 ID of the deck\r\n     */\r\n    function getAllSupportCardsInDeck(uint256 _deckId) public view returns (uint256[] memory) {\r\n        Deck storage deck = decks[_deckId];\r\n        uint256[] memory supportCards = new uint256[](deck.supportCardCount);\r\n        uint256 idx = 0;\r\n        for (uint256 i = 0; i < deck.supportCardTypeList.length; i++) {\r\n            uint256 supportCardId = deck.supportCardTypeList[i];\r\n            uint256 count = deck.supportCardTypes[supportCardId].count;\r\n            for (uint256 j = 0; j < count; j++) {\r\n                supportCards[idx++] = supportCardId;\r\n            }\r\n        }\r\n        return supportCards;\r\n    }\r\n\r\n    /**\r\n     * @dev Shuffles deck\r\n     * @param _deckId uint256 ID of the deck\r\n     */\r\n    function shuffleDeck(uint256 _deckId, uint256 _seed) public view returns (uint256[] memory) {\r\n        uint256[] memory totalSupportCards = getAllSupportCardsInDeck(_deckId);\r\n        return Arrays.shuffle(totalSupportCards, _seed);\r\n    }\r\n}\r\n"
    },
    "contracts/PepemonCardOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./cardlib/AdminRole.sol\";\r\n\r\n/**\r\nThis contract acts as the oracle, it contains battling information for both the Pepemon Battle and Support cards\r\n**/\r\ncontract PepemonCardOracle is AdminRole {\r\n    enum SupportCardType {OFFENSE, STRONG_OFFENSE, DEFENSE, STRONG_DEFENSE}\r\n\r\n    enum EffectTo {ATTACK, STRONG_ATTACK, DEFENSE, STRONG_DEFENSE, SPEED, INTELLIGENCE}\r\n\r\n    enum EffectFor {ME, ENEMY}\r\n\r\n    enum BattleCardTypes {FIRE, GRASS, WATER, LIGHTNING, WIND, POISON, GHOST, FAIRY, EARTH, UNKNOWN, NONE}\r\n\r\n    struct BattleCardStats {\r\n        uint256 battleCardId;\r\n        BattleCardTypes element;\r\n        uint16 hp; // hitpoints\r\n        uint16 spd; // speed\r\n        uint16 inte; // intelligence\r\n        uint16 def; // defense\r\n        uint16 atk; // attack\r\n        uint16 sAtk; // special attack\r\n        uint16 sDef; // special defense\r\n    }\r\n\r\n    struct SupportCardStats {\r\n        uint256 supportCardId;\r\n        SupportCardType supportCardType;\r\n        EffectOne effectOne;\r\n        EffectMany effectMany;\r\n        // If true, duplicate copies of the card in the same turn will have no extra effect.\r\n        bool unstackable;\r\n        // This property is for EffectMany now.\r\n        // If true, assume the card is already in effect\r\n        // then the same card drawn and used within a number of turns does not extend or reset duration of the effect.\r\n        bool unresettable;\r\n    }\r\n\r\n    struct EffectOne {\r\n        // If power is 0, it is equal to the total of all normal offense/defense cards in the current turn.\r\n\r\n        //basePower = power if req not met\r\n        int16 basePower;\r\n        //triggeredPower = power if req met\r\n        int16 triggeredPower;\r\n        EffectTo effectTo;\r\n        EffectFor effectFor;\r\n        uint16 reqCode; //requirement code\r\n    }\r\n\r\n    struct EffectMany {\r\n        int16 power;\r\n        uint16 numTurns;\r\n        EffectTo effectTo;\r\n        EffectFor effectFor;\r\n        uint16 reqCode; //requirement code\r\n    }\r\n\r\n    //Struct for keeping track of weakness / resistance\r\n    struct elementWR {\r\n        BattleCardTypes weakness;\r\n        BattleCardTypes resistance;\r\n    }\r\n\r\n    mapping(uint256 => BattleCardStats) public battleCardStats;\r\n    mapping(uint256 => SupportCardStats) public supportCardStats;\r\n    mapping(BattleCardTypes => string) public elementDecode;\r\n    mapping(BattleCardTypes => elementWR) public weakResist;\r\n\r\n    event BattleCardCreated(address sender, uint256 cardId);\r\n    event BattleCardUpdated(address sender, uint256 cardId);\r\n    event SupportCardCreated(address sender, uint256 cardId);\r\n    event SupportCardUpdated(address sender, uint256 cardId);\r\n\r\n    constructor() {\r\n        elementDecode[BattleCardTypes.FIRE] = \"Fire\";\r\n        elementDecode[BattleCardTypes.GRASS] = \"Grass\";\r\n        elementDecode[BattleCardTypes.WATER] = \"Water\";\r\n        elementDecode[BattleCardTypes.LIGHTNING] = \"Lighting\";\r\n        elementDecode[BattleCardTypes.WIND] = \"Wind\";\r\n        elementDecode[BattleCardTypes.POISON] = \"Poison\";\r\n        elementDecode[BattleCardTypes.GHOST] = \"Ghost\";\r\n        elementDecode[BattleCardTypes.FAIRY] = \"Fairy\";\r\n        elementDecode[BattleCardTypes.EARTH] = \"Earth\";\r\n        elementDecode[BattleCardTypes.UNKNOWN] = \"Unknown\";\r\n        elementDecode[BattleCardTypes.NONE] = \"None\";\r\n        weakResist[BattleCardTypes.FIRE] = elementWR(BattleCardTypes.WATER, BattleCardTypes.GRASS);\r\n        weakResist[BattleCardTypes.GRASS] = elementWR(BattleCardTypes.FIRE, BattleCardTypes.WATER);\r\n        weakResist[BattleCardTypes.WATER] = elementWR(BattleCardTypes.LIGHTNING, BattleCardTypes.FIRE);\r\n        weakResist[BattleCardTypes.LIGHTNING] = elementWR(BattleCardTypes.EARTH, BattleCardTypes.WIND);\r\n        weakResist[BattleCardTypes.WIND] = elementWR(BattleCardTypes.POISON, BattleCardTypes.EARTH);\r\n        weakResist[BattleCardTypes.POISON] = elementWR(BattleCardTypes.FAIRY, BattleCardTypes.GRASS);\r\n        weakResist[BattleCardTypes.GHOST] = elementWR(BattleCardTypes.FAIRY, BattleCardTypes.POISON);\r\n        weakResist[BattleCardTypes.FAIRY] = elementWR(BattleCardTypes.GHOST, BattleCardTypes.FAIRY);\r\n        weakResist[BattleCardTypes.EARTH] = elementWR(BattleCardTypes.GRASS, BattleCardTypes.GHOST);\r\n        weakResist[BattleCardTypes.UNKNOWN] = elementWR(BattleCardTypes.NONE, BattleCardTypes.NONE);\r\n        weakResist[BattleCardTypes.NONE] = elementWR(BattleCardTypes.NONE, BattleCardTypes.NONE);\r\n    }\r\n\r\n    function addBattleCard(BattleCardStats memory cardData) public onlyAdmin {\r\n        require(battleCardStats[cardData.battleCardId].battleCardId == 0, \"PepemonCard: BattleCard already exists\");\r\n\r\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\r\n        _card.battleCardId = cardData.battleCardId;\r\n        _card.element = cardData.element;\r\n        _card.hp = cardData.hp;\r\n        _card.spd = cardData.spd;\r\n        _card.inte = cardData.inte;\r\n        _card.def = cardData.def;\r\n        _card.atk = cardData.atk;\r\n        _card.sDef = cardData.sDef;\r\n        _card.sAtk = cardData.sAtk;\r\n\r\n        emit BattleCardCreated(msg.sender, cardData.battleCardId);\r\n    }\r\n\r\n    function updateBattleCard(BattleCardStats memory cardData) public onlyAdmin {\r\n        require(battleCardStats[cardData.battleCardId].battleCardId != 0, \"PepemonCard: BattleCard not found\");\r\n\r\n        BattleCardStats storage _card = battleCardStats[cardData.battleCardId];\r\n        _card.hp = cardData.hp;\r\n        _card.element = cardData.element;\r\n        _card.spd = cardData.spd;\r\n        _card.inte = cardData.inte;\r\n        _card.def = cardData.def;\r\n        _card.atk = cardData.atk;\r\n        _card.sDef = cardData.sDef;\r\n        _card.sAtk = cardData.sAtk;\r\n\r\n        emit BattleCardUpdated(msg.sender, cardData.battleCardId);\r\n    }\r\n\r\n    function getBattleCardById(uint256 _id) public view returns (BattleCardStats memory) {\r\n        return battleCardStats[_id];\r\n    }\r\n\r\n    function addSupportCard(SupportCardStats memory cardData) public onlyAdmin {\r\n        require(supportCardStats[cardData.supportCardId].supportCardId == 0, \"PepemonCard: SupportCard already exists\");\r\n\r\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\r\n        _card.supportCardId = cardData.supportCardId;\r\n        _card.supportCardType = cardData.supportCardType;\r\n        _card.effectOne = cardData.effectOne;\r\n        _card.effectMany = cardData.effectMany;\r\n        _card.unstackable = cardData.unstackable;\r\n        _card.unresettable = cardData.unresettable;\r\n\r\n        emit SupportCardCreated(msg.sender, cardData.supportCardId);\r\n    }\r\n\r\n    function updateSupportCard(SupportCardStats memory cardData) public onlyAdmin {\r\n        require(supportCardStats[cardData.supportCardId].supportCardId != 0, \"PepemonCard: SupportCard not found\");\r\n\r\n        SupportCardStats storage _card = supportCardStats[cardData.supportCardId];\r\n        _card.supportCardId = cardData.supportCardId;\r\n        _card.supportCardType = cardData.supportCardType;\r\n        _card.effectOne = cardData.effectOne;\r\n        _card.effectMany = cardData.effectMany;\r\n        _card.unstackable = cardData.unstackable;\r\n        _card.unresettable = cardData.unresettable;\r\n\r\n        emit SupportCardUpdated(msg.sender, cardData.supportCardId);\r\n    }\r\n\r\n    function getSupportCardById(uint256 _id) public view returns (SupportCardStats memory) {\r\n        return supportCardStats[_id];\r\n    }\r\n\r\n    function getWeakResist(BattleCardTypes element) public view returns (elementWR memory) {\r\n        return weakResist[element];\r\n    }\r\n\r\n    /**\r\n     * @dev Get supportCardType of supportCard\r\n     * @param _id uint256\r\n     */\r\n    function getSupportCardTypeById(uint256 _id) public view returns (SupportCardType) {\r\n        return getSupportCardById(_id).supportCardType;\r\n    }\r\n}\r\n"
    },
    "contracts/PepemonFactory.sol": {
      "content": "import \"./cardlib/ERC1155Tradable.sol\";\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Pepemon Factory\r\n * PEPEMON - gotta farm em all\r\n */\r\ncontract PepemonFactory is ERC1155Tradable {\r\n    string private _contractURI;\r\n\r\n    constructor() ERC1155Tradable(\"PepemonBattleFactory\", \"PEPEBATTLE\") {\r\n        _setBaseMetadataURI(\"https://pepemon.finance/api/cards/\");\r\n        _contractURI = \"https://pepemon.finance/api/pepemon-erc1155\";\r\n    }\r\n\r\n    function setBaseMetadataURI(string memory newURI) public onlyWhitelistAdmin {\r\n        _setBaseMetadataURI(newURI);\r\n    }\r\n\r\n    function setContractURI(string memory newURI) public onlyWhitelistAdmin {\r\n        _contractURI = newURI;\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Ends minting of token\r\n     * @param _id          Token ID for which minting will end\r\n     */\r\n    function endMinting(uint256 _id) external onlyWhitelistAdmin {\r\n        tokenMaxSupply[_id] = tokenSupply[_id];\r\n    }\r\n\r\n    function burn(\r\n        address _account,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) public onlyMinter {\r\n        require(balanceOf(_account, _id) >= _amount, \"Cannot burn more than addres has\");\r\n        _burn(_account, _id, _amount);\r\n    }\r\n\r\n    /**\r\n     * Mint NFT and send those to the list of given addresses\r\n     */\r\n    function airdrop(uint256 _id, address[] memory _addresses) public onlyMinter {\r\n        require(tokenMaxSupply[_id] - tokenSupply[_id] >= _addresses.length, \"Cant mint above max supply\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            mint(_addresses[i], _id, 1, \"\");\r\n        }\r\n    }\r\n\r\n    function batchMint(\r\n        uint256 start,\r\n        uint256 end,\r\n        address to\r\n    ) external onlyMinter {\r\n        for (uint256 i = start; i <= end; i++) {\r\n            mintPepe(to, i, 1, hex\"\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/PepemonMatchmaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"./lib/AdminRole.sol\";\r\nimport \"./PepemonCardDeck.sol\";\r\nimport \"./lib/RewardPool.sol\";\r\nimport \"./lib/Elo.sol\";\r\nimport \"./iface/IPepemonCardOracle.sol\";\r\nimport \"./PepemonBattle.sol\";\r\n\r\ncontract PepemonMatchmaker is ERC1155Holder, ERC721Holder, AdminRole {\r\n    event BattleFinished(address indexed winner, address indexed loser, uint256 battleId);\r\n\r\n    struct waitingDeckData {\r\n        uint256 deckId;\r\n        uint256 enterTimestamp;\r\n    }\r\n\r\n    address private _battleAddress;\r\n    address private _deckAddress;\r\n    address private _rewardPoolAddress;\r\n    bool private _allowBattleAgainstOneself;\r\n    bool private _pveMode;\r\n\r\n    uint256 private immutable _defaultRanking;\r\n    uint256 private _matchRange = 300;\r\n    uint256 private _matchRangePerMinute = 1;\r\n    uint256 private _kFactor = 16;\r\n\r\n    mapping(uint256 => uint256) internal _waitingDecksIndex; // _waitingDecksIndex[deckId] -> index of waitingDecks\r\n    mapping(uint256 => address) public deckOwner;\r\n    waitingDeckData[] public waitingDecks;\r\n\r\n    mapping(address => uint256) public playerRanking;\r\n    address[] public leaderboardPlayers;\r\n\r\n    constructor (uint256 defaultRanking, address battleAddress, address deckAddress, address rewardPoolAddress) {\r\n        _defaultRanking = defaultRanking; // suggested: 2000\r\n        _battleAddress = battleAddress;\r\n        _deckAddress = deckAddress;\r\n        _rewardPoolAddress = rewardPoolAddress;\r\n        _allowBattleAgainstOneself = false;\r\n    }\r\n\r\n    function setPveMode(bool enable) public onlyAdmin {\r\n        _pveMode = enable;\r\n    }\r\n\r\n    function addPveDeck(uint256 deckId) public onlyAdmin {\r\n        require(_pveMode == true);\r\n\r\n        // must be set, unless PvE requires no ranking (to be confirmed)\r\n        if (playerRanking[msg.sender] == 0) {\r\n            playerRanking[msg.sender] = _defaultRanking;\r\n            leaderboardPlayers.push(msg.sender);\r\n        }\r\n\r\n        addWaitingDeck(deckId);\r\n    }\r\n\r\n    function removePveDeck(uint256 deckId) public onlyAdmin {\r\n        require(_pveMode == true);\r\n        removeWaitingDeck(deckId);\r\n    }\r\n\r\n    function setAllowBattleAgainstOneself(bool allow) public onlyAdmin {\r\n        _allowBattleAgainstOneself = allow;\r\n    }\r\n\r\n    function setDeckContractAddress(address deckContractAddress) public onlyAdmin {\r\n        _deckAddress = deckContractAddress;\r\n    }\r\n\r\n    function setBattleContractAddress(address battleContractAddress) public onlyAdmin {\r\n        _battleAddress = battleContractAddress;\r\n    }\r\n\r\n    function setRewardPoolAddress(address rewardPoolAddress) public onlyAdmin {\r\n        _rewardPoolAddress = rewardPoolAddress;\r\n    }\r\n\r\n    function setMatchRange(uint256 matchRange, uint256 matchRangePerMinute) public onlyAdmin {\r\n        _matchRange = matchRange;\r\n        _matchRangePerMinute = matchRangePerMinute;\r\n    }\r\n\r\n    function forceExit(uint256 deckId) public onlyAdmin {\r\n        removeWaitingDeck(deckId);\r\n    }\r\n\r\n    /**\r\n     * @dev Dictates the rate of change, has a direct influence on how much a player wins/loses in the ranking\r\n     * @param kFactor Value used to calculate the rate of change in getEloRatingChange\r\n     */\r\n    function setKFactor(uint256 kFactor) public onlyAdmin {\r\n        _kFactor = kFactor;\r\n    }\r\n\r\n    /**\r\n     * @notice Tells whether or not this contract is operating in PvE mode. When in PvE mode, players cannot fight against\r\n     * each other (because PvE is the opposite of PvP).\r\n     */\r\n    function isPveMode() public view returns(bool) {\r\n        return _pveMode;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of players currently on the leaderboard.\r\n     * @return The number of players currently on the leaderboard.\r\n     */\r\n    function leaderboardPlayersCount() public view returns(uint256) {\r\n        return leaderboardPlayers.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rankings and addresses of players on the leaderboard, within a given range of indices.\r\n     * @param count The number of rankings to return.\r\n     * @param offset The index of the first ranking to return.\r\n     * @return addresses An array of player addresses corresponding to the returned rankings.\r\n     * @return rankings An array of ranking values for the returned players.\r\n     * @dev Requires that `count` is less than or equal to the number of players on the leaderboard minus `offset`, and that `offset` is less than the number of players on the leaderboard.\r\n     */\r\n    function getPlayersRankings(\r\n        uint256 count,\r\n        uint256 offset\r\n    ) public view returns (address[] memory addresses, uint256[] memory rankings) {\r\n        require(offset < leaderboardPlayers.length, \"Invalid offset\");\r\n        \r\n        if(count - offset > leaderboardPlayers.length) {\r\n            count = leaderboardPlayers.length;\r\n        }\r\n\r\n        addresses = new address[](count);\r\n        rankings = new uint256[](count);\r\n\r\n        for (uint256 i = offset; i < offset + count; ++i) {\r\n            address playerAddress = leaderboardPlayers[i];\r\n            addresses[i - offset] = playerAddress;\r\n            rankings[i - offset] = playerRanking[playerAddress];\r\n        }\r\n        return (addresses, rankings);\r\n    }\r\n\r\n    /**\r\n     * @notice Tries to initiate a battle using a specified deck.\r\n     * @dev This function tries to initiate a battle either in PvE or PvP depending on how the contract is operating. \r\n     * @param deckId The Deck of who called this function\r\n     */\r\n    function enter(uint256 deckId) public {\r\n        require(msg.sender == PepemonCardDeck(_deckAddress).ownerOf(deckId), \"PepemonMatchmaker: Not your deck\");\r\n        require(PepemonCardDeck(_deckAddress).getBattleCardInDeck(deckId) != 0, \"PepemonMatchmaker: Invalid battlecard\");\r\n\r\n        // Make sure the player has the minimum amount of support cards required\r\n        (,uint256 supportCardCount) = PepemonCardDeck(_deckAddress).decks(deckId);\r\n        require(supportCardCount >= PepemonCardDeck(_deckAddress).MIN_SUPPORT_CARDS(), \"PepemonMatchmaker: Not enough support cards\");\r\n\r\n        // If playerRanking is empty, set default ranking\r\n        if (playerRanking[msg.sender] == 0) {\r\n            playerRanking[msg.sender] = _defaultRanking;\r\n            leaderboardPlayers.push(msg.sender);\r\n        }\r\n\r\n        if (_pveMode == false) {\r\n            enterPvp(deckId);\r\n        } else {\r\n            enterPve(deckId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Tries to initiate a battle using a specified deck. Opponents are not other players but a set of decks added by admins.\r\n     * @dev This function cannot be used if _pveMode is set to false.\r\n     * @param deckId The Deck of the player\r\n     */\r\n    function enterPve(uint256 deckId) internal {\r\n        // Get a matchmaking opponent\r\n        uint256 opponentDeckId = getPveMatchmakingOpponent(deckId);\r\n\r\n        // If one is found then start the battle, otherwise revert the transaction because someone forgot to add the opponents\r\n        if (opponentDeckId > 0) {\r\n            // start battle\r\n            processMatch(deckId, opponentDeckId);\r\n        } else {\r\n            // should only happen if an admin forgot to add decks to this contract\r\n            revert(\"PepemonMatchmaker: No PvE opponents available\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Tries to initiate a battle using a specified deck. If no opponents are found, the deck\r\n     * is placed in a wait list.\r\n     * @dev This function cannot be used if _pveMode is set to true.\r\n     * @param deckId The Deck of the player\r\n     */\r\n    function enterPvp(uint256 deckId) internal {\r\n        // Try find matchmaking partner\r\n        uint256 opponentDeckId = findMatchmakingOpponent(deckId);\r\n\r\n        // If one is found then start the battle, otherwise put in a wait list\r\n        if (opponentDeckId > 0) {\r\n            // start battle\r\n            processMatch(deckId, opponentDeckId);\r\n            // prevent other matches from starting immediately after this one finishes\r\n            removeWaitingDeck(opponentDeckId);\r\n        } else {\r\n            addWaitingDeck(deckId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers a deck back to its owner and removes from the wait list\r\n     * @param deckId The Deck of the owner\r\n     */\r\n    function exit(uint256 deckId) public {\r\n        require(waitingDecks.length > 0 && waitingDecks[_waitingDecksIndex[deckId]].deckId != 0, \"PepemonMatchmaker: Deck is not in the wait list\");\r\n        require(msg.sender == deckOwner[deckId], \"PepemonMatchmaker: Not your deck\");\r\n        removeWaitingDeck(deckId);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the Elo change based on the winner's and loser's ratings.\r\n     * @dev The returned number has 2 decimals of precision, so 1501 = 15.01 Elo change\r\n     */\r\n    function getEloRatingChange(uint256 winnerRating, uint256 loserRating) public view returns (uint256) {\r\n        (uint256 change,) = Elo.ratingChange(winnerRating, loserRating, 100, _kFactor);\r\n        return change;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the number of waiting decks\r\n     */\r\n    function getWaitingCount() public view returns (uint256) {\r\n        return waitingDecks.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers a deck from its owner onto this contract, then adds the deck to the wait list\r\n     * @param deckId The Deck of the owner\r\n     */\r\n    function addWaitingDeck(uint256 deckId) internal {\r\n        deckOwner[deckId] = msg.sender;\r\n        PepemonCardDeck(_deckAddress).safeTransferFrom(msg.sender, address(this), deckId, \"\");\r\n\r\n        _waitingDecksIndex[deckId] = waitingDecks.length;\r\n        waitingDecks.push(waitingDeckData(deckId, block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @notice Removes a deck from the wait list\r\n     * @dev Works by replacing the current element by the last element of the array. See https://stackoverflow.com/a/74668959\r\n     * @param deckId The Deck of the owner\r\n     */\r\n    function removeWaitingDeck(uint256 deckId) internal {\r\n        // Transfer deck back to owner\r\n        PepemonCardDeck(_deckAddress).safeTransferFrom(address(this), deckOwner[deckId], deckId, \"\");\r\n        delete deckOwner[deckId];\r\n\r\n        uint256 lastItemIndex = waitingDecks.length - 1;\r\n\r\n        uint256 lastDeckId = waitingDecks[lastItemIndex].deckId;\r\n\r\n        // update the index of the item to be swapped \r\n        _waitingDecksIndex[lastDeckId] = _waitingDecksIndex[deckId];\r\n\r\n        // swap the last item of the list with the one to be deleted\r\n        waitingDecks[_waitingDecksIndex[deckId]] = waitingDecks[lastItemIndex];\r\n        waitingDecks.pop();\r\n        delete _waitingDecksIndex[deckId];\r\n    }\r\n\r\n    /**\r\n     * @notice Performs the battle between player 1's and player 2's deck, sends a reward for the winner,\r\n     * and ajust their ranking\r\n     * @param player1deckId Deck of the first player\r\n     * @param player2deckId Deck of the second player\r\n     */\r\n    function processMatch(uint256 player1deckId, uint256 player2deckId) internal {\r\n        // Evaluate the battle winner\r\n        (address winner, address loser, uint256 battleId) = doBattle(player1deckId, player2deckId);\r\n        // Declare loser and winner\r\n        emit BattleFinished(winner, loser, battleId);\r\n\r\n        // Send a reward to the winner\r\n        RewardPool(_rewardPoolAddress).sendReward(battleId, winner);\r\n\r\n        // Adjust ranking accordingly. Change is adjusted to remove the extra precision from getEloRatingChange\r\n        uint256 change = getEloRatingChange(playerRanking[winner], playerRanking[loser]) / 100;\r\n        playerRanking[winner] += change;\r\n        // Prevent underflow or rank reset if it gets below or equal to zero. Unlikely, but possible.\r\n        if(int256(playerRanking[loser]) - int256(change) > 0) {\r\n            playerRanking[loser] = playerRanking[loser] - change;\r\n        } else {\r\n            playerRanking[loser] = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Takes one random deckId from the waiting list, which in pve mode contains decks set by admins instead of other player's decks\r\n     * @param deckId Deck of the current player trying to start a match, only used for added entropy\r\n     * @return opponentDeckId Deck of the opponent, if any. 0 when none are available\r\n     */\r\n    function getPveMatchmakingOpponent(uint256 deckId) internal view returns (uint256) {\r\n        if (waitingDecks.length == 0) {\r\n            return 0;\r\n        }\r\n        // Take one of the random pve decks\r\n        uint256 index = uint256(keccak256(abi.encodePacked(uint256(63), deckId, block.timestamp))) % waitingDecks.length;\r\n        return waitingDecks[index].deckId;\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to find an opponent's deck based off all waiting player's ratings. The acceptable\r\n     * difference between players ratings is increased over time by an amount defined by _matchRangePerMinute\r\n     * @param deckId Deck of the current player trying to start a match\r\n     * @return opponentDeckId Deck of the opponent, if found. 0 when not found\r\n     */\r\n    function findMatchmakingOpponent(uint256 deckId) internal view returns (uint256) {\r\n        // Find a waiting deck with a ranking that is within matchRange\r\n        for (uint256 i = 0; i < waitingDecks.length; ++i) {\r\n            uint256 currentIterDeck = waitingDecks[i].deckId;\r\n\r\n            // Skip own deck, as well as other decks of the same owner IF _allowBattleAgainstOneself is false\r\n            if (i == deckId || (!_allowBattleAgainstOneself && msg.sender == deckOwner[currentIterDeck])) {\r\n                continue;\r\n            }\r\n\r\n            // increase precision to allow increasing playerMatchRange every second\r\n            uint256 mins = (120 * (block.timestamp - waitingDecks[i].enterTimestamp)) / 60;\r\n            uint256 playerMatchRange = _matchRange + (mins * _matchRangePerMinute) / 120;\r\n            // Assume deckOwner[deckId] is msg.sender, because we are not storing msg.sender in deckOwner[deckId], saving gas\r\n            if (\r\n                // instead of doing the following:\r\n                // playerRanking[msg.sender] > (playerRanking[deckOwner[currentIterDeck]] - playerMatchRange) &&\r\n                // we invert the math operation to avoid casting everything to int256, thus saving some gas\r\n                (playerRanking[msg.sender] + playerMatchRange) > playerRanking[deckOwner[currentIterDeck]] &&\r\n                playerRanking[msg.sender] < (playerRanking[deckOwner[currentIterDeck]] + playerMatchRange)\r\n            ) {\r\n                return waitingDecks[i].deckId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new battle in the PepemonBattle contract and executes the battle logic\r\n     * @param player1deckId Deck of the first player\r\n     * @param player2deckId Deck of the second player\r\n     * @return winner Address of the winner\r\n     * @return loser Address of the loser\r\n     * @return battleId Random seed generated for the battle\r\n     */\r\n    function doBattle(uint256 player1deckId, uint256 player2deckId) internal returns (address, address, uint256) {\r\n        // Assume deckOwner[player1deckId] is msg.sender, because we are not storing msg.sender in deckOwner[player1deckId], saving gas\r\n        (PepemonBattle.Battle memory battle, uint256 battleId) = PepemonBattle(_battleAddress).createBattle(\r\n            msg.sender,\r\n            player1deckId,\r\n            deckOwner[player2deckId],\r\n            player2deckId\r\n        );\r\n        (, address winner) = PepemonBattle(_battleAddress).goForBattle(battle);\r\n        address loser = (winner == msg.sender ? deckOwner[player2deckId] : msg.sender);\r\n        return (winner, loser, battleId);\r\n    }\r\n}\r\n"
    },
    "contracts/PepemonRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"./lib/RewardPool.sol\";\nimport \"./lib/AdminRole.sol\";\n\ncontract PepemonRewardPool is RewardPool, ERC1155Holder, AdminRole {\n    struct Reward {\n        uint256 tokenId;\n        address tokenAddress;\n    }\n    Reward[] internal rewardPool;\n\n    /**\n     * @dev Adds a single reward into the pool.\n     * @param tokenAddress Reward address\n     * @param tokenId Reward id\n     */\n    function addReward(address tokenAddress, uint256 tokenId) external override onlyAdmin {\n        require(\n            ERC1155(tokenAddress).balanceOf(address(msg.sender), tokenId) > 0,\n            \"PepemonRewardPool: You don't have enough of this token\"\n        );\n        ERC1155(tokenAddress).safeTransferFrom(address(msg.sender), address(this), tokenId, 1, \"\");\n        rewardPool.push(Reward(tokenId, tokenAddress));\n    }\n\n    /**\n     * @dev Transfer an amount of a given token from the sender into the rewardPool\n     * @param tokenAddress Reward address\n     * @param tokenId Reward id\n     * @param amount The number of items to be added to the pool.\n     */\n    function addRewards(address tokenAddress, uint256 tokenId, uint256 amount) external override onlyAdmin {\n        require(\n            ERC1155(tokenAddress).balanceOf(address(msg.sender), tokenId) > 0,\n            \"PepemonRewardPool: You don't have enough of this token\"\n        );\n        require(amount > 0, \"PepemonRewardPool: Amount must be greater than 0\");\n\n        ERC1155(tokenAddress).safeTransferFrom(address(msg.sender), address(this), tokenId, amount, \"\");\n\n        for (uint256 i = 0; i < amount; ++i) {\n            rewardPool.push(Reward(tokenId, tokenAddress));\n        }\n    }\n\n    /**\n     * @dev Batch version of addRewards\n     */\n    function addRewardsBatch(\n        address[] calldata tokenAddresses,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) external onlyAdmin {\n        require(\n            tokenAddresses.length == tokenIds.length && tokenIds.length == amounts.length,\n            \"PepemonRewardPool: Arrays must be of the same size\"\n        );\n\n        for (uint256 i = 0; i < tokenAddresses.length; ++i) {\n            ERC1155(tokenAddresses[i]).safeTransferFrom(\n                address(msg.sender),\n                address(this),\n                tokenIds[i],\n                amounts[i],\n                \"\"\n            );\n            for (uint256 j = 0; j < amounts[i]; ++j) {\n                rewardPool.push(Reward(tokenIds[i], tokenAddresses[i]));\n            }\n        }\n    }\n\n    /**\n     * @dev Takes a random reward from rewardPool and sends it to someone.\n     * @param rngSeed RNG seed of a Battle\n     * @param account Address of who will receive the reward\n     */\n    function sendReward(uint256 rngSeed, address account) external override onlyAdmin {\n        // TODO: emit event when this happens\n        if (rewardPool.length == 0) {\n            return;\n        }\n        uint256 index = uint256(keccak256(abi.encodePacked(uint256(42), rngSeed))) % rewardPool.length;\n        // get reward\n        address rewardTokenAddress = rewardPool[index].tokenAddress;\n        uint256 rewardTokenId = rewardPool[index].tokenId;\n        \n        // remove reward from pool\n        rewardPool[index] = rewardPool[rewardPool.length - 1];\n        rewardPool.pop();\n        ERC1155(rewardTokenAddress).safeTransferFrom(address(this), account, rewardTokenId, 1, \"\");\n    }\n}\n"
    },
    "contracts/SampleChainLinkRngOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\nimport \"./lib/ChainLinkRngOracle.sol\";\n\ncontract SampleChainLinkRngOracle is ChainLinkRngOracle {\n}\n"
    },
    "solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            // Mod x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            z := mod(x, y)\n        }\n    }\n\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\n        assembly {\n            // Divide x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            r := div(x, y)\n        }\n    }\n\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            // Add 1 to x * y if x % y > 0. Note this will\n            // return 0 instead of reverting if y is zero.\n            z := add(gt(mod(x, y), 0), div(x, y))\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}